{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[{"_id":"source/CNAME","path":"CNAME","modified":0,"renderable":0},{"_id":"themes/hexo-theme-xups/source/css/style.styl","path":"css/style.styl","modified":0,"renderable":1},{"_id":"themes/hexo-theme-xups/source/img/default.png","path":"img/default.png","modified":0,"renderable":1},{"_id":"themes/hexo-theme-xups/source/img/jelon.jpg","path":"img/jelon.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-xups/source/img/gatieme.jpg","path":"img/gatieme.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-xups/source/img/loading.gif","path":"img/loading.gif","modified":0,"renderable":1},{"_id":"themes/hexo-theme-xups/source/img/scrolltoparrow.png","path":"img/scrolltoparrow.png","modified":0,"renderable":1},{"_id":"themes/hexo-theme-xups/source/img/share.png","path":"img/share.png","modified":0,"renderable":1},{"_id":"themes/hexo-theme-xups/source/img/url.png","path":"img/url.png","modified":0,"renderable":1},{"_id":"themes/hexo-theme-xups/source/img/wechat_jelon.png","path":"img/wechat_jelon.png","modified":0,"renderable":1},{"_id":"themes/hexo-theme-xups/source/img/wechat_mp.jpg","path":"img/wechat_mp.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-xups/source/img/wechat_pay.png","path":"img/wechat_pay.png","modified":0,"renderable":1},{"_id":"themes/hexo-theme-xups/source/js/comment.js","path":"js/comment.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-xups/source/js/html5.js","path":"js/html5.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-xups/source/js/main.js","path":"js/main.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-xups/source/img/no_found.png","path":"img/no_found.png","modified":0,"renderable":1},{"_id":"themes/hexo-theme-xups/source/img/unsigned_avatar.jpg","path":"img/unsigned_avatar.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-xups/source/img/lab/banner.jpg","path":"img/lab/banner.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-xups/source/img/thumbnail/0.jpg","path":"img/thumbnail/0.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-xups/source/img/thumbnail/1.jpg","path":"img/thumbnail/1.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-xups/source/img/thumbnail/4.jpg","path":"img/thumbnail/4.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-xups/source/img/thumbnail/5.jpg","path":"img/thumbnail/5.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-xups/source/img/thumbnail/6.jpg","path":"img/thumbnail/6.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-xups/source/img/thumbnail/7.jpg","path":"img/thumbnail/7.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-xups/source/img/thumbnail/8.jpg","path":"img/thumbnail/8.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-xups/source/img/thumbnail/9.jpg","path":"img/thumbnail/9.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-xups/source/css/fonts/icomoon/icomoon.ttf","path":"css/fonts/icomoon/icomoon.ttf","modified":0,"renderable":1},{"_id":"themes/hexo-theme-xups/source/img/thumbnail/2.jpg","path":"img/thumbnail/2.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-xups/source/img/thumbnail/3.jpg","path":"img/thumbnail/3.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-xups/source/css/fonts/homizio-nova/italic.otf","path":"css/fonts/homizio-nova/italic.otf","modified":0,"renderable":1},{"_id":"themes/hexo-theme-xups/source/css/fonts/homizio-nova/italic.ttf","path":"css/fonts/homizio-nova/italic.ttf","modified":0,"renderable":1},{"_id":"themes/hexo-theme-xups/source/css/fonts/homizio-nova/light.otf","path":"css/fonts/homizio-nova/light.otf","modified":0,"renderable":1},{"_id":"themes/hexo-theme-xups/source/css/fonts/homizio-nova/light_italic.otf","path":"css/fonts/homizio-nova/light_italic.otf","modified":0,"renderable":1},{"_id":"themes/hexo-theme-xups/source/css/fonts/homizio-nova/light_italic.ttf","path":"css/fonts/homizio-nova/light_italic.ttf","modified":0,"renderable":1},{"_id":"themes/hexo-theme-xups/source/css/fonts/homizio-nova/regular.otf","path":"css/fonts/homizio-nova/regular.otf","modified":0,"renderable":1},{"_id":"themes/hexo-theme-xups/source/css/fonts/icomoon/icomoon.eot","path":"css/fonts/icomoon/icomoon.eot","modified":0,"renderable":1},{"_id":"themes/hexo-theme-xups/source/css/fonts/icomoon/icomoon.svg","path":"css/fonts/icomoon/icomoon.svg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-xups/source/css/fonts/icomoon/icomoon.woff","path":"css/fonts/icomoon/icomoon.woff","modified":0,"renderable":1},{"_id":"themes/hexo-theme-xups/source/css/fonts/homizio-nova/light.ttf","path":"css/fonts/homizio-nova/light.ttf","modified":0,"renderable":1},{"_id":"themes/hexo-theme-xups/source/css/fonts/homizio-nova/regular.ttf","path":"css/fonts/homizio-nova/regular.ttf","modified":0,"renderable":1}],"Cache":[{"_id":"source/CNAME","hash":"014213eab5be84b2f373585e51a800a7dbd00af2","modified":1537022295738},{"_id":"themes/hexo-theme-xups/.gitignore","hash":"7d65523f2a5afb69d76824dd1dfa62a34faa3197","modified":1533448101926},{"_id":"themes/hexo-theme-xups/README.md","hash":"71f6ebf5e9b6689f81e03525335b071d7a954944","modified":1533448101923},{"_id":"themes/hexo-theme-xups/_config.yml","hash":"dbee38b205a3e12515946366871809dc95e82538","modified":1558265188474},{"_id":"source/about/index.md","hash":"ca181d8df4b1854c0abd8e6ac77f7e1174246478","modified":1533458024370},{"_id":"source/comment/index.md","hash":"7aa4e68e0b93e0120f5c04f7443737a63c3be04b","modified":1533458024370},{"_id":"source/lab/index.md","hash":"54439706a7555b5f402f9ff25bd502d1c2c1981f","modified":1537070388513},{"_id":"source/navigation/index.md","hash":"77f4ca9f18ee586ff1fe5bdfca742be03261bb44","modified":1537786287241},{"_id":"themes/hexo-theme-xups/.git/COMMIT_EDITMSG","hash":"e0af9f7089bb31d8ae7d28450bb01a112defb5e6","modified":1537797949842},{"_id":"themes/hexo-theme-xups/.git/FETCH_HEAD","hash":"3733794543bcf4479968761469a6b48153e33ca5","modified":1533454066082},{"_id":"themes/hexo-theme-xups/.git/HEAD","hash":"17572e1be0796a02dd6885e964498961f659efee","modified":1533454231627},{"_id":"themes/hexo-theme-xups/.git/config","hash":"dea691be2314da0e7d8ad92acc460b76d09d10d8","modified":1533454231627},{"_id":"themes/hexo-theme-xups/.git/description","hash":"9635f1b7e12c045212819dd934d809ef07efa2f4","modified":1533448101930},{"_id":"themes/hexo-theme-xups/.git/index","hash":"b20e09ca2dad1c18172b0efd058aa5b3bee7842c","modified":1537797905689},{"_id":"themes/hexo-theme-xups/.git/packed-refs","hash":"2283ab5bf852778dbc145a7997bb90c3b13663c2","modified":1533448101930},{"_id":"themes/hexo-theme-xups/__scaffolds/draft.md","hash":"a7fd8b8488eb143616b8e2a64b4df4796a46749b","modified":1533448101927},{"_id":"themes/hexo-theme-xups/__scaffolds/page.md","hash":"f0af1cb10f27d859caa51c8e3704469d9ed842a6","modified":1533448101927},{"_id":"themes/hexo-theme-xups/__scaffolds/post.md","hash":"a7fd8b8488eb143616b8e2a64b4df4796a46749b","modified":1533448101927},{"_id":"themes/hexo-theme-xups/layout/archive.ejs","hash":"31abd4b39017d7edb46d39602869dd6960d0257d","modified":1533448101927},{"_id":"themes/hexo-theme-xups/layout/layout.ejs","hash":"6a9ca891687ce82bdece8180a916a758ced62780","modified":1533448101927},{"_id":"themes/hexo-theme-xups/layout/index.ejs","hash":"14638cc02aa4c6a89525aafdd5ddab218716da60","modified":1533448101927},{"_id":"themes/hexo-theme-xups/layout/page.ejs","hash":"5ee8cddebd16cf10c47666ffe9d8ea8731967d43","modified":1537076785701},{"_id":"themes/hexo-theme-xups/layout/category.ejs","hash":"85318d660fae55d3163c7bedcb4024171e424b50","modified":1533448101927},{"_id":"themes/hexo-theme-xups/layout/post.ejs","hash":"b5e43e5408546ee142a060cc6253f3a4ea869174","modified":1533448101927},{"_id":"themes/hexo-theme-xups/layout/tag.ejs","hash":"0c04305b5f407c21a2ffeb2317e61b7f830eeeff","modified":1533448101927},{"_id":"themes/hexo-theme-xups/source/.DS_Store","hash":"fba98dc5c9096d5dba9d35076164c00012d98e11","modified":1533448101923},{"_id":"themes/hexo-theme-xups/layout/tags.ejs","hash":"cbfc913dcc81ccca5cd3dbea743c6202a10cf6ef","modified":1533448101927},{"_id":"themes/hexo-theme-xups/.git/hooks/applypatch-msg.sample","hash":"4de88eb95a5e93fd27e78b5fb3b5231a8d8917dd","modified":1533448101930},{"_id":"themes/hexo-theme-xups/.git/hooks/commit-msg.sample","hash":"ee1ed5aad98a435f2020b6de35c173b75d9affac","modified":1533448101930},{"_id":"themes/hexo-theme-xups/.git/hooks/post-update.sample","hash":"b614c2f63da7dca9f1db2e7ade61ef30448fc96c","modified":1533448101930},{"_id":"themes/hexo-theme-xups/.git/hooks/pre-applypatch.sample","hash":"f208287c1a92525de9f5462e905a9d31de1e2d75","modified":1533448101930},{"_id":"themes/hexo-theme-xups/.git/hooks/pre-commit.sample","hash":"36aed8976dcc08b5076844f0ec645b18bc37758f","modified":1533448101931},{"_id":"themes/hexo-theme-xups/.git/hooks/pre-push.sample","hash":"5c8518bfd1d1d3d2c1a7194994c0a16d8a313a41","modified":1533448101930},{"_id":"themes/hexo-theme-xups/.git/hooks/pre-rebase.sample","hash":"18be3eb275c1decd3614e139f5a311b75f1b0ab8","modified":1533448101930},{"_id":"themes/hexo-theme-xups/.git/hooks/pre-receive.sample","hash":"705a17d259e7896f0082fe2e9f2c0c3b127be5ac","modified":1533448101930},{"_id":"themes/hexo-theme-xups/.git/hooks/prepare-commit-msg.sample","hash":"2b6275eda365cad50d167fe3a387c9bc9fedd54f","modified":1533448101930},{"_id":"themes/hexo-theme-xups/.git/hooks/update.sample","hash":"e729cd61b27c128951d139de8e7c63d1a3758dde","modified":1533448101930},{"_id":"themes/hexo-theme-xups/.git/info/exclude","hash":"c879df015d97615050afa7b9641e3352a1e701ac","modified":1533448101930},{"_id":"themes/hexo-theme-xups/.git/logs/HEAD","hash":"f2084d937200a2c8164f5ac6436b57762530936c","modified":1537797949844},{"_id":"themes/hexo-theme-xups/__source/about/index.md","hash":"412d256cac08818a734905b25131a2c67f81b656","modified":1533448101931},{"_id":"themes/hexo-theme-xups/__source/comment/index.md","hash":"7aa4e68e0b93e0120f5c04f7443737a63c3be04b","modified":1533448101931},{"_id":"themes/hexo-theme-xups/__source/lab/index.md","hash":"67dfb6bc43414b499e8d4224f50e61dece8c4519","modified":1533448101931},{"_id":"themes/hexo-theme-xups/layout/_custom/comment.ejs","hash":"49261ba2c801b8183a1297b387f5ae24cc8bbd21","modified":1533448101927},{"_id":"themes/hexo-theme-xups/layout/_custom/about.ejs","hash":"11baa35dac9ccada8137523979edbafe86e13c50","modified":1536997553168},{"_id":"themes/hexo-theme-xups/layout/_custom/lab.ejs","hash":"c016ca3e32b72daa1897d7e2954c21f373b04327","modified":1533448101927},{"_id":"themes/hexo-theme-xups/layout/_partial/after-footer.ejs","hash":"914a1e80bd70ba029353fa7c4519667aa236b4fa","modified":1533448101926},{"_id":"themes/hexo-theme-xups/layout/_custom/navigation.ejs","hash":"410437a30b06a10aea471d41561249a93f6e3e8e","modified":1537787605022},{"_id":"themes/hexo-theme-xups/layout/_partial/archive-post.ejs","hash":"929d5c9bc0ee6694aa2cdcd5ff94e2dc9eddda6e","modified":1537796676205},{"_id":"themes/hexo-theme-xups/layout/_partial/archive.ejs","hash":"662ccb612a07b80628906ff1d3e4af8d48ad98c4","modified":1533448101927},{"_id":"themes/hexo-theme-xups/layout/_partial/article.ejs","hash":"d9266a15f9b7cf553aa6874d18a754278d161115","modified":1537796648016},{"_id":"themes/hexo-theme-xups/layout/_partial/baidu-analytics.ejs","hash":"4e423e13ace638931c44f268fe521300984149e7","modified":1533448101927},{"_id":"themes/hexo-theme-xups/layout/_partial/footer.ejs","hash":"eb8ef2fb8795788ff385f53a372096abfcc048be","modified":1537797406810},{"_id":"themes/hexo-theme-xups/layout/_partial/header.ejs","hash":"b0092908c331876f3ffb84886d57256a6091b78c","modified":1537797100289},{"_id":"themes/hexo-theme-xups/layout/_partial/head.ejs","hash":"40c0323bc182b5cf4cbfa35a4f813bf9c568c835","modified":1533448101927},{"_id":"themes/hexo-theme-xups/layout/_widget/friend_links.ejs","hash":"3989e3d7afa49fd632250b555a639efcdca28f96","modified":1533448101927},{"_id":"themes/hexo-theme-xups/layout/_widget/categorys.ejs","hash":"93b8aae666a11c759c98907a7f78594bca029280","modified":1533448101927},{"_id":"themes/hexo-theme-xups/layout/_widget/tags.ejs","hash":"5feb9aaf13e606d687e9816325bf212ef110d46c","modified":1533448101927},{"_id":"themes/hexo-theme-xups/layout/_partial/sidebar.ejs","hash":"d044cbd121fc377d8d12196c22289d9b10d9cc89","modified":1533448101927},{"_id":"themes/hexo-theme-xups/layout/_widget/weibo.ejs","hash":"db02c4b93932b5fe764ab018bb22a01f23b40d33","modified":1533448101927},{"_id":"themes/hexo-theme-xups/source/css/.DS_Store","hash":"7a2750dc6206c6f07303809521f5eb6654cfc3b3","modified":1533448101924},{"_id":"themes/hexo-theme-xups/source/css/_extend.styl","hash":"cf2b2e114d79a77c4e98771a8f80b00aa9d5078b","modified":1533448101924},{"_id":"themes/hexo-theme-xups/source/css/_markdown.styl","hash":"cce612ff67ad1d88a8cee1a5cfe3460f8f507e06","modified":1533448101925},{"_id":"themes/hexo-theme-xups/source/css/_variables.styl","hash":"0208156f550db42697f997fefade378f16c250ff","modified":1533448101924},{"_id":"themes/hexo-theme-xups/source/css/style.styl","hash":"d639ec5c6ee4751385f62287d759b832f07ad01d","modified":1533448101924},{"_id":"themes/hexo-theme-xups/source/img/.DS_Store","hash":"a1bdef3a79e0c0f0c4f92e81c00a875f6422dab5","modified":1533448101926},{"_id":"themes/hexo-theme-xups/source/img/default.png","hash":"a0e8360a185c7516bc2dddb25241daee67b42972","modified":1533448101926},{"_id":"themes/hexo-theme-xups/source/img/jelon.jpg","hash":"5a698f21552a8365ef44f7113665bff8121635cb","modified":1533448101926},{"_id":"themes/hexo-theme-xups/source/img/gatieme.jpg","hash":"67676e00fd4cf4f30e7554338c805afc4b7a165a","modified":1536845422000},{"_id":"themes/hexo-theme-xups/source/img/loading.gif","hash":"92dcf9179379355f05cf2d1c8cceba930a2a674f","modified":1533448101926},{"_id":"themes/hexo-theme-xups/source/img/scrolltoparrow.png","hash":"53bd140adb85b23d535d1e488550eda4624a58bd","modified":1533448101926},{"_id":"themes/hexo-theme-xups/source/img/share.png","hash":"20a860aeb842a556d067deabb99f6bfc024c97d0","modified":1533448101926},{"_id":"themes/hexo-theme-xups/source/img/url.png","hash":"be1f35666ed5bf03aa3f6db121bd03c407b158a7","modified":1533448101925},{"_id":"themes/hexo-theme-xups/source/img/wechat_jelon.png","hash":"f1e1cab54bfb69e7816b1d5f355100ea8b272ce4","modified":1533448101926},{"_id":"themes/hexo-theme-xups/source/img/wechat_mp.jpg","hash":"d58b7796093ca8cdd4034b2dd28021c147199099","modified":1533448101926},{"_id":"themes/hexo-theme-xups/source/img/wechat_pay.png","hash":"9fdf91183035c299312a434421718ee581267e02","modified":1536930925000},{"_id":"themes/hexo-theme-xups/source/js/comment.js","hash":"05c9dd18edbae3788148ae94a5e4fe7a4aabea66","modified":1536846733886},{"_id":"themes/hexo-theme-xups/source/js/html5.js","hash":"4fefd28dcad6c973c44719ce8b3a8b82fe670a59","modified":1533448101926},{"_id":"themes/hexo-theme-xups/source/js/main.js","hash":"457dc472d3a3aecfb57fdbe80d7d475c3ef5baf4","modified":1533448101926},{"_id":"themes/hexo-theme-xups/source/img/no_found.png","hash":"aa383a9a73b3468b6a77ea3e3676b3f9d6e6ef0d","modified":1533448101926},{"_id":"themes/hexo-theme-xups/source/img/unsigned_avatar.jpg","hash":"8343a845110fca8317440fcf61aae209eec57edf","modified":1533448101926},{"_id":"source/_posts/2018/08/0001_static-site-generators.md","hash":"4d0208d7dfe61638cc9eb9c981ce94fdcbe6da71","modified":1537788438701},{"_id":"source/_posts/2018/08/0002_cmatrix.md","hash":"ed3607dffd16064aaf51978673f53e550c3ec9c9","modified":1533458024370},{"_id":"source/_posts/2018/09/0001-use_hexo_to_build_your_github_page_blog.md","hash":"971a489647a2f03ada72df9ec4bf6a4bcde4d7d7","modified":1536283694375},{"_id":"source/_posts/2018/09/0002-hexo_use_branch_to_backup_your_hexo_environment_and_blogs.md","hash":"f137ea778bcbb3d0ef42bc82fa5fcbf1c67ac1a7","modified":1536283687068},{"_id":"themes/hexo-theme-xups/.git/objects/00/aa00adfddd124594c384a5964557d595e61131","hash":"51068dd98fb8699ea2b16cc0a4cf86f4ef313413","modified":1536926710659},{"_id":"themes/hexo-theme-xups/.git/objects/09/2387822d766573aa32dc85378392b4869c4c2b","hash":"a7d5a89a9e5b04b235b558fbc7be344ebf58817a","modified":1536845895091},{"_id":"themes/hexo-theme-xups/.git/objects/0a/b905f8c4d9014ea0411e64b3964ff2cec81d01","hash":"74f996c727cba6b8e796560e79ad8698fcbb80c7","modified":1537780622774},{"_id":"themes/hexo-theme-xups/.git/objects/0f/8284773d2dac20b266532fcd28437182c89715","hash":"a07c4c1d01f795e63d96710d96710912f6bf0d7c","modified":1536931643896},{"_id":"themes/hexo-theme-xups/.git/objects/14/cdb6049da1baea8bbbce2a6c646acdfe01c6f5","hash":"cf662d9ef284fbd38b5f1cb44e381a4a0f856798","modified":1537077350864},{"_id":"themes/hexo-theme-xups/.git/objects/22/fb1a85343628a288fb44a26bdf431d0f9094ef","hash":"e44cec2ea75ecb02bc7e399ada2728c2944e3323","modified":1537780638034},{"_id":"themes/hexo-theme-xups/.git/objects/23/05f385785e3131013357be784a99a651dbc8e7","hash":"dc9c7dbe3752fc42312db5b874e4746629ecb926","modified":1537024424719},{"_id":"themes/hexo-theme-xups/.git/objects/24/24f9942d6762026e4f9419f7666080194be894","hash":"f4d5e818038e59a9564495017ca0aebc8634a191","modified":1536845895091},{"_id":"themes/hexo-theme-xups/.git/objects/2d/c56014bf87557c70ff9c8448ce39a4d4771091","hash":"6b5f14c35fdf458712c46bd5ed012b4f126769a4","modified":1537024421194},{"_id":"themes/hexo-theme-xups/.git/objects/2f/52dd45fa54f6147dc4a45f0131d290b62dc182","hash":"e07f1c8fb8d6998231b687a8e146f7d9de05ff12","modified":1536931643896},{"_id":"themes/hexo-theme-xups/.git/objects/2e/2162c08f51e036fcf7f7364ec8e48999d9eb91","hash":"32d075480609674b353beedc9c1d04d2664f0af4","modified":1533458667033},{"_id":"themes/hexo-theme-xups/.git/objects/2e/5fc8df4a61107a78f6c32adf4047e2e5ad099e","hash":"371e89f75b7d9f213e2d1fb78b46ea1c4e664959","modified":1537023814141},{"_id":"themes/hexo-theme-xups/.git/objects/32/1e2009d3a61f3514a7a8800b67de749f34bc4c","hash":"98f7059325ea71c93bc455bd3c0cf8c36df0fae6","modified":1537787922214},{"_id":"themes/hexo-theme-xups/.git/objects/35/5b130c221b2725edf69ac357be2f338f43ae49","hash":"2d5ad4eb8db0126bb7406ec4784ffb9d1f17e893","modified":1533458667032},{"_id":"themes/hexo-theme-xups/.git/objects/36/f2ade4bceb1df0d60ba7deb70504ecc0191f6e","hash":"33b142eb19823013a9e9af8d70d61143d7338f49","modified":1536846815175},{"_id":"themes/hexo-theme-xups/.git/objects/38/b9024946a5a33c9047eda2ef9341017aac21ab","hash":"3e4a2448df5ac324bf58bfc18a34f0e1eeb8ba40","modified":1537024424719},{"_id":"themes/hexo-theme-xups/.git/objects/3b/f194d2bc3460749bff30e2f3a9576c4a007873","hash":"cc0113c45c2cbffd7762f505d2d096268c3dc411","modified":1533453944570},{"_id":"themes/hexo-theme-xups/.git/objects/50/304e4f32a7e39f0cb6c364a46b4c624ee7ce47","hash":"cca3fb59756a6774fa1dd1c5c57f954a6ba1994c","modified":1536931160158},{"_id":"themes/hexo-theme-xups/.git/objects/50/fb58e8d52f1714ed649471d8bb4b20bb91751d","hash":"28875673e2c36a0fa4becc850317b4d7144ac0d0","modified":1536847705563},{"_id":"themes/hexo-theme-xups/.git/objects/51/4de8f58ceeb8fee806e65d15b180aac96422d9","hash":"25873a4e65b5911b9298cd06dc50614cef9209b2","modified":1537787871805},{"_id":"themes/hexo-theme-xups/.git/objects/52/67f2d8d6626ba533a9c8c18736a47f842372fc","hash":"1f4796497d466f525b7a06d72899a8f3e6451cfd","modified":1536845895090},{"_id":"themes/hexo-theme-xups/.git/objects/52/f6afacfcd0e0e0e87bac560eef35cebc310553","hash":"171af117b80768fd718b4ee17b85c92ec3665a27","modified":1536926710660},{"_id":"themes/hexo-theme-xups/.git/objects/54/942dfaf6763ef81ccc028f1c83da2f75f5e836","hash":"8f960c5d7938004f527feb2c6df8b0c79d5aaebb","modified":1536846812432},{"_id":"themes/hexo-theme-xups/.git/objects/55/036bd4326674536ad5ca669abc68ff8bd40fae","hash":"065d60c7e418c66815191660b5841be32a492ae4","modified":1533453944571},{"_id":"themes/hexo-theme-xups/.git/objects/5b/65449aebf32c0229aea5f402b667e66ffbe964","hash":"61396b42bfdeae4ff2e927eae1bce9bb78ff5a74","modified":1536846812431},{"_id":"themes/hexo-theme-xups/.git/objects/5c/e1a106fb2152f21bd7349154a892b64501a764","hash":"3382b5d1c018371086ed2dde5124ba85efa7b5eb","modified":1536931643896},{"_id":"themes/hexo-theme-xups/.git/objects/61/4a10075679f4e261d193ef27a519730a9440b6","hash":"51cf6430cafbc617e8e6466d43c330e4447a7b33","modified":1533458667032},{"_id":"themes/hexo-theme-xups/.git/objects/6a/a7e56614adb42e6dba3b0761f4882cd4f5dd03","hash":"512f5e488150530ab6625ace2f65bf8150d9576b","modified":1537780638033},{"_id":"themes/hexo-theme-xups/.git/objects/6e/42e276b4365b4e73e5e24fec589076e908f625","hash":"8c4f4125a38d0e37fa31d188b09bd54655dafa75","modified":1537787922213},{"_id":"themes/hexo-theme-xups/.git/objects/75/86db0c5ef456ce08ff0cba14ecdd1799403904","hash":"635a9cb50482a3e2635491e12130c3338f1a3aae","modified":1533453902171},{"_id":"themes/hexo-theme-xups/.git/objects/7c/b958d4c8c47592a3a1d167329ae33b0e5c76d8","hash":"d3e4612c6243d5835c7e6b2891e40d62630a5e0e","modified":1536845895091},{"_id":"themes/hexo-theme-xups/.git/objects/80/5942ecd05ee495cce8d2c67ac42be13cfcd579","hash":"bba8321a8f1a2dc8502992c1cf31d4ab23a94329","modified":1537024424718},{"_id":"themes/hexo-theme-xups/.git/objects/81/86c3395f9fd8b72dc10d4865ae4de4fd483e5b","hash":"0d2646b40819219a11b105d4d584dab9cbd7304c","modified":1537077350864},{"_id":"themes/hexo-theme-xups/.git/objects/82/5b1f3d58b4dc9b5ec2a273ab560e76f8e96b67","hash":"9ac11561c47f1e78b3eaa4dfa6a21ec4b00a75a8","modified":1536845895090},{"_id":"themes/hexo-theme-xups/.git/objects/83/5d8733a3191f7dbb56f633acd859989ddc41ab","hash":"8697f102c9d0867462a4ef679d4c02b5a35522f5","modified":1536845850361},{"_id":"themes/hexo-theme-xups/.git/objects/87/bc1cf34daf436bb9c8e7e36c9d4ad3373d385c","hash":"93bece8fc49d22477091d24964684f91cfbdf260","modified":1537024424718},{"_id":"themes/hexo-theme-xups/.git/objects/86/94109268d1cf7f5d3952d7e3af6650d676bbb4","hash":"c04ba1fc490a5640acfc8b7db8ad5c243996f678","modified":1536847681603},{"_id":"themes/hexo-theme-xups/.git/objects/91/bad69627c31833cf7e5cb259213e6476f63d53","hash":"48d9d9aee2869839d37b0af8f1c2351e62ce1c3b","modified":1537780638033},{"_id":"themes/hexo-theme-xups/.git/objects/95/6d06cb366a45633c859719d4ce62355a897da4","hash":"7d9e07a63327978f36549b2ba4c6b6b380dc21d9","modified":1536931151851},{"_id":"themes/hexo-theme-xups/.git/objects/96/3c9b0124c193099109a10e30ce9a8d02d53e8c","hash":"8fbb7bc0385829b1e437832908241127dda5f95c","modified":1536931160158},{"_id":"themes/hexo-theme-xups/.git/objects/99/72044495ec67b222ef5d3b347177f9c7fba7a5","hash":"1ff2948c1be950f2fdcb65b5391fce165bde16f7","modified":1537787922214},{"_id":"themes/hexo-theme-xups/.git/objects/9a/7f5a3ce7580e6c9b349489bf31a43bc225506a","hash":"d224fb765b8689c2c0cea7429f1b1ddaa72188c5","modified":1536847705564},{"_id":"themes/hexo-theme-xups/.git/objects/a0/30cb2dfe1ab1c8c74c590c38c3e05bdf3d9c83","hash":"5f67a1a87480b47cb421b14e8ca49e21292b5314","modified":1536931637224},{"_id":"themes/hexo-theme-xups/.git/objects/a3/439881ab358734124a9e41081cbc1bdb149b38","hash":"0702436f1a31f9e40ac20ebe0fb251a16ff499eb","modified":1536846812431},{"_id":"themes/hexo-theme-xups/.git/objects/a6/9c9bd7790b283709e5314fdc05da3221bcfd85","hash":"e5ab0715992e42d61f4e3b44a4362072b7ef8122","modified":1536931160158},{"_id":"themes/hexo-theme-xups/.git/objects/b0/d339d35ced800586c704acca1ac0f8e225b38f","hash":"5ebe940099c986a6787ce3d2d33f829c8334e59d","modified":1536846803621},{"_id":"themes/hexo-theme-xups/.git/objects/b4/fddc30b34d99c82d435d28bc154001593de8fe","hash":"465d5b931c6ae26a8227c0a62c252e35741667a2","modified":1533458667032},{"_id":"themes/hexo-theme-xups/.git/objects/b5/b5780ec0b171660a7ae972da741374df41f13a","hash":"1e5af117395c07b6b3a23ca72ba4d32a894383e6","modified":1536845895090},{"_id":"themes/hexo-theme-xups/.git/objects/b6/c4387dbb2743db41e9da98710a8b5cb8511389","hash":"9c5107fec8d2d3e24f112b0219ada2935b9fa6e8","modified":1537023788637},{"_id":"themes/hexo-theme-xups/.git/objects/bb/9d17458c73fec9e8f954d89cdf5d3164378e9e","hash":"605cbaa4712efff27f7b99cc215366d2223ae397","modified":1537077310910},{"_id":"themes/hexo-theme-xups/.git/objects/c0/5135e84757bca442529c624695bbe573512a96","hash":"20c8e75dc5e090dda0873c74e8a92aeb56e0ab80","modified":1536931643896},{"_id":"themes/hexo-theme-xups/.git/objects/c8/080f23969ea94f243cbf4eef0a606b02434176","hash":"15868eee540a7710592949ef20d5949285c0abaf","modified":1537077310910},{"_id":"themes/hexo-theme-xups/.git/objects/cf/df278360ba550d08360007bd9f2f4015c1f277","hash":"02340f63323ec28911cbbf73482071e9ea3a5a9a","modified":1536926697338},{"_id":"themes/hexo-theme-xups/.git/objects/d3/12fe77efa6156fa6be53bfca13b29078eca1f3","hash":"bc1832e522b32439a9246ce77e2cd65bc2980aa6","modified":1536845852672},{"_id":"themes/hexo-theme-xups/.git/objects/da/286a1040c3ec9ff1eb415a27903fbc3fbaf7a0","hash":"d057fcf3279620d6b23f00b28069fc76ba1568a0","modified":1533458664168},{"_id":"themes/hexo-theme-xups/.git/objects/e2/770edc015032770f95b165e9b07a5b38ff13ac","hash":"c5174e8a39ac09a656ae1fd1cce328cbf5fcf5ac","modified":1537077350864},{"_id":"themes/hexo-theme-xups/.git/objects/d4/a55bf563092c4664c7f7b8006b0f34754ca4c6","hash":"94a64239236b26d7cd471879998d6a1f12e5fc38","modified":1537780638033},{"_id":"themes/hexo-theme-xups/.git/objects/e5/a6811e3b20db202716e30c3d7335c282a55c2e","hash":"c191f8dae94ee1b8c09f57578b3643aa953bad6d","modified":1537077350864},{"_id":"themes/hexo-theme-xups/.git/objects/d4/bf9d771b9051caa0163794de35610761a1d8c9","hash":"45af81c560cd3dd57f38c58cf4b690adc5325dd6","modified":1536931160158},{"_id":"themes/hexo-theme-xups/.git/objects/e8/fce9310fb71bff0b3706f0545240a2f6035ddb","hash":"f5602997b145f3130e3a3ab96b15c6e63d6cf04c","modified":1536845895091},{"_id":"themes/hexo-theme-xups/.git/objects/e9/309773fcaccd3a71fb9a176bae269011e9c1f8","hash":"8d336a679ca9ba015bfda7773051640ed0402201","modified":1537023814141},{"_id":"themes/hexo-theme-xups/.git/objects/f2/3b7f9ac50b45f3838cf669dd8af2e24d7b91e5","hash":"1a369202a6600d5bba896c71d95d4acf30d8e725","modified":1536926710659},{"_id":"themes/hexo-theme-xups/.git/objects/f5/56f80449629f1838657c1f7632244377c67029","hash":"baefb79beb52bd52d93810b70ea7c56a70709c5f","modified":1536926710659},{"_id":"themes/hexo-theme-xups/.git/objects/f9/8fea99f7e9de2b0e80159ef089c42454384c22","hash":"269d10d96a19d9983e2cca56244643328d2353bc","modified":1537787922213},{"_id":"themes/hexo-theme-xups/.git/objects/f9/53291d7d4276434030a01d4084038bae2f6a14","hash":"855be23700ea845e7fee1ae2a1304d5932d9c2a7","modified":1537077307019},{"_id":"themes/hexo-theme-xups/.git/objects/fd/6cdfb6c64fbba6db68962bc0121bc12377a070","hash":"3aed9ba3284c0140912c849bac952f16bb37ab65","modified":1536846808351},{"_id":"themes/hexo-theme-xups/.git/objects/pack/pack-680a47c2a38a78ca0824ab9264cbf5b6d4e62807.idx","hash":"568c00c58dddf7970f0f5da51d0f98d3c1b8a569","modified":1533448101927},{"_id":"themes/hexo-theme-xups/.git/refs/heads/gatieme","hash":"d26c1673d0a01b6f3f158e4743d7cf8433ee5bf8","modified":1537797949843},{"_id":"themes/hexo-theme-xups/.git/refs/heads/master","hash":"7c8798bde1226495c4f63238b2327a124df4a96a","modified":1533453944571},{"_id":"themes/hexo-theme-xups/layout/_partial/post/category.ejs","hash":"c3fc5b276c66e5eb8caaae94e102f0f26150e112","modified":1533448101927},{"_id":"themes/hexo-theme-xups/layout/_partial/post/comment.ejs","hash":"d50719dc4ba6f406f9c6676536e5d8c1bd6df1e7","modified":1536845830479},{"_id":"themes/hexo-theme-xups/layout/_partial/post/date.ejs","hash":"848f362936b3f21e067e2a0783efbdbdab338985","modified":1533448101927},{"_id":"themes/hexo-theme-xups/layout/_partial/post/gallery.ejs","hash":"967c57ae109f0ff35e326005f1d3408ab233fbbe","modified":1533448101927},{"_id":"themes/hexo-theme-xups/layout/_partial/post/nav.ejs","hash":"913216eaa215df6457fb4f67771cafc7574c2690","modified":1533448101927},{"_id":"themes/hexo-theme-xups/layout/_partial/post/share.ejs","hash":"38c557ffdf97473caff83ac5a9c92678d0fae2f6","modified":1537796743095},{"_id":"themes/hexo-theme-xups/layout/_partial/post/tag.ejs","hash":"9828fcc52f7ace1436ffa5a5420506de0ab9e190","modified":1533448101927},{"_id":"themes/hexo-theme-xups/layout/_partial/post/title.ejs","hash":"bbdbc39e30776b6ac5a5f8d0d6220a75a644e45a","modified":1533448101927},{"_id":"themes/hexo-theme-xups/source/css/fonts/.DS_Store","hash":"db2379b0a524b084530079a6a32ba976f2892009","modified":1533448101924},{"_id":"themes/hexo-theme-xups/source/css/_base/font.styl","hash":"5a786cdb9de68297d26f8609a42c133f9035f940","modified":1533448101924},{"_id":"themes/hexo-theme-xups/source/css/_base/global.styl","hash":"46e85024409b655234ce00811da3f8600d1deaec","modified":1533448101924},{"_id":"themes/hexo-theme-xups/source/css/_base/normalize.styl","hash":"cbff0cb51c494e3ceba25f34eafd3127ff5266e9","modified":1533448101924},{"_id":"themes/hexo-theme-xups/source/css/_base/reset.styl","hash":"77f86b1fe8f6b8db337892876dc8aec08f6e30dc","modified":1533448101924},{"_id":"themes/hexo-theme-xups/source/css/_partial/.DS_Store","hash":"16121b987e7a7a6c89f78f512e6e63eea583e25a","modified":1533448101923},{"_id":"themes/hexo-theme-xups/source/css/_partial/article.styl","hash":"62258eaa64dde41a31b003cb8904cb04181ecb69","modified":1533448101923},{"_id":"themes/hexo-theme-xups/source/css/_partial/comment.styl","hash":"9be5683da5a466d64c9de62de0332ac50a3dfdeb","modified":1533448101923},{"_id":"themes/hexo-theme-xups/source/css/_partial/footer.styl","hash":"d1f54068da8544a514e13d2c08d39b42dac1edf3","modified":1533448101923},{"_id":"themes/hexo-theme-xups/source/css/_partial/header.styl","hash":"4d0ac2fa978ac22589cc2b2df62f7fb5721f595a","modified":1533448101923},{"_id":"themes/hexo-theme-xups/source/css/_partial/highlight.styl","hash":"cd53e73ddee5258f3d2f2eb11737436b29b51236","modified":1533448101923},{"_id":"themes/hexo-theme-xups/source/css/_partial/post.styl","hash":"80bfe9b69c48837915335c8215db4f869f841baa","modified":1533448101923},{"_id":"themes/hexo-theme-xups/source/css/_partial/responsive.styl","hash":"5fd085dadf3122f4cd5ae934492ea853a14e6180","modified":1533448101923},{"_id":"themes/hexo-theme-xups/source/css/_partial/searchform.styl","hash":"d2cad21d79b3a4a21dbc4a759c6cc3ae8d4a282f","modified":1533448101923},{"_id":"themes/hexo-theme-xups/source/css/_partial/sidebar.styl","hash":"3d0e8e39b85639d4d50ee692744c8562de431cd9","modified":1533448101923},{"_id":"themes/hexo-theme-xups/source/css/_partial/theme.styl","hash":"5d928942e4d8f88be30860452a491560c81aea02","modified":1533448101923},{"_id":"themes/hexo-theme-xups/source/img/lab/banner.jpg","hash":"daa0b3c13831b17182c3d587920f035c80816ae3","modified":1533448101926},{"_id":"themes/hexo-theme-xups/source/img/thumbnail/0.jpg","hash":"7285bbd93d25a0810df38b499fa2b9c201dd88f2","modified":1533448101925},{"_id":"themes/hexo-theme-xups/source/img/thumbnail/1.jpg","hash":"d56409526e114f07de70b9f6be036ee8939626bb","modified":1533448101925},{"_id":"themes/hexo-theme-xups/source/img/thumbnail/4.jpg","hash":"4ba83c3c4937b8068bcb9ed7002c186053482b86","modified":1533448101926},{"_id":"themes/hexo-theme-xups/source/img/thumbnail/5.jpg","hash":"b30fe3c75c445789d83b3d0f2f7b8d456802d306","modified":1533448101925},{"_id":"themes/hexo-theme-xups/source/img/thumbnail/6.jpg","hash":"767c9f7b42b7faf9966fcf87afc732045bf87167","modified":1533448101925},{"_id":"themes/hexo-theme-xups/source/img/thumbnail/7.jpg","hash":"74a4ed49b8823f7e93cad8dc53ed2bcc07f33254","modified":1533448101925},{"_id":"themes/hexo-theme-xups/source/img/thumbnail/8.jpg","hash":"ed356882b0a3015e7aec619bf22dd98e76a2dac8","modified":1533448101925},{"_id":"themes/hexo-theme-xups/source/img/thumbnail/9.jpg","hash":"64aa3752db2dd53e3dbbc7a84967afd2cdedd43e","modified":1533448101925},{"_id":"themes/hexo-theme-xups/source/css/fonts/icomoon/icomoon.ttf","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1533448101924},{"_id":"themes/hexo-theme-xups/source/img/thumbnail/2.jpg","hash":"edbd90ed95301d390a8aa8243cd4c08a4d862402","modified":1533448101925},{"_id":"themes/hexo-theme-xups/source/img/thumbnail/3.jpg","hash":"7870fb47e46f645332174f356148bbc8163dfe13","modified":1533448101925},{"_id":"themes/hexo-theme-xups/.git/logs/refs/heads/gatieme","hash":"47627079b49c596bca5f877a9c2f1132e205c0f5","modified":1537797949843},{"_id":"themes/hexo-theme-xups/.git/logs/refs/heads/master","hash":"596893396e05b490fb921614ca8cd7dbd8beba68","modified":1533453944571},{"_id":"themes/hexo-theme-xups/.git/refs/remotes/origin/HEAD","hash":"d9427cda09aba1cdde5c69c2b13c905bddb0bc51","modified":1533448101930},{"_id":"themes/hexo-theme-xups/.git/refs/remotes/gatieme/gatieme","hash":"d26c1673d0a01b6f3f158e4743d7cf8433ee5bf8","modified":1537798055034},{"_id":"themes/hexo-theme-xups/.git/refs/remotes/gatieme/master","hash":"e59e322bfc39aafa16e40c11a47f3131f04665bc","modified":1533454066081},{"_id":"themes/hexo-theme-xups/source/css/fonts/homizio-nova/.DS_Store","hash":"94c491df2256ef547252eed029a8bfb2961da5fe","modified":1533448101924},{"_id":"themes/hexo-theme-xups/source/css/fonts/homizio-nova/italic.otf","hash":"5b50719da49c1ac26793384b1b68055f01dd4e85","modified":1533448101924},{"_id":"themes/hexo-theme-xups/source/css/fonts/homizio-nova/italic.ttf","hash":"c62e2ba058f3dc49125dc514bcedde065ce64c5f","modified":1533448101924},{"_id":"themes/hexo-theme-xups/source/css/fonts/homizio-nova/light.otf","hash":"4afcc511fe6937b8e8d79e649d70dfb4fff6b406","modified":1533448101924},{"_id":"themes/hexo-theme-xups/source/css/fonts/homizio-nova/light_italic.otf","hash":"29c648cf7caa087f36b1e1e1c479eb63da35af73","modified":1533448101924},{"_id":"themes/hexo-theme-xups/source/css/fonts/homizio-nova/light_italic.ttf","hash":"de9be5ed440fc380f2cbaa1683e94518d3d44e02","modified":1533448101924},{"_id":"themes/hexo-theme-xups/source/css/fonts/homizio-nova/regular.otf","hash":"c6e47b88647ac2b729c05d220cc5be19787b7835","modified":1533448101924},{"_id":"themes/hexo-theme-xups/source/css/fonts/icomoon/icomoon.eot","hash":"26de148529b318cb8159c70ef5adbe3667fb3e6d","modified":1533448101924},{"_id":"themes/hexo-theme-xups/source/css/fonts/icomoon/icomoon.svg","hash":"90f9bbc99d84f36ffa811543bed70a2d79f363b7","modified":1533448101924},{"_id":"themes/hexo-theme-xups/source/css/fonts/icomoon/icomoon.woff","hash":"a5a4ffc5ecda60e59beac6b0f096b25b243a2acb","modified":1533448101924},{"_id":"themes/hexo-theme-xups/source/css/fonts/homizio-nova/light.ttf","hash":"2ba5f36f461b540823978956af8c33b57b0b8ab1","modified":1533448101924},{"_id":"themes/hexo-theme-xups/source/css/fonts/homizio-nova/regular.ttf","hash":"0ab6cf8e5883d5693ba56065e4973cd8b3e896bc","modified":1533448101924},{"_id":"themes/hexo-theme-xups/.git/logs/refs/remotes/gatieme/gatieme","hash":"358ff12a724974fe57bdea88a59b62baaa7e22e6","modified":1537798055034},{"_id":"themes/hexo-theme-xups/.git/logs/refs/remotes/gatieme/master","hash":"00beb7a4661ddfcdf297d4f53fe5766850aee036","modified":1533454066082},{"_id":"themes/hexo-theme-xups/.git/logs/refs/remotes/origin/HEAD","hash":"96fb590d7e3d042aa5fbf12f39e085358be1cfc6","modified":1533448101930},{"_id":"themes/hexo-theme-xups/xups.png","hash":"22f1fc32dea794370b4e791b885c2afb03c886c6","modified":1533448101923},{"_id":"themes/hexo-theme-xups/.git/objects/pack/pack-680a47c2a38a78ca0824ab9264cbf5b6d4e62807.pack","hash":"fd132e6e0a473b36d2e2ef656035d8dc5939f9cf","modified":1533448101930},{"_id":"public/about/index.html","hash":"faa891b92cd38eac88f2cf84969bbf468f20f919","modified":1558406345923},{"_id":"public/comment/index.html","hash":"17df5b48f9a776ba8c8a4f3e4c90ba1ddd307fae","modified":1558406345923},{"_id":"public/lab/index.html","hash":"7ff3340a77d3a8cf7f8846bd8be0bf7196a4681d","modified":1558406345924},{"_id":"public/navigation/index.html","hash":"938c2741a821024d75a2adb1da21af4524f317b9","modified":1558406345924},{"_id":"public/2018/08/05/2018/08/0002_cmatrix/index.html","hash":"6e7388a80ca3b88fbcf66cd8aca25a41e1651d59","modified":1558406345924},{"_id":"public/archives/index.html","hash":"5dc8f4d51c39663f0c74ef81b7f473b95ab1b1e4","modified":1558406345925},{"_id":"public/archives/2018/index.html","hash":"fc5b67aace0e4aac678c105919faaf2082143d6c","modified":1558406345925},{"_id":"public/archives/2018/08/index.html","hash":"168efad65f6a891a443b90ab31463299b8e93636","modified":1558406345924},{"_id":"public/archives/2018/09/index.html","hash":"c289159d85202277d65a6aea9955df0bb7c25e00","modified":1558406345924},{"_id":"public/categories/linux/index.html","hash":"a49911f5b2900eeccabe53635b6808e5568253b9","modified":1558406345924},{"_id":"public/categories/hexo/index.html","hash":"d332bf8db2fe9f6b1924314c3cf4cf45ca930da1","modified":1558406345924},{"_id":"public/index.html","hash":"92e9662e10c4d6fa9744ede7cc3bf9a3b43bd273","modified":1558406345925},{"_id":"public/tags/linux/index.html","hash":"b5b4c7c94b08d48584ec2f79893754cfcb57dc16","modified":1558406345925},{"_id":"public/tags/hexo/index.html","hash":"7fe10f9f1b83bb4aa34f351997a1f7393dd64fcc","modified":1558406345925},{"_id":"public/2018/09/02/2018/09/0002-hexo_use_branch_to_backup_your_hexo_environment_and_blogs/index.html","hash":"2aafb0535b640692ab07d83584528a5f7c2065cd","modified":1558406345925},{"_id":"public/2018/09/02/2018/09/0001-use_hexo_to_build_your_github_page_blog/index.html","hash":"28acd7bc8a313a961d2c9dd77fe9518d1a7fcd0b","modified":1558406345925},{"_id":"public/2018/08/05/2018/08/0001_static-site-generators/index.html","hash":"ca6b801bcfa2e0b628bca9f1931002eb35144b9c","modified":1558406345925},{"_id":"public/css/fonts/icomoon/icomoon.ttf","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1558406345926},{"_id":"public/CNAME","hash":"014213eab5be84b2f373585e51a800a7dbd00af2","modified":1558406345931},{"_id":"public/img/default.png","hash":"a0e8360a185c7516bc2dddb25241daee67b42972","modified":1558406345931},{"_id":"public/img/jelon.jpg","hash":"5a698f21552a8365ef44f7113665bff8121635cb","modified":1558406345931},{"_id":"public/img/gatieme.jpg","hash":"67676e00fd4cf4f30e7554338c805afc4b7a165a","modified":1558406345931},{"_id":"public/img/loading.gif","hash":"92dcf9179379355f05cf2d1c8cceba930a2a674f","modified":1558406345932},{"_id":"public/img/scrolltoparrow.png","hash":"53bd140adb85b23d535d1e488550eda4624a58bd","modified":1558406345932},{"_id":"public/img/share.png","hash":"20a860aeb842a556d067deabb99f6bfc024c97d0","modified":1558406345932},{"_id":"public/img/url.png","hash":"be1f35666ed5bf03aa3f6db121bd03c407b158a7","modified":1558406345932},{"_id":"public/img/wechat_jelon.png","hash":"f1e1cab54bfb69e7816b1d5f355100ea8b272ce4","modified":1558406345932},{"_id":"public/img/wechat_mp.jpg","hash":"d58b7796093ca8cdd4034b2dd28021c147199099","modified":1558406345932},{"_id":"public/img/wechat_pay.png","hash":"9fdf91183035c299312a434421718ee581267e02","modified":1558406345932},{"_id":"public/img/lab/banner.jpg","hash":"daa0b3c13831b17182c3d587920f035c80816ae3","modified":1558406345932},{"_id":"public/img/thumbnail/0.jpg","hash":"7285bbd93d25a0810df38b499fa2b9c201dd88f2","modified":1558406345932},{"_id":"public/img/thumbnail/1.jpg","hash":"d56409526e114f07de70b9f6be036ee8939626bb","modified":1558406345932},{"_id":"public/img/thumbnail/4.jpg","hash":"4ba83c3c4937b8068bcb9ed7002c186053482b86","modified":1558406345932},{"_id":"public/img/thumbnail/5.jpg","hash":"b30fe3c75c445789d83b3d0f2f7b8d456802d306","modified":1558406345932},{"_id":"public/img/thumbnail/6.jpg","hash":"767c9f7b42b7faf9966fcf87afc732045bf87167","modified":1558406345932},{"_id":"public/img/thumbnail/7.jpg","hash":"74a4ed49b8823f7e93cad8dc53ed2bcc07f33254","modified":1558406345933},{"_id":"public/img/thumbnail/8.jpg","hash":"ed356882b0a3015e7aec619bf22dd98e76a2dac8","modified":1558406345933},{"_id":"public/img/thumbnail/9.jpg","hash":"64aa3752db2dd53e3dbbc7a84967afd2cdedd43e","modified":1558406345933},{"_id":"public/css/fonts/homizio-nova/italic.otf","hash":"5b50719da49c1ac26793384b1b68055f01dd4e85","modified":1558406345933},{"_id":"public/css/fonts/homizio-nova/italic.ttf","hash":"c62e2ba058f3dc49125dc514bcedde065ce64c5f","modified":1558406345933},{"_id":"public/css/fonts/homizio-nova/light_italic.otf","hash":"29c648cf7caa087f36b1e1e1c479eb63da35af73","modified":1558406345933},{"_id":"public/css/fonts/homizio-nova/light.otf","hash":"4afcc511fe6937b8e8d79e649d70dfb4fff6b406","modified":1558406345933},{"_id":"public/css/fonts/homizio-nova/light_italic.ttf","hash":"de9be5ed440fc380f2cbaa1683e94518d3d44e02","modified":1558406345933},{"_id":"public/css/fonts/homizio-nova/regular.otf","hash":"c6e47b88647ac2b729c05d220cc5be19787b7835","modified":1558406345933},{"_id":"public/css/fonts/icomoon/icomoon.eot","hash":"26de148529b318cb8159c70ef5adbe3667fb3e6d","modified":1558406345933},{"_id":"public/css/fonts/icomoon/icomoon.svg","hash":"90f9bbc99d84f36ffa811543bed70a2d79f363b7","modified":1558406345934},{"_id":"public/css/fonts/icomoon/icomoon.woff","hash":"a5a4ffc5ecda60e59beac6b0f096b25b243a2acb","modified":1558406345934},{"_id":"public/img/no_found.png","hash":"aa383a9a73b3468b6a77ea3e3676b3f9d6e6ef0d","modified":1558406346203},{"_id":"public/img/unsigned_avatar.jpg","hash":"8343a845110fca8317440fcf61aae209eec57edf","modified":1558406346204},{"_id":"public/img/thumbnail/2.jpg","hash":"edbd90ed95301d390a8aa8243cd4c08a4d862402","modified":1558406346205},{"_id":"public/img/thumbnail/3.jpg","hash":"7870fb47e46f645332174f356148bbc8163dfe13","modified":1558406346205},{"_id":"public/css/fonts/homizio-nova/light.ttf","hash":"2ba5f36f461b540823978956af8c33b57b0b8ab1","modified":1558406346205},{"_id":"public/css/fonts/homizio-nova/regular.ttf","hash":"0ab6cf8e5883d5693ba56065e4973cd8b3e896bc","modified":1558406346205},{"_id":"public/js/html5.js","hash":"4fefd28dcad6c973c44719ce8b3a8b82fe670a59","modified":1558406346207},{"_id":"public/js/main.js","hash":"457dc472d3a3aecfb57fdbe80d7d475c3ef5baf4","modified":1558406346207},{"_id":"public/css/style.css","hash":"175f729156524201d27f665c6007eb7552578e0c","modified":1558406346208},{"_id":"public/js/comment.js","hash":"05c9dd18edbae3788148ae94a5e4fe7a4aabea66","modified":1558406346208},{"_id":"source/_posts/2018/09/0003-qemu_use_9pnet_virtio_fs_to_share_folder.md","hash":"1de5d5d99d38aee47a07a563e6933feafcfba2de","modified":1542443919308},{"_id":"themes/hexo-theme-xups/.git/objects/0d/068a9177728c5b80b29cb7b3afabf8df93cd25","hash":"aa5b0ea8dd5f18b78d3cff42aa7332e02a51549a","modified":1537797949843},{"_id":"themes/hexo-theme-xups/.git/objects/29/e2606dae1c4a47d5e078ac38690dd56221fdc6","hash":"aee5b9f83dc5b67cccae8709847b5598cd70c92b","modified":1537797905688},{"_id":"themes/hexo-theme-xups/.git/objects/5b/1fbb56ef39ca413199917b2b85d3f4f47eb4f3","hash":"17d4eb9f2c2456fbd86c34f5995f3c8127e5fc08","modified":1537797949843},{"_id":"themes/hexo-theme-xups/.git/objects/7f/52b675be56722d1031f0155e95f7b740bd39c4","hash":"194e84427d3c15b80bf36453023c0c603315d426","modified":1537797905689},{"_id":"themes/hexo-theme-xups/.git/objects/93/e9e7e8a31e68b12a8e365e9103daccffdbc00d","hash":"c800dbff60d1f44d07bddd58f5e261061f387f07","modified":1537797949843},{"_id":"themes/hexo-theme-xups/.git/objects/9c/e2a8dfab9a9e2a880eda51749cb8953116446e","hash":"6ce30925a2bd456b5fb740c738c374700f8cd07e","modified":1537797905688},{"_id":"themes/hexo-theme-xups/.git/objects/a6/80758422e6a2953471ebcaaac963b0dcfbcfd5","hash":"83fd11b54b6b21cfb8495e38f13efe3952db99ba","modified":1537797905688},{"_id":"themes/hexo-theme-xups/.git/objects/aa/8b01ac3bf5db09fe1d1133552b048fa88acfb5","hash":"bd8be3d6f0245b71f6f1e673c065ebef85c0f76e","modified":1537797905688},{"_id":"themes/hexo-theme-xups/.git/objects/df/81035444bf7f5cef48772cc12da454dbbbef8d","hash":"f1398c19f4a1c6314cff6abb46d5ecde40d04f59","modified":1537797949843},{"_id":"themes/hexo-theme-xups/.git/objects/f9/d1ce1d4a85c7c754973be2a634604d757b11da","hash":"6b8222ecb071489091cc56568d664b40de67570d","modified":1537797896311},{"_id":"themes/hexo-theme-xups/.git/objects/fb/04827f891d10bc34a193c8fb3fd91c374bff49","hash":"6dcc926709f0c813ce2d53558d9de1dd5f40f71c","modified":1537797949843},{"_id":"public/categories/qemu/index.html","hash":"9fa43fb48862a8e662fabbf0525129decd0c8905","modified":1558406345924},{"_id":"public/tags/qemu/index.html","hash":"ab6df5a206e4e0db9b39edcf0324a5047937af65","modified":1558406345925},{"_id":"public/2018/09/30/2018/09/0003-qemu_use_9pnet_virtio_fs_to_share_folder/index.html","hash":"466952dcddf328802db545f720a32428ad977722","modified":1558406345925},{"_id":"source/_posts/2018/11/0001-use_glibc_backtrace_to_report_active_stack_frames_userspace.md","hash":"50a51fc1078dc7fbacd5066f98ad31935fac763e","modified":1542444262091},{"_id":"public/archives/2018/11/index.html","hash":"2a8f2afd2e88053ea4d167d48ff68eb8c3f07f80","modified":1558406345924},{"_id":"public/categories/debug/index.html","hash":"6845a5e78b4fb6635e02ca5302a71bd1fccc5933","modified":1558406345925},{"_id":"public/2018/11/17/2018/11/0001-use_glibc_backtrace_to_report_active_stack_frames_userspace/index.html","hash":"3ba7af36427d3eb00011d78d740b7f3b34ad457d","modified":1558406345925},{"_id":"themes/hexo-theme-xups/.git","hash":"2672dbde6a501af62d23e0e1c6a29b01efb311ff","modified":1558096155182}],"Category":[{"name":"linux","_id":"cjmgbtjd60006n8ozqxikt71r"},{"name":"hexo","_id":"cjmgbtjds000dn8oz7g8ard1i"},{"name":"qemu","_id":"cjmot6sib0001jlozbr4xu7wj"},{"name":"debug","_id":"cjol7oudd0001rlozui6z0iqs"}],"Data":[],"Page":[{"title":"关于","date":"2018-08-05T14:10:28.000Z","pageid":"about","_content":"","source":"about/index.md","raw":"---\ntitle: 关于\ndate: 2018-08-05 22:10:28\npageid: about\n\n---\n","updated":"2018-08-05T08:33:44.370Z","path":"about/index.html","comments":1,"layout":"page","_id":"cjmgbtja30000n8ozq3c3rarc","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"留言","date":"2016-02-01T12:29:57.000Z","pageid":"comment","_content":"","source":"comment/index.md","raw":"---\ntitle: 留言\ndate: 2016-02-01 20:29:57\npageid: comment\n---\n","updated":"2018-08-05T08:33:44.370Z","path":"comment/index.html","comments":1,"layout":"page","_id":"cjmgbtja70001n8oza0af1qpt","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"实验室","date":"2016-02-01T12:29:57.000Z","pageid":"lab","projects":{"KernelInKernel":{"title":"KernelInKernel","time":"2018-08-05T00:00:00.000Z","content":{"1":{"name":"A Tiny Kerenel run in Linux Kernel","link":"https://github.com/gatieme/KernelInKernel"}}},"C Complier Tools":{"title":"AderCTools","time":"2018-08-05T00:00:00.000Z","content":{"1":{"name":"A tiny complier tools for C language","link":"https://github.com/gatieme/AderCTools"}}},"Running Linux Kernel":{"title":"RunningInKernel","time":"2018-09-16T00:00:00.000Z","content":{"1":{"name":"Linux debug code for RunningLinuxKernel","link":"https://github.com/gatieme/runninglinuxkernel_4.0"}}}},"_content":"","source":"lab/index.md","raw":"---\ntitle: 实验室\ndate: 2016-02-01 20:29:57\npageid: lab\n\nprojects:\n\n    KernelInKernel:\n        title: KernelInKernel\n        time: 2018-08-05\n        content: \n            1:\n                name: A Tiny Kerenel run in Linux Kernel\n                link: https://github.com/gatieme/KernelInKernel\n    C Complier Tools:\n        title: AderCTools\n        time: 2018-08-05\n        content:\n            1:\n                name: A tiny complier tools for C language\n                link: https://github.com/gatieme/AderCTools\n    Running Linux Kernel:\n        title: RunningInKernel\n        time: 2018-09-16\n        content:\n            1:\n                name: Linux debug code for RunningLinuxKernel\n                link: https://github.com/gatieme/runninglinuxkernel_4.0\n---\n","updated":"2018-09-16T03:59:48.513Z","path":"lab/index.html","comments":1,"layout":"page","_id":"cjmgbtjac0002n8ozbtgoewtj","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"网址导航","date":"2018-09-16T12:29:57.000Z","pageid":"navigation","projects":{"Kernel 综合":{"title":"Kernel 综合","time":"2018-08-05T00:00:00.000Z","content":{"1":{"name":"Kernel","title":"Linux 内核主页","link":"https://www.kernel.org"},"2":{"name":"Linux Kernel Patch Statistic","title":"内核 PATCH 统计","link":"http://www.remword.com/kps_result/index.php"},"3":{"name":"Kernel Newbie","title":"内核新手","link":"https://kernelnewbies.org/"},"4":{"name":"Old Linux","title":"Old Linux 学习","link":"http://www.oldlinux.org/"},"5":{"name":"LWN","title":"Linux Weekly News","link":"https://lwn.net/"}}},"Memory Manager":{"title":"AderCTools","time":"2018-08-05T00:00:00.000Z","content":{"1":{"name":"MM-org","link":"https://linux-mm.org"},"2":{"name":"complier","link":"https://github.com/gatieme/AderCTools"}}},"Running Linux Kernel":{"title":"RunningInKernel","time":"2018-09-16T00:00:00.000Z","content":{"1":{"name":"Linux","link":"https://github.com/gatieme/runninglinuxkernel_4.0"}}}},"_content":"","source":"navigation/index.md","raw":"---\ntitle: 网址导航\ndate: 2018-09-16 20:29:57\npageid: navigation\n\nprojects:\n\n    Kernel 综合:\n        title: Kernel 综合\n        time: 2018-08-05\n        content:\n            1:\n                name: Kernel\n                title: Linux 内核主页\n                link: https://www.kernel.org\n            2:\n                name: Linux Kernel Patch Statistic\n                title: 内核 PATCH 统计\n                link: http://www.remword.com/kps_result/index.php\n            3:\n                name: Kernel Newbie\n                title: 内核新手\n                link: https://kernelnewbies.org/\n            4:\n                name: Old Linux\n                title: Old Linux 学习\n                link: http://www.oldlinux.org/\n            5:\n                name: LWN\n                title: Linux Weekly News\n                link: https://lwn.net/\n\n    Memory Manager:\n        title: AderCTools\n        time: 2018-08-05\n        content:\n            1:\n                name: MM-org\n                link: https://linux-mm.org\n            2:\n                name: complier\n                link: https://github.com/gatieme/AderCTools\n\n    Running Linux Kernel:\n        title: RunningInKernel\n        time: 2018-09-16\n        content:\n            1:\n                name: Linux\n                link: https://github.com/gatieme/runninglinuxkernel_4.0\n---\n","updated":"2018-09-24T10:51:27.241Z","path":"navigation/index.html","comments":1,"layout":"page","_id":"cjmgbtjaf0003n8ozwfxz9irr","content":"","site":{"data":{}},"excerpt":"","more":""}],"Post":[{"title":"Static site generators","date":"2018-08-05T06:37:00.000Z","author":"gatieme","thumbnail":null,"blogexcerpt":"With the CMS of Wordpress and other blog systems, increasingly bloated. The emergence of static blog system to a certain extent, solve this problem, and thus get a lot of personal bloggers of all ages. So, what are static blog program in the end it?","_content":"\n\n| Title | Date | Category | Tags | Slug |\n|:-------:|:-------:|:-------:|:-------:|:-------:|\n| static-site-generators | 2016-06-27 06:31 | Linux | linux, blog, pelican | static-site-generators |\n\nWith the CMS of Wordpress and other blog systems, increasingly bloated. The emergence of static blog system to a certain extent, solve this problem, and thus get a lot of personal bloggers of all ages. So, what are static blog program in the end it?\n\nThese static blog generator are based on Bash, C/C++, C# and Perl, Clojure, Common Lisp, Dropbox and other preparation.\n\nA definitive list of tools for generating static websites.\n\n#1. Table of Contents\n-----------------\n\n* [.NET](##1.1  .NET)\n* [Awk](#1.2  awk)\n* [Bash](#bash)\n* [C++](#c)\n* [C#](#c-sharp)\n* [C and Perl](#c-and-perl)\n* [Clojure](#clojure)\n* [Common Lisp](#common-lisp)\n* [Dropbox](#dropbox)\n* [Elixir](#elixir)\n* [Erlang](#erlang)\n* [Go](#go)\n* [Groovy](#groovy)\n* [Haskell](#haskell)\n* [Java](#java)\n* [Language Agnostic](#language-agnostic)\n* [Lua](#lua)\n* [Nimrod](#nimrod)\n* [Node.js](#nodejs)\n* [OCaml](#ocaml)\n* [PHP](#php)\n* [Python](#python)\n* [Racket](#racket)\n* [Ruby](#ruby)\n* [Scala](#scala)\n* [Scheme](#scheme)\n* [Shell](#shell)\n* [Tcl](#tcl)\n\n##1.1  .NET\n-------\n\n* [Pretzel](https://github.com/Code52/pretzel)\n* [Wyam](http://wyam.io)\n\n##1.2  Awk\n\n* [zodiac](https://github.com/nuex/zodiac)\n\n##1.3  Bash\n\n* [baker](https://github.com/taylorchu/baker/)\n* [bashblog](https://github.com/carlesfe/bashblog)\n* [NanoBlogger](http://nanoblogger.sourceforge.net/)\n* [Pagegen](http://pagegen.phnd.net/)\n* [SKF](http://skf.jeannedhack.org/)\n\n##1.4  C++\n\n* [Leo](http://leohtml.sourceforge.net/)\n\n##1.5  C Sharp\n\n* [Graze](https://github.com/mikoskinen/graze)\n\n##1.6  C and Perl\n\n* [BlazeBlogger](http://blaze.blackened.cz/)\n* [blosxom](http://blosxom.sourceforge.net/documentation/users/configure/static.html)\n* [Bryar](https://metacpan.org/pod/Bryar::Frontend::Static)\n* [Dapper](http://vanilladraft.com/dapper/)\n* [HiD](https://metacpan.org/pod/HiD)\n* [ikiwiki](https://ikiwiki.info/)\n* [Papery](https://metacpan.org/pod/Papery)\n* [Quietly::Confident](http://search.cpan.org/dist/Quietly-Confident/qc.pod)\n* [StaticVolt](https://metacpan.org/pod/StaticVolt)\n* [Statocles](https://metacpan.org/pod/Statocles)\n* [Templer](https://github.com/skx/templer)\n* [Website Meta Language](http://www.thewml.org/)\n* [XDO](http://www.idocs.com/xdo/)\n* [Zucchini](https://metacpan.org/pod/Zucchini)\n\n##1.7  Clojure\n\n* [Cryogen](http://cryogenweb.org/)\n* [incise](http://www.ryanmcg.com/incise/)\n* [misaki](https://github.com/liquidz/misaki)\n* [Static](http://nakkaya.com/static.html)\n\n##1.8  Common Lisp\n\n* [coleslaw](http://www.cliki.net/coleslaw)\n* [regenerate](https://gist.github.com/TeMPOraL/4190622)\n\n##1.9  Dropbox\n\n* [900dpi](http://900dpi.com/)\n* [Blogmark](https://blogmark.me/)\n* [Brace](http://brace.io/)\n* [Calepin](http://calepin.co/)\n* [Chili](http://chilipy.com/)\n* [Cloud Cannon](http://cloudcannon.com/)\n* [Drapache](https://github.com/louissobel/Drapache)\n* [DropPages](http://droppages.com/)\n* [KISSr](http://www.kissr.com/)\n* [Pancake.io](https://www.pancake.io/)\n* [Scriptogr.am](http://scriptogr.am/)\n* [Site44](http://www.site44.com/)\n* [Sitebox.io](http://www.sitebox.io/)\n* [Telegram](https://telegr.am/)\n* [Yoozon](https://yoozon.com/)\n\n##1.10 Elixir\n\n* [Obelisk](https://github.com/BennyHallett/obelisk)\n\n##1.11 Erlang\n\n* [LambdaPad](https://github.com/gar1t/lambdapad)\n\n##1.12 Go\n\n* [gor](https://github.com/wendal/gor)\n* [gostatic](https://github.com/piranha/gostatic)\n* [Hastie](https://github.com/mkaz/hastie)\n* [Hugo](http://hugo.spf13.com/)\n* [jkl](https://github.com/drone/jkl)\n* [kkr](https://github.com/dchest/kkr)\n\n##1.13  Groovy\n\n* [Grain](http://sysgears.com/grain/)\n* [Rizzo](https://github.com/fifthposition/rizzo/)\n\n##1.14  Haskell\n\n* [Hakyll](http://jaspervdj.be/hakyll/)\n* [yst](https://github.com/jgm/yst)\n\n##1.15  Java\n\n* [FMPP](http://fmpp.sourceforge.net/)\n* [JBake](http://jbake.org/)\n* [StaGen](https://github.com/wiztools/stagen)\n\n##1.16  Language Agnostic\n\n* [Hammer](http://hammerformac.com/)\n* [LiveReload](http://livereload.com/)\n* [Mixture](http://mixture.io/)\n* [Site builder console](http://sitebuilder.codeplex.com/)\n* [StaticMate](https://staticmate.com/)\n* [vimwiki](https://github.com/vim-scripts/vimwiki)\n\n##1.17  Lua\n\n* [Luapress](https://github.com/Fizzadar/Luapress)\n\n##1.18  Nimrod\n\n* [ipsum genera](https://github.com/dom96/ipsumgenera)\n\n##1.19  Node.js\n\n* [antwar](https://github.com/antwarjs/antwar)\n* [Apto](https://github.com/modparadigm/apto)\n* [Assemble](http://assemble.io)\n* [Automaton](http://indigounited.com/automaton/)\n* [BAM](https://npmjs.org/package/bam)\n* [blacksmith](https://github.com/flatiron/blacksmith/)\n* [Blode](https://github.com/stackoverflow/blode)\n* [bread](https://github.com/pvorb/node-bread)\n* [Broccoli Taco](http://broccoli-taco.com/)\n* [Brunch](http://brunch.io/)\n* [Cabin](http://www.cabinjs.com/)\n* [CMS.js](https://github.com/cdmedia/cms.js)\n* [Codex](https://github.com/logicalparadox/codex)\n* [Conf-Boilerplate](https://github.com/braziljs/conf-boilerplate) (For Conference and Events)\n* [Derby](http://derbyjs.com/)\n* [DocPad](https://github.com/bevry/docpad)\n* [Easystatic](https://github.com/easystatic/easystatic)\n* [Enfield](https://github.com/fortes/enfield)\n* [Equiprose](https://github.com/thibaultCha/Equiprose)\n* [Gabby](https://github.com/alexmingoia/gabby)\n* [generator-gulp-webapp](https://github.com/yeoman/generator-gulp-webapp)\n* [Genesis](http://forge.synthmedia.co.uk/genesis/)\n* [ghost-render](https://github.com/mixu/ghost-render)\n* [Go-Static!](https://github.com/colynb/generator-go-static)\n* [Grunt](http://gruntjs.com/)\n* [GruntStart](http://tsvensen.github.io/GruntStart/)\n* [grunt-bear](https://github.com/tvooo/grunt-bear)\n* [Grunt-Carpenter](https://github.com/TxSSC/grunt-carpenter)\n* [grunt-html-builder](https://github.com/aaaristo/grunt-html-builder)\n* [grunt-stencil](https://github.com/cambridge-healthcare/grunt-stencil)\n* [gulp-ssg](https://github.com/paulwib/gulp-ssg)\n* [Harmonic](https://github.com/es6rocks/harmonic)\n* [Harp](http://harpjs.com)\n* [Heckle](http://macwright.org/heckle/)\n* [Hexo](https://github.com/tommy351/hexo)\n* [Hoodie](http://hood.ie/)\n* [jen](https://github.com/rfunduk/jen)\n* [Jekyde](http://zohooo.github.io/jekyde/)\n* [Jott](https://github.com/jonsherrard/jott)\n* [Kel](https://github.com/koostudios/kel)\n* [Kerouac](https://github.com/jaredhanson/kerouac)\n* [Lineman](https://github.com/testdouble/lineman)\n* [Lingon](https://github.com/jpettersson/lingon)\n* [Lumbar](https://github.com/walmartlabs/lumbar)\n* [markdown-styles](https://github.com/mixu/markdown-styles)\n* [markx](https://github.com/jgallen23/markx)\n* [Metalsmith](http://www.metalsmith.io/)\n* [Mimosa](http://mimosajs.com/)\n* [Modjs](http://modulejs.github.io/modjs/)\n* [Nirman](https://github.com/anupshinde/nirman)\n* [Nico](http://lab.lepture.com/nico/)\n* [node-blog](https://github.com/creationix/node-blog)\n* [node-jekyll](https://github.com/wangbus/node-jekyll)\n* [noflo-jekyll](https://github.com/the-grid/noflo-jekyll)\n* [Nog](https://github.com/c9/nog)\n* [pagen](https://github.com/jawerty/pagen)\n* [Petrify](https://github.com/caolan/petrify)\n* [Phenomic](https://phenomic.io/)\n* [Poet](http://jsantell.github.io/poet/)\n* [Pop](https://github.com/alexyoung/pop)\n* [Propeller](https://github.com/thegreatsunra/propeller)\n* [Punch](https://github.com/laktek/punch)\n* [Qabex](https://github.com/shanewholloway/node-qssg)\n* [Quick Start Guide Template](https://github.com/tjvantoll/quick-start-template)\n* [Quill](https://npmjs.org/package/quill)\n* [React Static Site](https://github.com/BradDenver/react-static-site)\n* [React + Webpack](http://jxnblk.com/writing/posts/static-site-generation-with-react-and-webpack/)\n* [romulus](https://github.com/felixge/node-romulus)\n* [roots](http://roots.cx/)\n* [Rufio](https://github.com/wesleytodd/rufio)\n* [Surge](https://surge.sh/)\n* [Scotch](https://github.com/techwraith/scotch)\n* [Situs](https://github.com/fians/situs)\n* [squareboy](https://github.com/harsha-mudi/squareboy)\n* [Static Site Starter Kit](https://github.com/kriasoft/static-site-starter)\n* [Statix](https://github.com/ff0000/statix)\n* [SuSi](https://github.com/AVGP/susi)\n* [Szyslak](https://github.com/ido50/Szyslak)\n* [Techy](http://krasimir.github.io/techy/)\n* [thumbsup](https://github.com/rprieto/thumbsup)\n* [volo](http://volojs.org/)\n* [wainwright](https://github.com/wprl/wainwright)\n* [Wanna](https://github.com/shaoshuai0102/wanna)\n* [Wheat](https://github.com/creationix/wheat)\n* [Wikismith](http://www.wikismith.com/)\n* [Wintersmith](http://jnordberg.github.io/wintersmith/)\n* [Woods](https://github.com/studiomoniker/woods)\n* [yassg](https://npmjs.org/package/yassg)\n* [Yeoman](http://yeoman.io/)\n\n##1.20  OCaml\n\n* [Stog](http://zoggy.github.io/stog/)\n* [Ultra Simple Site Maker](http://loup-vaillant.fr/projects/ussm/)\n\n##1.21  PHP\n\n* [Animal](https://github.com/billpatrianakos/animal-f)\n* [BloggerCMS](https://github.com/sarfraznawaz2005/BloggerCMS)\n* [Carew](http://carew.github.io/)\n* [Couscous](http://couscous.io/)\n* [Dropplets](https://github.com/Circa75/dropplets)\n* [Fansoro](http://fansoro.org/)\n* [Grav](http://getgrav.org/)\n* [Gumdrop](http://gumdropapp.com/)\n* [Phrozn](http://www.phrozn.info/en/)\n* [PieCrust](http://bolt80.com/piecrust/)\n* [Purepress](https://github.com/megakote/purepress)\n* [Sculpin](http://sculpin.io/)\n* [Second Crack](https://github.com/marcoarment/secondcrack)\n* [SG](https://github.com/maxailloud/SG)\n* [Site-builder](https://github.com/inanimatt/site-builder)\n* [SiteMaker](https://github.com/yqtaku/site-maker)\n* [Snowshoe](https://github.com/edvanbeinum/snowshoe)\n* [Spress](https://github.com/yosymfony/Spress)\n* [Stacey](https://github.com/kolber/stacey)\n* [Statamic](http://www.statamic.com/)\n* [Tempo](https://github.com/catnapgames/Tempo)\n* [Vaseman](http://about.asika.tw/vaseman/)\n* [Yellow](http://github.com/datenstrom/yellow)\n* [Wadoo](https://github.com/alpacaaa/wadoo)\n\n##1.22  Python\n\n* [Acrylamid](https://github.com/posativ/acrylamid)\n* [Blatter](https://bitbucket.org/jek/blatter/)\n* [Blogofile](http://www.blogofile.com/)\n* [Blogen](https://github.com/ipconfiger/blogen)\n* [buster](https://github.com/axitkhurana/buster)\n* [Cactus](http://cactusformac.com/)\n* [Chisel](https://github.com/dz/chisel)\n* [Cipherpress](https://github.com/lejonet/Cipherpress)\n* [Composer](https://github.com/shazow/composer)\n* [cyrax](https://pypi.python.org/pypi/cyrax)\n* [django-medusa](https://github.com/mtigas/django-medusa/)\n* [djangothis](https://github.com/amitu/djangothis/)\n* [drupan](https://github.com/fallenhitokiri/drupan)\n* [Elyse](https://github.com/FSX/elyse)\n* [Engineer](https://github.com/tylerbutler/engineer)\n* [Firedrop2](http://www.voidspace.org.uk/python/firedrop2/)\n* [fjord](http://dkuntz2.github.io/fjord/)\n* [Floyd](https://github.com/nikcub/floyd)\n* [Fragments](http://glyphobet.github.io/fragments/)\n* [Frozen-Flask](http://pythonhosted.org/Frozen-Flask/)\n* [Glynn](https://github.com/teiko/glynn)\n* [growl](https://github.com/xfire/growl/)\n* [Halwa](https://github.com/mhlakhani/halwa)\n* [handcrank](https://pypi.python.org/pypi/handcrank)\n* [Hyde](https://github.com/lakshmivyas/hyde)\n* [Igor](https://github.com/aconbere/igor)\n* [Jinja](http://jinja.pocoo.org/)\n* [jinjet](https://github.com/jokull/jinjet)\n* [Lektor](https://www.getlektor.com/)\n* [Letterpress](https://github.com/an0/Letterpress)\n* [Lightning](https://github.com/borismus/lightning)\n* [lilac](https://lilac.readthedocs.org/en/latest/index.html)\n* [Logya](https://github.com/yaph/logya)\n* [Mako](http://www.makotemplates.org/)\n* [Markbox](https://github.com/myfreeweb/markbox)\n* [Markdoc](http://markdoc.org/)\n* [MkDocs](http://www.mkdocs.org/)\n* [mynt](http://mynt.mirroredwhite.com/)\n* [Nib](https://github.com/jreese/nib)\n* [Nikola](http://nikola.ralsina.com.ar/)\n* [Obraz](http://obraz.pirx.ru/)\n* [Pelican](https://github.com/getpelican/pelican/)\n* [PILCROW](http://inky.github.io/pilcrow/)\n* [Poole](https://bitbucket.org/obensonne/poole)\n* [PyBlosxom](http://pyblosxom.github.io/)\n* [PyKwiki](http://pykwiki.nullism.com/)\n* [Pyll](https://github.com/arthurk/pyll)\n* [rstblog](https://github.com/mitsuhiko/rstblog)\n* [Serious Chicken](http://rtorr.github.io/serious-chicken/)\n* [sg](https://github.com/venthur/sg)\n* [Socrates](http://honza.ca/socrates/)\n* [Speech Hub](https://github.com/alvesjnr/speechhub)\n* [Sphinx](http://sphinx-doc.org/)\n* [Squirrel](https://github.com/nickpetty/squirrel)\n* [Stadø](http://stadoproject.org/)\n* [staticjinja](https://github.com/Ceasar/staticjinja)\n* [StrangeCase](https://github.com/colinta/StrangeCase)\n* [Syte](https://github.com/rigoneri/syte)\n* [Tags](http://tags.brace.io/)\n* [tahchee](https://github.com/sebastien/tahchee)\n* [Tinkerer](http://tinkerer.me/)\n* [Voldemort](https://github.com/semk/voldemort)\n* [Volt](https://github.com/bow/volt/)\n* [Webber](http://gitorious.org/webber)\n* [Wok](https://github.com/mythmon/wok)\n\n##1.23  Racket\n* [Frog](https://github.com/greghendershott/frog)\n\n##1.24  Ruby\n\n* [Ace](https://github.com/botanicus/ace)\n* [Bonsai](http://tinytree.info/)\n* [Brochure](https://github.com/sstephenson/brochure)\n* [deplot](https://github.com/cdn64/deplot)\n* [DynamicMatic](https://github.com/nex3/dynamicmatic)\n* [Fairytale](https://github.com/46Bit/fairytale)\n* [Frank](https://github.com/blahed/frank)\n* [gollum-site](https://github.com/dreverri/gollum-site)\n* [Gravity](https://github.com/owainlewis/gravity)\n* [High Voltage](https://github.com/thoughtbot/high_voltage)\n* [hobix](http://hobix.github.io/hobix/)\n* [Hobix](https://github.com/hobix/hobix/)\n* [Jekyll](https://github.com/mojombo/jekyll)\n* [korma](https://github.com/sandal/korma)\n* [Laze](http://avdgaag.github.io/laze/)\n* [Machined](https://github.com/petebrowne/machined)\n* [Magneto](https://github.com/donmelton/magneto)\n* [Massimo](https://github.com/petebrowne/massimo)\n* [Middleman](http://middlemanapp.com/)\n* [Moka](https://github.com/lucaong/Moka)\n* [Nanoc](http://nanoc.ws/)\n* [NestaCMS](http://nestacms.com/)\n* [Octopress](http://octopress.org/)\n* [Pith](https://github.com/mdub/pith)\n* [Rakeweb](http://rubyforge.org/projects/rakeweb/)\n* [Rassmalog](http://snk.tuxfamily.org/lib/rassmalog/doc/guide.html)\n* [Rog](http://rog.rubyforge.org/)\n* [rote](http://rote.rubyforge.org/)\n* [RubyFrontier](http://www.apeth.com/RubyFrontierDocs/default.html)\n* [Ruhoh](http://ruhoh.com/)\n* [Serif](https://github.com/aprescott/serif)\n* [Serve](http://get-serve.com/)\n* [Shelob](https://github.com/rubyworks/shelob)\n* [stasis](http://stasis.me/)\n* [StaticMatic 2](https://github.com/mindeavor/staticmatic2)\n* [StaticMatic](http://rubyforge.org/projects/staticmatic/)\n* [StaticWeb](http://staticweb.rubyforge.org/)\n* [Striker](https://github.com/swaroopsm/striker)\n* [toto](https://github.com/cloudhead/toto)\n* [Webby](http://webby.rubyforge.org/)\n* [webgen](http://webgen.rubyforge.org/)\n* [Yurt CMS](http://yurtcms.roberthahn.ca/)\n* [zenweb](http://www.zenspider.com/projects/zenweb.html)\n* [{ :awestruct }](http://awestruct.org/)\n\n##1.25  Scala\n* [monkeyman](https://github.com/wspringer/monkeyman)\n* [Scalate](https://github.com/scalate/scalate)\n\n##1.26  Scheme\n*  [Hyde](http://wiki.call-cc.org/eggref/4/hyde)\n\n##1.27  Shell\n\n* [Exposé](https://github.com/Jack000/Expose)\n* [fugitive](https://gitorious.org/fugitive)\n* [simple-static](https://github.com/wlangstroth/simple-static)\n* [sw](https://github.com/jroimartin/sw)\n* [Utterson](https://github.com/stef/utterson)\n* [Vee](http://www.0x743.com/vee/)\n* [werc](http://werc.cat-v.org/)\n\n##1.28  Tcl\n\n* [Tclssg](https://github.com/dbohdan/tclssg)\n\n\n#2  For Help\n\n| WebSite | Description |\n|:-------:|:-------:|\n| [Static Site Generators](https://staticsitegenerators.net) | Static Site Generators<br><br>The definitive listing of Static Site Generators — all 437 of them! |\n| [Disqus](https://disqus.com/admin/signup) | The #1 way to build your audience<br><br>Disqus offers the best add-on tools for site owners to power discussions, increase engagement, and earn revenue.<br> Please don't forget your Shortname |\n| [Google Analytics](http://www.google.com/analytics) | Get stronger results across all your sites, apps and offline channels. Google’s analytics solutions help you turn customer insights into real gains. |\n| [Google Webmasters](http://www.google.com/webmasters) | Track your site's search performance with Google Search Console and browse around for more webmaster resources. |\n| [Godaddy](https://www.godaddy.com/) | Get a free domain with a website from GoDaddy. |\n| [Dnspod](https://www.dnspod.cn/) | DNS resolution service, add a new domain name, and apply a Github Pages A record points to the ip: 207.97.227.245 |\n\n#3\tAbout This Site\n-------\n\nOur Site is based on Pelican(Python)\n","source":"_posts/2018/08/0001_static-site-generators.md","raw":"---\ntitle: Static site generators\ndate: 2018-08-05 14:37\nauthor: gatieme\ntags: linux\ncategories:\n        - linux\nthumbnail: \nblogexcerpt: With the CMS of Wordpress and other blog systems, increasingly bloated. The emergence of static blog system to a certain extent, solve this problem, and thus get a lot of personal bloggers of all ages. So, what are static blog program in the end it?\n\n---\n\n\n| Title | Date | Category | Tags | Slug |\n|:-------:|:-------:|:-------:|:-------:|:-------:|\n| static-site-generators | 2016-06-27 06:31 | Linux | linux, blog, pelican | static-site-generators |\n\nWith the CMS of Wordpress and other blog systems, increasingly bloated. The emergence of static blog system to a certain extent, solve this problem, and thus get a lot of personal bloggers of all ages. So, what are static blog program in the end it?\n\nThese static blog generator are based on Bash, C/C++, C# and Perl, Clojure, Common Lisp, Dropbox and other preparation.\n\nA definitive list of tools for generating static websites.\n\n#1. Table of Contents\n-----------------\n\n* [.NET](##1.1  .NET)\n* [Awk](#1.2  awk)\n* [Bash](#bash)\n* [C++](#c)\n* [C#](#c-sharp)\n* [C and Perl](#c-and-perl)\n* [Clojure](#clojure)\n* [Common Lisp](#common-lisp)\n* [Dropbox](#dropbox)\n* [Elixir](#elixir)\n* [Erlang](#erlang)\n* [Go](#go)\n* [Groovy](#groovy)\n* [Haskell](#haskell)\n* [Java](#java)\n* [Language Agnostic](#language-agnostic)\n* [Lua](#lua)\n* [Nimrod](#nimrod)\n* [Node.js](#nodejs)\n* [OCaml](#ocaml)\n* [PHP](#php)\n* [Python](#python)\n* [Racket](#racket)\n* [Ruby](#ruby)\n* [Scala](#scala)\n* [Scheme](#scheme)\n* [Shell](#shell)\n* [Tcl](#tcl)\n\n##1.1  .NET\n-------\n\n* [Pretzel](https://github.com/Code52/pretzel)\n* [Wyam](http://wyam.io)\n\n##1.2  Awk\n\n* [zodiac](https://github.com/nuex/zodiac)\n\n##1.3  Bash\n\n* [baker](https://github.com/taylorchu/baker/)\n* [bashblog](https://github.com/carlesfe/bashblog)\n* [NanoBlogger](http://nanoblogger.sourceforge.net/)\n* [Pagegen](http://pagegen.phnd.net/)\n* [SKF](http://skf.jeannedhack.org/)\n\n##1.4  C++\n\n* [Leo](http://leohtml.sourceforge.net/)\n\n##1.5  C Sharp\n\n* [Graze](https://github.com/mikoskinen/graze)\n\n##1.6  C and Perl\n\n* [BlazeBlogger](http://blaze.blackened.cz/)\n* [blosxom](http://blosxom.sourceforge.net/documentation/users/configure/static.html)\n* [Bryar](https://metacpan.org/pod/Bryar::Frontend::Static)\n* [Dapper](http://vanilladraft.com/dapper/)\n* [HiD](https://metacpan.org/pod/HiD)\n* [ikiwiki](https://ikiwiki.info/)\n* [Papery](https://metacpan.org/pod/Papery)\n* [Quietly::Confident](http://search.cpan.org/dist/Quietly-Confident/qc.pod)\n* [StaticVolt](https://metacpan.org/pod/StaticVolt)\n* [Statocles](https://metacpan.org/pod/Statocles)\n* [Templer](https://github.com/skx/templer)\n* [Website Meta Language](http://www.thewml.org/)\n* [XDO](http://www.idocs.com/xdo/)\n* [Zucchini](https://metacpan.org/pod/Zucchini)\n\n##1.7  Clojure\n\n* [Cryogen](http://cryogenweb.org/)\n* [incise](http://www.ryanmcg.com/incise/)\n* [misaki](https://github.com/liquidz/misaki)\n* [Static](http://nakkaya.com/static.html)\n\n##1.8  Common Lisp\n\n* [coleslaw](http://www.cliki.net/coleslaw)\n* [regenerate](https://gist.github.com/TeMPOraL/4190622)\n\n##1.9  Dropbox\n\n* [900dpi](http://900dpi.com/)\n* [Blogmark](https://blogmark.me/)\n* [Brace](http://brace.io/)\n* [Calepin](http://calepin.co/)\n* [Chili](http://chilipy.com/)\n* [Cloud Cannon](http://cloudcannon.com/)\n* [Drapache](https://github.com/louissobel/Drapache)\n* [DropPages](http://droppages.com/)\n* [KISSr](http://www.kissr.com/)\n* [Pancake.io](https://www.pancake.io/)\n* [Scriptogr.am](http://scriptogr.am/)\n* [Site44](http://www.site44.com/)\n* [Sitebox.io](http://www.sitebox.io/)\n* [Telegram](https://telegr.am/)\n* [Yoozon](https://yoozon.com/)\n\n##1.10 Elixir\n\n* [Obelisk](https://github.com/BennyHallett/obelisk)\n\n##1.11 Erlang\n\n* [LambdaPad](https://github.com/gar1t/lambdapad)\n\n##1.12 Go\n\n* [gor](https://github.com/wendal/gor)\n* [gostatic](https://github.com/piranha/gostatic)\n* [Hastie](https://github.com/mkaz/hastie)\n* [Hugo](http://hugo.spf13.com/)\n* [jkl](https://github.com/drone/jkl)\n* [kkr](https://github.com/dchest/kkr)\n\n##1.13  Groovy\n\n* [Grain](http://sysgears.com/grain/)\n* [Rizzo](https://github.com/fifthposition/rizzo/)\n\n##1.14  Haskell\n\n* [Hakyll](http://jaspervdj.be/hakyll/)\n* [yst](https://github.com/jgm/yst)\n\n##1.15  Java\n\n* [FMPP](http://fmpp.sourceforge.net/)\n* [JBake](http://jbake.org/)\n* [StaGen](https://github.com/wiztools/stagen)\n\n##1.16  Language Agnostic\n\n* [Hammer](http://hammerformac.com/)\n* [LiveReload](http://livereload.com/)\n* [Mixture](http://mixture.io/)\n* [Site builder console](http://sitebuilder.codeplex.com/)\n* [StaticMate](https://staticmate.com/)\n* [vimwiki](https://github.com/vim-scripts/vimwiki)\n\n##1.17  Lua\n\n* [Luapress](https://github.com/Fizzadar/Luapress)\n\n##1.18  Nimrod\n\n* [ipsum genera](https://github.com/dom96/ipsumgenera)\n\n##1.19  Node.js\n\n* [antwar](https://github.com/antwarjs/antwar)\n* [Apto](https://github.com/modparadigm/apto)\n* [Assemble](http://assemble.io)\n* [Automaton](http://indigounited.com/automaton/)\n* [BAM](https://npmjs.org/package/bam)\n* [blacksmith](https://github.com/flatiron/blacksmith/)\n* [Blode](https://github.com/stackoverflow/blode)\n* [bread](https://github.com/pvorb/node-bread)\n* [Broccoli Taco](http://broccoli-taco.com/)\n* [Brunch](http://brunch.io/)\n* [Cabin](http://www.cabinjs.com/)\n* [CMS.js](https://github.com/cdmedia/cms.js)\n* [Codex](https://github.com/logicalparadox/codex)\n* [Conf-Boilerplate](https://github.com/braziljs/conf-boilerplate) (For Conference and Events)\n* [Derby](http://derbyjs.com/)\n* [DocPad](https://github.com/bevry/docpad)\n* [Easystatic](https://github.com/easystatic/easystatic)\n* [Enfield](https://github.com/fortes/enfield)\n* [Equiprose](https://github.com/thibaultCha/Equiprose)\n* [Gabby](https://github.com/alexmingoia/gabby)\n* [generator-gulp-webapp](https://github.com/yeoman/generator-gulp-webapp)\n* [Genesis](http://forge.synthmedia.co.uk/genesis/)\n* [ghost-render](https://github.com/mixu/ghost-render)\n* [Go-Static!](https://github.com/colynb/generator-go-static)\n* [Grunt](http://gruntjs.com/)\n* [GruntStart](http://tsvensen.github.io/GruntStart/)\n* [grunt-bear](https://github.com/tvooo/grunt-bear)\n* [Grunt-Carpenter](https://github.com/TxSSC/grunt-carpenter)\n* [grunt-html-builder](https://github.com/aaaristo/grunt-html-builder)\n* [grunt-stencil](https://github.com/cambridge-healthcare/grunt-stencil)\n* [gulp-ssg](https://github.com/paulwib/gulp-ssg)\n* [Harmonic](https://github.com/es6rocks/harmonic)\n* [Harp](http://harpjs.com)\n* [Heckle](http://macwright.org/heckle/)\n* [Hexo](https://github.com/tommy351/hexo)\n* [Hoodie](http://hood.ie/)\n* [jen](https://github.com/rfunduk/jen)\n* [Jekyde](http://zohooo.github.io/jekyde/)\n* [Jott](https://github.com/jonsherrard/jott)\n* [Kel](https://github.com/koostudios/kel)\n* [Kerouac](https://github.com/jaredhanson/kerouac)\n* [Lineman](https://github.com/testdouble/lineman)\n* [Lingon](https://github.com/jpettersson/lingon)\n* [Lumbar](https://github.com/walmartlabs/lumbar)\n* [markdown-styles](https://github.com/mixu/markdown-styles)\n* [markx](https://github.com/jgallen23/markx)\n* [Metalsmith](http://www.metalsmith.io/)\n* [Mimosa](http://mimosajs.com/)\n* [Modjs](http://modulejs.github.io/modjs/)\n* [Nirman](https://github.com/anupshinde/nirman)\n* [Nico](http://lab.lepture.com/nico/)\n* [node-blog](https://github.com/creationix/node-blog)\n* [node-jekyll](https://github.com/wangbus/node-jekyll)\n* [noflo-jekyll](https://github.com/the-grid/noflo-jekyll)\n* [Nog](https://github.com/c9/nog)\n* [pagen](https://github.com/jawerty/pagen)\n* [Petrify](https://github.com/caolan/petrify)\n* [Phenomic](https://phenomic.io/)\n* [Poet](http://jsantell.github.io/poet/)\n* [Pop](https://github.com/alexyoung/pop)\n* [Propeller](https://github.com/thegreatsunra/propeller)\n* [Punch](https://github.com/laktek/punch)\n* [Qabex](https://github.com/shanewholloway/node-qssg)\n* [Quick Start Guide Template](https://github.com/tjvantoll/quick-start-template)\n* [Quill](https://npmjs.org/package/quill)\n* [React Static Site](https://github.com/BradDenver/react-static-site)\n* [React + Webpack](http://jxnblk.com/writing/posts/static-site-generation-with-react-and-webpack/)\n* [romulus](https://github.com/felixge/node-romulus)\n* [roots](http://roots.cx/)\n* [Rufio](https://github.com/wesleytodd/rufio)\n* [Surge](https://surge.sh/)\n* [Scotch](https://github.com/techwraith/scotch)\n* [Situs](https://github.com/fians/situs)\n* [squareboy](https://github.com/harsha-mudi/squareboy)\n* [Static Site Starter Kit](https://github.com/kriasoft/static-site-starter)\n* [Statix](https://github.com/ff0000/statix)\n* [SuSi](https://github.com/AVGP/susi)\n* [Szyslak](https://github.com/ido50/Szyslak)\n* [Techy](http://krasimir.github.io/techy/)\n* [thumbsup](https://github.com/rprieto/thumbsup)\n* [volo](http://volojs.org/)\n* [wainwright](https://github.com/wprl/wainwright)\n* [Wanna](https://github.com/shaoshuai0102/wanna)\n* [Wheat](https://github.com/creationix/wheat)\n* [Wikismith](http://www.wikismith.com/)\n* [Wintersmith](http://jnordberg.github.io/wintersmith/)\n* [Woods](https://github.com/studiomoniker/woods)\n* [yassg](https://npmjs.org/package/yassg)\n* [Yeoman](http://yeoman.io/)\n\n##1.20  OCaml\n\n* [Stog](http://zoggy.github.io/stog/)\n* [Ultra Simple Site Maker](http://loup-vaillant.fr/projects/ussm/)\n\n##1.21  PHP\n\n* [Animal](https://github.com/billpatrianakos/animal-f)\n* [BloggerCMS](https://github.com/sarfraznawaz2005/BloggerCMS)\n* [Carew](http://carew.github.io/)\n* [Couscous](http://couscous.io/)\n* [Dropplets](https://github.com/Circa75/dropplets)\n* [Fansoro](http://fansoro.org/)\n* [Grav](http://getgrav.org/)\n* [Gumdrop](http://gumdropapp.com/)\n* [Phrozn](http://www.phrozn.info/en/)\n* [PieCrust](http://bolt80.com/piecrust/)\n* [Purepress](https://github.com/megakote/purepress)\n* [Sculpin](http://sculpin.io/)\n* [Second Crack](https://github.com/marcoarment/secondcrack)\n* [SG](https://github.com/maxailloud/SG)\n* [Site-builder](https://github.com/inanimatt/site-builder)\n* [SiteMaker](https://github.com/yqtaku/site-maker)\n* [Snowshoe](https://github.com/edvanbeinum/snowshoe)\n* [Spress](https://github.com/yosymfony/Spress)\n* [Stacey](https://github.com/kolber/stacey)\n* [Statamic](http://www.statamic.com/)\n* [Tempo](https://github.com/catnapgames/Tempo)\n* [Vaseman](http://about.asika.tw/vaseman/)\n* [Yellow](http://github.com/datenstrom/yellow)\n* [Wadoo](https://github.com/alpacaaa/wadoo)\n\n##1.22  Python\n\n* [Acrylamid](https://github.com/posativ/acrylamid)\n* [Blatter](https://bitbucket.org/jek/blatter/)\n* [Blogofile](http://www.blogofile.com/)\n* [Blogen](https://github.com/ipconfiger/blogen)\n* [buster](https://github.com/axitkhurana/buster)\n* [Cactus](http://cactusformac.com/)\n* [Chisel](https://github.com/dz/chisel)\n* [Cipherpress](https://github.com/lejonet/Cipherpress)\n* [Composer](https://github.com/shazow/composer)\n* [cyrax](https://pypi.python.org/pypi/cyrax)\n* [django-medusa](https://github.com/mtigas/django-medusa/)\n* [djangothis](https://github.com/amitu/djangothis/)\n* [drupan](https://github.com/fallenhitokiri/drupan)\n* [Elyse](https://github.com/FSX/elyse)\n* [Engineer](https://github.com/tylerbutler/engineer)\n* [Firedrop2](http://www.voidspace.org.uk/python/firedrop2/)\n* [fjord](http://dkuntz2.github.io/fjord/)\n* [Floyd](https://github.com/nikcub/floyd)\n* [Fragments](http://glyphobet.github.io/fragments/)\n* [Frozen-Flask](http://pythonhosted.org/Frozen-Flask/)\n* [Glynn](https://github.com/teiko/glynn)\n* [growl](https://github.com/xfire/growl/)\n* [Halwa](https://github.com/mhlakhani/halwa)\n* [handcrank](https://pypi.python.org/pypi/handcrank)\n* [Hyde](https://github.com/lakshmivyas/hyde)\n* [Igor](https://github.com/aconbere/igor)\n* [Jinja](http://jinja.pocoo.org/)\n* [jinjet](https://github.com/jokull/jinjet)\n* [Lektor](https://www.getlektor.com/)\n* [Letterpress](https://github.com/an0/Letterpress)\n* [Lightning](https://github.com/borismus/lightning)\n* [lilac](https://lilac.readthedocs.org/en/latest/index.html)\n* [Logya](https://github.com/yaph/logya)\n* [Mako](http://www.makotemplates.org/)\n* [Markbox](https://github.com/myfreeweb/markbox)\n* [Markdoc](http://markdoc.org/)\n* [MkDocs](http://www.mkdocs.org/)\n* [mynt](http://mynt.mirroredwhite.com/)\n* [Nib](https://github.com/jreese/nib)\n* [Nikola](http://nikola.ralsina.com.ar/)\n* [Obraz](http://obraz.pirx.ru/)\n* [Pelican](https://github.com/getpelican/pelican/)\n* [PILCROW](http://inky.github.io/pilcrow/)\n* [Poole](https://bitbucket.org/obensonne/poole)\n* [PyBlosxom](http://pyblosxom.github.io/)\n* [PyKwiki](http://pykwiki.nullism.com/)\n* [Pyll](https://github.com/arthurk/pyll)\n* [rstblog](https://github.com/mitsuhiko/rstblog)\n* [Serious Chicken](http://rtorr.github.io/serious-chicken/)\n* [sg](https://github.com/venthur/sg)\n* [Socrates](http://honza.ca/socrates/)\n* [Speech Hub](https://github.com/alvesjnr/speechhub)\n* [Sphinx](http://sphinx-doc.org/)\n* [Squirrel](https://github.com/nickpetty/squirrel)\n* [Stadø](http://stadoproject.org/)\n* [staticjinja](https://github.com/Ceasar/staticjinja)\n* [StrangeCase](https://github.com/colinta/StrangeCase)\n* [Syte](https://github.com/rigoneri/syte)\n* [Tags](http://tags.brace.io/)\n* [tahchee](https://github.com/sebastien/tahchee)\n* [Tinkerer](http://tinkerer.me/)\n* [Voldemort](https://github.com/semk/voldemort)\n* [Volt](https://github.com/bow/volt/)\n* [Webber](http://gitorious.org/webber)\n* [Wok](https://github.com/mythmon/wok)\n\n##1.23  Racket\n* [Frog](https://github.com/greghendershott/frog)\n\n##1.24  Ruby\n\n* [Ace](https://github.com/botanicus/ace)\n* [Bonsai](http://tinytree.info/)\n* [Brochure](https://github.com/sstephenson/brochure)\n* [deplot](https://github.com/cdn64/deplot)\n* [DynamicMatic](https://github.com/nex3/dynamicmatic)\n* [Fairytale](https://github.com/46Bit/fairytale)\n* [Frank](https://github.com/blahed/frank)\n* [gollum-site](https://github.com/dreverri/gollum-site)\n* [Gravity](https://github.com/owainlewis/gravity)\n* [High Voltage](https://github.com/thoughtbot/high_voltage)\n* [hobix](http://hobix.github.io/hobix/)\n* [Hobix](https://github.com/hobix/hobix/)\n* [Jekyll](https://github.com/mojombo/jekyll)\n* [korma](https://github.com/sandal/korma)\n* [Laze](http://avdgaag.github.io/laze/)\n* [Machined](https://github.com/petebrowne/machined)\n* [Magneto](https://github.com/donmelton/magneto)\n* [Massimo](https://github.com/petebrowne/massimo)\n* [Middleman](http://middlemanapp.com/)\n* [Moka](https://github.com/lucaong/Moka)\n* [Nanoc](http://nanoc.ws/)\n* [NestaCMS](http://nestacms.com/)\n* [Octopress](http://octopress.org/)\n* [Pith](https://github.com/mdub/pith)\n* [Rakeweb](http://rubyforge.org/projects/rakeweb/)\n* [Rassmalog](http://snk.tuxfamily.org/lib/rassmalog/doc/guide.html)\n* [Rog](http://rog.rubyforge.org/)\n* [rote](http://rote.rubyforge.org/)\n* [RubyFrontier](http://www.apeth.com/RubyFrontierDocs/default.html)\n* [Ruhoh](http://ruhoh.com/)\n* [Serif](https://github.com/aprescott/serif)\n* [Serve](http://get-serve.com/)\n* [Shelob](https://github.com/rubyworks/shelob)\n* [stasis](http://stasis.me/)\n* [StaticMatic 2](https://github.com/mindeavor/staticmatic2)\n* [StaticMatic](http://rubyforge.org/projects/staticmatic/)\n* [StaticWeb](http://staticweb.rubyforge.org/)\n* [Striker](https://github.com/swaroopsm/striker)\n* [toto](https://github.com/cloudhead/toto)\n* [Webby](http://webby.rubyforge.org/)\n* [webgen](http://webgen.rubyforge.org/)\n* [Yurt CMS](http://yurtcms.roberthahn.ca/)\n* [zenweb](http://www.zenspider.com/projects/zenweb.html)\n* [{ :awestruct }](http://awestruct.org/)\n\n##1.25  Scala\n* [monkeyman](https://github.com/wspringer/monkeyman)\n* [Scalate](https://github.com/scalate/scalate)\n\n##1.26  Scheme\n*  [Hyde](http://wiki.call-cc.org/eggref/4/hyde)\n\n##1.27  Shell\n\n* [Exposé](https://github.com/Jack000/Expose)\n* [fugitive](https://gitorious.org/fugitive)\n* [simple-static](https://github.com/wlangstroth/simple-static)\n* [sw](https://github.com/jroimartin/sw)\n* [Utterson](https://github.com/stef/utterson)\n* [Vee](http://www.0x743.com/vee/)\n* [werc](http://werc.cat-v.org/)\n\n##1.28  Tcl\n\n* [Tclssg](https://github.com/dbohdan/tclssg)\n\n\n#2  For Help\n\n| WebSite | Description |\n|:-------:|:-------:|\n| [Static Site Generators](https://staticsitegenerators.net) | Static Site Generators<br><br>The definitive listing of Static Site Generators — all 437 of them! |\n| [Disqus](https://disqus.com/admin/signup) | The #1 way to build your audience<br><br>Disqus offers the best add-on tools for site owners to power discussions, increase engagement, and earn revenue.<br> Please don't forget your Shortname |\n| [Google Analytics](http://www.google.com/analytics) | Get stronger results across all your sites, apps and offline channels. Google’s analytics solutions help you turn customer insights into real gains. |\n| [Google Webmasters](http://www.google.com/webmasters) | Track your site's search performance with Google Search Console and browse around for more webmaster resources. |\n| [Godaddy](https://www.godaddy.com/) | Get a free domain with a website from GoDaddy. |\n| [Dnspod](https://www.dnspod.cn/) | DNS resolution service, add a new domain name, and apply a Github Pages A record points to the ip: 207.97.227.245 |\n\n#3\tAbout This Site\n-------\n\nOur Site is based on Pelican(Python)\n","slug":"2018/08/0001_static-site-generators","published":1,"updated":"2018-09-24T11:27:18.701Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjmgbtjct0004n8ozyapswddt","content":"<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">Title</th>\n<th style=\"text-align:center\">Date</th>\n<th style=\"text-align:center\">Category</th>\n<th style=\"text-align:center\">Tags</th>\n<th style=\"text-align:center\">Slug</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">static-site-generators</td>\n<td style=\"text-align:center\">2016-06-27 06:31</td>\n<td style=\"text-align:center\">Linux</td>\n<td style=\"text-align:center\">linux, blog, pelican</td>\n<td style=\"text-align:center\">static-site-generators</td>\n</tr>\n</tbody>\n</table>\n<p>With the CMS of Wordpress and other blog systems, increasingly bloated. The emergence of static blog system to a certain extent, solve this problem, and thus get a lot of personal bloggers of all ages. So, what are static blog program in the end it?</p>\n<p>These static blog generator are based on Bash, C/C++, C# and Perl, Clojure, Common Lisp, Dropbox and other preparation.</p>\n<p>A definitive list of tools for generating static websites.</p>\n<h2 id=\"1-Table-of-Contents\"><a href=\"#1-Table-of-Contents\" class=\"headerlink\" title=\"#1. Table of Contents\"></a>#1. Table of Contents</h2><ul>\n<li><a href=\"##1.1  .NET\">.NET</a></li>\n<li><a href=\"#1.2  awk\">Awk</a></li>\n<li><a href=\"#bash\">Bash</a></li>\n<li><a href=\"#c\">C++</a></li>\n<li><a href=\"#c-sharp\">C#</a></li>\n<li><a href=\"#c-and-perl\">C and Perl</a></li>\n<li><a href=\"#clojure\">Clojure</a></li>\n<li><a href=\"#common-lisp\">Common Lisp</a></li>\n<li><a href=\"#dropbox\">Dropbox</a></li>\n<li><a href=\"#elixir\">Elixir</a></li>\n<li><a href=\"#erlang\">Erlang</a></li>\n<li><a href=\"#go\">Go</a></li>\n<li><a href=\"#groovy\">Groovy</a></li>\n<li><a href=\"#haskell\">Haskell</a></li>\n<li><a href=\"#java\">Java</a></li>\n<li><a href=\"#language-agnostic\">Language Agnostic</a></li>\n<li><a href=\"#lua\">Lua</a></li>\n<li><a href=\"#nimrod\">Nimrod</a></li>\n<li><a href=\"#nodejs\">Node.js</a></li>\n<li><a href=\"#ocaml\">OCaml</a></li>\n<li><a href=\"#php\">PHP</a></li>\n<li><a href=\"#python\">Python</a></li>\n<li><a href=\"#racket\">Racket</a></li>\n<li><a href=\"#ruby\">Ruby</a></li>\n<li><a href=\"#scala\">Scala</a></li>\n<li><a href=\"#scheme\">Scheme</a></li>\n<li><a href=\"#shell\">Shell</a></li>\n<li><a href=\"#tcl\">Tcl</a></li>\n</ul>\n<h2 id=\"1-1-NET\"><a href=\"#1-1-NET\" class=\"headerlink\" title=\"##1.1  .NET\"></a>##1.1  .NET</h2><ul>\n<li><a href=\"https://github.com/Code52/pretzel\" target=\"_blank\" rel=\"noopener\">Pretzel</a></li>\n<li><a href=\"http://wyam.io\" target=\"_blank\" rel=\"noopener\">Wyam</a></li>\n</ul>\n<p>##1.2  Awk</p>\n<ul>\n<li><a href=\"https://github.com/nuex/zodiac\" target=\"_blank\" rel=\"noopener\">zodiac</a></li>\n</ul>\n<p>##1.3  Bash</p>\n<ul>\n<li><a href=\"https://github.com/taylorchu/baker/\" target=\"_blank\" rel=\"noopener\">baker</a></li>\n<li><a href=\"https://github.com/carlesfe/bashblog\" target=\"_blank\" rel=\"noopener\">bashblog</a></li>\n<li><a href=\"http://nanoblogger.sourceforge.net/\" target=\"_blank\" rel=\"noopener\">NanoBlogger</a></li>\n<li><a href=\"http://pagegen.phnd.net/\" target=\"_blank\" rel=\"noopener\">Pagegen</a></li>\n<li><a href=\"http://skf.jeannedhack.org/\" target=\"_blank\" rel=\"noopener\">SKF</a></li>\n</ul>\n<p>##1.4  C++</p>\n<ul>\n<li><a href=\"http://leohtml.sourceforge.net/\" target=\"_blank\" rel=\"noopener\">Leo</a></li>\n</ul>\n<p>##1.5  C Sharp</p>\n<ul>\n<li><a href=\"https://github.com/mikoskinen/graze\" target=\"_blank\" rel=\"noopener\">Graze</a></li>\n</ul>\n<p>##1.6  C and Perl</p>\n<ul>\n<li><a href=\"http://blaze.blackened.cz/\" target=\"_blank\" rel=\"noopener\">BlazeBlogger</a></li>\n<li><a href=\"http://blosxom.sourceforge.net/documentation/users/configure/static.html\" target=\"_blank\" rel=\"noopener\">blosxom</a></li>\n<li><a href=\"https://metacpan.org/pod/Bryar::Frontend::Static\" target=\"_blank\" rel=\"noopener\">Bryar</a></li>\n<li><a href=\"http://vanilladraft.com/dapper/\" target=\"_blank\" rel=\"noopener\">Dapper</a></li>\n<li><a href=\"https://metacpan.org/pod/HiD\" target=\"_blank\" rel=\"noopener\">HiD</a></li>\n<li><a href=\"https://ikiwiki.info/\" target=\"_blank\" rel=\"noopener\">ikiwiki</a></li>\n<li><a href=\"https://metacpan.org/pod/Papery\" target=\"_blank\" rel=\"noopener\">Papery</a></li>\n<li><a href=\"http://search.cpan.org/dist/Quietly-Confident/qc.pod\" target=\"_blank\" rel=\"noopener\">Quietly::Confident</a></li>\n<li><a href=\"https://metacpan.org/pod/StaticVolt\" target=\"_blank\" rel=\"noopener\">StaticVolt</a></li>\n<li><a href=\"https://metacpan.org/pod/Statocles\" target=\"_blank\" rel=\"noopener\">Statocles</a></li>\n<li><a href=\"https://github.com/skx/templer\" target=\"_blank\" rel=\"noopener\">Templer</a></li>\n<li><a href=\"http://www.thewml.org/\" target=\"_blank\" rel=\"noopener\">Website Meta Language</a></li>\n<li><a href=\"http://www.idocs.com/xdo/\" target=\"_blank\" rel=\"noopener\">XDO</a></li>\n<li><a href=\"https://metacpan.org/pod/Zucchini\" target=\"_blank\" rel=\"noopener\">Zucchini</a></li>\n</ul>\n<p>##1.7  Clojure</p>\n<ul>\n<li><a href=\"http://cryogenweb.org/\" target=\"_blank\" rel=\"noopener\">Cryogen</a></li>\n<li><a href=\"http://www.ryanmcg.com/incise/\" target=\"_blank\" rel=\"noopener\">incise</a></li>\n<li><a href=\"https://github.com/liquidz/misaki\" target=\"_blank\" rel=\"noopener\">misaki</a></li>\n<li><a href=\"http://nakkaya.com/static.html\" target=\"_blank\" rel=\"noopener\">Static</a></li>\n</ul>\n<p>##1.8  Common Lisp</p>\n<ul>\n<li><a href=\"http://www.cliki.net/coleslaw\" target=\"_blank\" rel=\"noopener\">coleslaw</a></li>\n<li><a href=\"https://gist.github.com/TeMPOraL/4190622\" target=\"_blank\" rel=\"noopener\">regenerate</a></li>\n</ul>\n<p>##1.9  Dropbox</p>\n<ul>\n<li><a href=\"http://900dpi.com/\" target=\"_blank\" rel=\"noopener\">900dpi</a></li>\n<li><a href=\"https://blogmark.me/\" target=\"_blank\" rel=\"noopener\">Blogmark</a></li>\n<li><a href=\"http://brace.io/\" target=\"_blank\" rel=\"noopener\">Brace</a></li>\n<li><a href=\"http://calepin.co/\" target=\"_blank\" rel=\"noopener\">Calepin</a></li>\n<li><a href=\"http://chilipy.com/\" target=\"_blank\" rel=\"noopener\">Chili</a></li>\n<li><a href=\"http://cloudcannon.com/\" target=\"_blank\" rel=\"noopener\">Cloud Cannon</a></li>\n<li><a href=\"https://github.com/louissobel/Drapache\" target=\"_blank\" rel=\"noopener\">Drapache</a></li>\n<li><a href=\"http://droppages.com/\" target=\"_blank\" rel=\"noopener\">DropPages</a></li>\n<li><a href=\"http://www.kissr.com/\" target=\"_blank\" rel=\"noopener\">KISSr</a></li>\n<li><a href=\"https://www.pancake.io/\" target=\"_blank\" rel=\"noopener\">Pancake.io</a></li>\n<li><a href=\"http://scriptogr.am/\" target=\"_blank\" rel=\"noopener\">Scriptogr.am</a></li>\n<li><a href=\"http://www.site44.com/\" target=\"_blank\" rel=\"noopener\">Site44</a></li>\n<li><a href=\"http://www.sitebox.io/\" target=\"_blank\" rel=\"noopener\">Sitebox.io</a></li>\n<li><a href=\"https://telegr.am/\" target=\"_blank\" rel=\"noopener\">Telegram</a></li>\n<li><a href=\"https://yoozon.com/\" target=\"_blank\" rel=\"noopener\">Yoozon</a></li>\n</ul>\n<p>##1.10 Elixir</p>\n<ul>\n<li><a href=\"https://github.com/BennyHallett/obelisk\" target=\"_blank\" rel=\"noopener\">Obelisk</a></li>\n</ul>\n<p>##1.11 Erlang</p>\n<ul>\n<li><a href=\"https://github.com/gar1t/lambdapad\" target=\"_blank\" rel=\"noopener\">LambdaPad</a></li>\n</ul>\n<p>##1.12 Go</p>\n<ul>\n<li><a href=\"https://github.com/wendal/gor\" target=\"_blank\" rel=\"noopener\">gor</a></li>\n<li><a href=\"https://github.com/piranha/gostatic\" target=\"_blank\" rel=\"noopener\">gostatic</a></li>\n<li><a href=\"https://github.com/mkaz/hastie\" target=\"_blank\" rel=\"noopener\">Hastie</a></li>\n<li><a href=\"http://hugo.spf13.com/\" target=\"_blank\" rel=\"noopener\">Hugo</a></li>\n<li><a href=\"https://github.com/drone/jkl\" target=\"_blank\" rel=\"noopener\">jkl</a></li>\n<li><a href=\"https://github.com/dchest/kkr\" target=\"_blank\" rel=\"noopener\">kkr</a></li>\n</ul>\n<p>##1.13  Groovy</p>\n<ul>\n<li><a href=\"http://sysgears.com/grain/\" target=\"_blank\" rel=\"noopener\">Grain</a></li>\n<li><a href=\"https://github.com/fifthposition/rizzo/\" target=\"_blank\" rel=\"noopener\">Rizzo</a></li>\n</ul>\n<p>##1.14  Haskell</p>\n<ul>\n<li><a href=\"http://jaspervdj.be/hakyll/\" target=\"_blank\" rel=\"noopener\">Hakyll</a></li>\n<li><a href=\"https://github.com/jgm/yst\" target=\"_blank\" rel=\"noopener\">yst</a></li>\n</ul>\n<p>##1.15  Java</p>\n<ul>\n<li><a href=\"http://fmpp.sourceforge.net/\" target=\"_blank\" rel=\"noopener\">FMPP</a></li>\n<li><a href=\"http://jbake.org/\" target=\"_blank\" rel=\"noopener\">JBake</a></li>\n<li><a href=\"https://github.com/wiztools/stagen\" target=\"_blank\" rel=\"noopener\">StaGen</a></li>\n</ul>\n<p>##1.16  Language Agnostic</p>\n<ul>\n<li><a href=\"http://hammerformac.com/\" target=\"_blank\" rel=\"noopener\">Hammer</a></li>\n<li><a href=\"http://livereload.com/\" target=\"_blank\" rel=\"noopener\">LiveReload</a></li>\n<li><a href=\"http://mixture.io/\" target=\"_blank\" rel=\"noopener\">Mixture</a></li>\n<li><a href=\"http://sitebuilder.codeplex.com/\" target=\"_blank\" rel=\"noopener\">Site builder console</a></li>\n<li><a href=\"https://staticmate.com/\" target=\"_blank\" rel=\"noopener\">StaticMate</a></li>\n<li><a href=\"https://github.com/vim-scripts/vimwiki\" target=\"_blank\" rel=\"noopener\">vimwiki</a></li>\n</ul>\n<p>##1.17  Lua</p>\n<ul>\n<li><a href=\"https://github.com/Fizzadar/Luapress\" target=\"_blank\" rel=\"noopener\">Luapress</a></li>\n</ul>\n<p>##1.18  Nimrod</p>\n<ul>\n<li><a href=\"https://github.com/dom96/ipsumgenera\" target=\"_blank\" rel=\"noopener\">ipsum genera</a></li>\n</ul>\n<p>##1.19  Node.js</p>\n<ul>\n<li><a href=\"https://github.com/antwarjs/antwar\" target=\"_blank\" rel=\"noopener\">antwar</a></li>\n<li><a href=\"https://github.com/modparadigm/apto\" target=\"_blank\" rel=\"noopener\">Apto</a></li>\n<li><a href=\"http://assemble.io\" target=\"_blank\" rel=\"noopener\">Assemble</a></li>\n<li><a href=\"http://indigounited.com/automaton/\" target=\"_blank\" rel=\"noopener\">Automaton</a></li>\n<li><a href=\"https://npmjs.org/package/bam\" target=\"_blank\" rel=\"noopener\">BAM</a></li>\n<li><a href=\"https://github.com/flatiron/blacksmith/\" target=\"_blank\" rel=\"noopener\">blacksmith</a></li>\n<li><a href=\"https://github.com/stackoverflow/blode\" target=\"_blank\" rel=\"noopener\">Blode</a></li>\n<li><a href=\"https://github.com/pvorb/node-bread\" target=\"_blank\" rel=\"noopener\">bread</a></li>\n<li><a href=\"http://broccoli-taco.com/\" target=\"_blank\" rel=\"noopener\">Broccoli Taco</a></li>\n<li><a href=\"http://brunch.io/\" target=\"_blank\" rel=\"noopener\">Brunch</a></li>\n<li><a href=\"http://www.cabinjs.com/\" target=\"_blank\" rel=\"noopener\">Cabin</a></li>\n<li><a href=\"https://github.com/cdmedia/cms.js\" target=\"_blank\" rel=\"noopener\">CMS.js</a></li>\n<li><a href=\"https://github.com/logicalparadox/codex\" target=\"_blank\" rel=\"noopener\">Codex</a></li>\n<li><a href=\"https://github.com/braziljs/conf-boilerplate\" target=\"_blank\" rel=\"noopener\">Conf-Boilerplate</a> (For Conference and Events)</li>\n<li><a href=\"http://derbyjs.com/\" target=\"_blank\" rel=\"noopener\">Derby</a></li>\n<li><a href=\"https://github.com/bevry/docpad\" target=\"_blank\" rel=\"noopener\">DocPad</a></li>\n<li><a href=\"https://github.com/easystatic/easystatic\" target=\"_blank\" rel=\"noopener\">Easystatic</a></li>\n<li><a href=\"https://github.com/fortes/enfield\" target=\"_blank\" rel=\"noopener\">Enfield</a></li>\n<li><a href=\"https://github.com/thibaultCha/Equiprose\" target=\"_blank\" rel=\"noopener\">Equiprose</a></li>\n<li><a href=\"https://github.com/alexmingoia/gabby\" target=\"_blank\" rel=\"noopener\">Gabby</a></li>\n<li><a href=\"https://github.com/yeoman/generator-gulp-webapp\" target=\"_blank\" rel=\"noopener\">generator-gulp-webapp</a></li>\n<li><a href=\"http://forge.synthmedia.co.uk/genesis/\" target=\"_blank\" rel=\"noopener\">Genesis</a></li>\n<li><a href=\"https://github.com/mixu/ghost-render\" target=\"_blank\" rel=\"noopener\">ghost-render</a></li>\n<li><a href=\"https://github.com/colynb/generator-go-static\" target=\"_blank\" rel=\"noopener\">Go-Static!</a></li>\n<li><a href=\"http://gruntjs.com/\" target=\"_blank\" rel=\"noopener\">Grunt</a></li>\n<li><a href=\"http://tsvensen.github.io/GruntStart/\" target=\"_blank\" rel=\"noopener\">GruntStart</a></li>\n<li><a href=\"https://github.com/tvooo/grunt-bear\" target=\"_blank\" rel=\"noopener\">grunt-bear</a></li>\n<li><a href=\"https://github.com/TxSSC/grunt-carpenter\" target=\"_blank\" rel=\"noopener\">Grunt-Carpenter</a></li>\n<li><a href=\"https://github.com/aaaristo/grunt-html-builder\" target=\"_blank\" rel=\"noopener\">grunt-html-builder</a></li>\n<li><a href=\"https://github.com/cambridge-healthcare/grunt-stencil\" target=\"_blank\" rel=\"noopener\">grunt-stencil</a></li>\n<li><a href=\"https://github.com/paulwib/gulp-ssg\" target=\"_blank\" rel=\"noopener\">gulp-ssg</a></li>\n<li><a href=\"https://github.com/es6rocks/harmonic\" target=\"_blank\" rel=\"noopener\">Harmonic</a></li>\n<li><a href=\"http://harpjs.com\" target=\"_blank\" rel=\"noopener\">Harp</a></li>\n<li><a href=\"http://macwright.org/heckle/\" target=\"_blank\" rel=\"noopener\">Heckle</a></li>\n<li><a href=\"https://github.com/tommy351/hexo\" target=\"_blank\" rel=\"noopener\">Hexo</a></li>\n<li><a href=\"http://hood.ie/\" target=\"_blank\" rel=\"noopener\">Hoodie</a></li>\n<li><a href=\"https://github.com/rfunduk/jen\" target=\"_blank\" rel=\"noopener\">jen</a></li>\n<li><a href=\"http://zohooo.github.io/jekyde/\" target=\"_blank\" rel=\"noopener\">Jekyde</a></li>\n<li><a href=\"https://github.com/jonsherrard/jott\" target=\"_blank\" rel=\"noopener\">Jott</a></li>\n<li><a href=\"https://github.com/koostudios/kel\" target=\"_blank\" rel=\"noopener\">Kel</a></li>\n<li><a href=\"https://github.com/jaredhanson/kerouac\" target=\"_blank\" rel=\"noopener\">Kerouac</a></li>\n<li><a href=\"https://github.com/testdouble/lineman\" target=\"_blank\" rel=\"noopener\">Lineman</a></li>\n<li><a href=\"https://github.com/jpettersson/lingon\" target=\"_blank\" rel=\"noopener\">Lingon</a></li>\n<li><a href=\"https://github.com/walmartlabs/lumbar\" target=\"_blank\" rel=\"noopener\">Lumbar</a></li>\n<li><a href=\"https://github.com/mixu/markdown-styles\" target=\"_blank\" rel=\"noopener\">markdown-styles</a></li>\n<li><a href=\"https://github.com/jgallen23/markx\" target=\"_blank\" rel=\"noopener\">markx</a></li>\n<li><a href=\"http://www.metalsmith.io/\" target=\"_blank\" rel=\"noopener\">Metalsmith</a></li>\n<li><a href=\"http://mimosajs.com/\" target=\"_blank\" rel=\"noopener\">Mimosa</a></li>\n<li><a href=\"http://modulejs.github.io/modjs/\" target=\"_blank\" rel=\"noopener\">Modjs</a></li>\n<li><a href=\"https://github.com/anupshinde/nirman\" target=\"_blank\" rel=\"noopener\">Nirman</a></li>\n<li><a href=\"http://lab.lepture.com/nico/\" target=\"_blank\" rel=\"noopener\">Nico</a></li>\n<li><a href=\"https://github.com/creationix/node-blog\" target=\"_blank\" rel=\"noopener\">node-blog</a></li>\n<li><a href=\"https://github.com/wangbus/node-jekyll\" target=\"_blank\" rel=\"noopener\">node-jekyll</a></li>\n<li><a href=\"https://github.com/the-grid/noflo-jekyll\" target=\"_blank\" rel=\"noopener\">noflo-jekyll</a></li>\n<li><a href=\"https://github.com/c9/nog\" target=\"_blank\" rel=\"noopener\">Nog</a></li>\n<li><a href=\"https://github.com/jawerty/pagen\" target=\"_blank\" rel=\"noopener\">pagen</a></li>\n<li><a href=\"https://github.com/caolan/petrify\" target=\"_blank\" rel=\"noopener\">Petrify</a></li>\n<li><a href=\"https://phenomic.io/\" target=\"_blank\" rel=\"noopener\">Phenomic</a></li>\n<li><a href=\"http://jsantell.github.io/poet/\" target=\"_blank\" rel=\"noopener\">Poet</a></li>\n<li><a href=\"https://github.com/alexyoung/pop\" target=\"_blank\" rel=\"noopener\">Pop</a></li>\n<li><a href=\"https://github.com/thegreatsunra/propeller\" target=\"_blank\" rel=\"noopener\">Propeller</a></li>\n<li><a href=\"https://github.com/laktek/punch\" target=\"_blank\" rel=\"noopener\">Punch</a></li>\n<li><a href=\"https://github.com/shanewholloway/node-qssg\" target=\"_blank\" rel=\"noopener\">Qabex</a></li>\n<li><a href=\"https://github.com/tjvantoll/quick-start-template\" target=\"_blank\" rel=\"noopener\">Quick Start Guide Template</a></li>\n<li><a href=\"https://npmjs.org/package/quill\" target=\"_blank\" rel=\"noopener\">Quill</a></li>\n<li><a href=\"https://github.com/BradDenver/react-static-site\" target=\"_blank\" rel=\"noopener\">React Static Site</a></li>\n<li><a href=\"http://jxnblk.com/writing/posts/static-site-generation-with-react-and-webpack/\" target=\"_blank\" rel=\"noopener\">React + Webpack</a></li>\n<li><a href=\"https://github.com/felixge/node-romulus\" target=\"_blank\" rel=\"noopener\">romulus</a></li>\n<li><a href=\"http://roots.cx/\" target=\"_blank\" rel=\"noopener\">roots</a></li>\n<li><a href=\"https://github.com/wesleytodd/rufio\" target=\"_blank\" rel=\"noopener\">Rufio</a></li>\n<li><a href=\"https://surge.sh/\" target=\"_blank\" rel=\"noopener\">Surge</a></li>\n<li><a href=\"https://github.com/techwraith/scotch\" target=\"_blank\" rel=\"noopener\">Scotch</a></li>\n<li><a href=\"https://github.com/fians/situs\" target=\"_blank\" rel=\"noopener\">Situs</a></li>\n<li><a href=\"https://github.com/harsha-mudi/squareboy\" target=\"_blank\" rel=\"noopener\">squareboy</a></li>\n<li><a href=\"https://github.com/kriasoft/static-site-starter\" target=\"_blank\" rel=\"noopener\">Static Site Starter Kit</a></li>\n<li><a href=\"https://github.com/ff0000/statix\" target=\"_blank\" rel=\"noopener\">Statix</a></li>\n<li><a href=\"https://github.com/AVGP/susi\" target=\"_blank\" rel=\"noopener\">SuSi</a></li>\n<li><a href=\"https://github.com/ido50/Szyslak\" target=\"_blank\" rel=\"noopener\">Szyslak</a></li>\n<li><a href=\"http://krasimir.github.io/techy/\" target=\"_blank\" rel=\"noopener\">Techy</a></li>\n<li><a href=\"https://github.com/rprieto/thumbsup\" target=\"_blank\" rel=\"noopener\">thumbsup</a></li>\n<li><a href=\"http://volojs.org/\" target=\"_blank\" rel=\"noopener\">volo</a></li>\n<li><a href=\"https://github.com/wprl/wainwright\" target=\"_blank\" rel=\"noopener\">wainwright</a></li>\n<li><a href=\"https://github.com/shaoshuai0102/wanna\" target=\"_blank\" rel=\"noopener\">Wanna</a></li>\n<li><a href=\"https://github.com/creationix/wheat\" target=\"_blank\" rel=\"noopener\">Wheat</a></li>\n<li><a href=\"http://www.wikismith.com/\" target=\"_blank\" rel=\"noopener\">Wikismith</a></li>\n<li><a href=\"http://jnordberg.github.io/wintersmith/\" target=\"_blank\" rel=\"noopener\">Wintersmith</a></li>\n<li><a href=\"https://github.com/studiomoniker/woods\" target=\"_blank\" rel=\"noopener\">Woods</a></li>\n<li><a href=\"https://npmjs.org/package/yassg\" target=\"_blank\" rel=\"noopener\">yassg</a></li>\n<li><a href=\"http://yeoman.io/\" target=\"_blank\" rel=\"noopener\">Yeoman</a></li>\n</ul>\n<p>##1.20  OCaml</p>\n<ul>\n<li><a href=\"http://zoggy.github.io/stog/\" target=\"_blank\" rel=\"noopener\">Stog</a></li>\n<li><a href=\"http://loup-vaillant.fr/projects/ussm/\" target=\"_blank\" rel=\"noopener\">Ultra Simple Site Maker</a></li>\n</ul>\n<p>##1.21  PHP</p>\n<ul>\n<li><a href=\"https://github.com/billpatrianakos/animal-f\" target=\"_blank\" rel=\"noopener\">Animal</a></li>\n<li><a href=\"https://github.com/sarfraznawaz2005/BloggerCMS\" target=\"_blank\" rel=\"noopener\">BloggerCMS</a></li>\n<li><a href=\"http://carew.github.io/\" target=\"_blank\" rel=\"noopener\">Carew</a></li>\n<li><a href=\"http://couscous.io/\" target=\"_blank\" rel=\"noopener\">Couscous</a></li>\n<li><a href=\"https://github.com/Circa75/dropplets\" target=\"_blank\" rel=\"noopener\">Dropplets</a></li>\n<li><a href=\"http://fansoro.org/\" target=\"_blank\" rel=\"noopener\">Fansoro</a></li>\n<li><a href=\"http://getgrav.org/\" target=\"_blank\" rel=\"noopener\">Grav</a></li>\n<li><a href=\"http://gumdropapp.com/\" target=\"_blank\" rel=\"noopener\">Gumdrop</a></li>\n<li><a href=\"http://www.phrozn.info/en/\" target=\"_blank\" rel=\"noopener\">Phrozn</a></li>\n<li><a href=\"http://bolt80.com/piecrust/\" target=\"_blank\" rel=\"noopener\">PieCrust</a></li>\n<li><a href=\"https://github.com/megakote/purepress\" target=\"_blank\" rel=\"noopener\">Purepress</a></li>\n<li><a href=\"http://sculpin.io/\" target=\"_blank\" rel=\"noopener\">Sculpin</a></li>\n<li><a href=\"https://github.com/marcoarment/secondcrack\" target=\"_blank\" rel=\"noopener\">Second Crack</a></li>\n<li><a href=\"https://github.com/maxailloud/SG\" target=\"_blank\" rel=\"noopener\">SG</a></li>\n<li><a href=\"https://github.com/inanimatt/site-builder\" target=\"_blank\" rel=\"noopener\">Site-builder</a></li>\n<li><a href=\"https://github.com/yqtaku/site-maker\" target=\"_blank\" rel=\"noopener\">SiteMaker</a></li>\n<li><a href=\"https://github.com/edvanbeinum/snowshoe\" target=\"_blank\" rel=\"noopener\">Snowshoe</a></li>\n<li><a href=\"https://github.com/yosymfony/Spress\" target=\"_blank\" rel=\"noopener\">Spress</a></li>\n<li><a href=\"https://github.com/kolber/stacey\" target=\"_blank\" rel=\"noopener\">Stacey</a></li>\n<li><a href=\"http://www.statamic.com/\" target=\"_blank\" rel=\"noopener\">Statamic</a></li>\n<li><a href=\"https://github.com/catnapgames/Tempo\" target=\"_blank\" rel=\"noopener\">Tempo</a></li>\n<li><a href=\"http://about.asika.tw/vaseman/\" target=\"_blank\" rel=\"noopener\">Vaseman</a></li>\n<li><a href=\"http://github.com/datenstrom/yellow\" target=\"_blank\" rel=\"noopener\">Yellow</a></li>\n<li><a href=\"https://github.com/alpacaaa/wadoo\" target=\"_blank\" rel=\"noopener\">Wadoo</a></li>\n</ul>\n<p>##1.22  Python</p>\n<ul>\n<li><a href=\"https://github.com/posativ/acrylamid\" target=\"_blank\" rel=\"noopener\">Acrylamid</a></li>\n<li><a href=\"https://bitbucket.org/jek/blatter/\" target=\"_blank\" rel=\"noopener\">Blatter</a></li>\n<li><a href=\"http://www.blogofile.com/\" target=\"_blank\" rel=\"noopener\">Blogofile</a></li>\n<li><a href=\"https://github.com/ipconfiger/blogen\" target=\"_blank\" rel=\"noopener\">Blogen</a></li>\n<li><a href=\"https://github.com/axitkhurana/buster\" target=\"_blank\" rel=\"noopener\">buster</a></li>\n<li><a href=\"http://cactusformac.com/\" target=\"_blank\" rel=\"noopener\">Cactus</a></li>\n<li><a href=\"https://github.com/dz/chisel\" target=\"_blank\" rel=\"noopener\">Chisel</a></li>\n<li><a href=\"https://github.com/lejonet/Cipherpress\" target=\"_blank\" rel=\"noopener\">Cipherpress</a></li>\n<li><a href=\"https://github.com/shazow/composer\" target=\"_blank\" rel=\"noopener\">Composer</a></li>\n<li><a href=\"https://pypi.python.org/pypi/cyrax\" target=\"_blank\" rel=\"noopener\">cyrax</a></li>\n<li><a href=\"https://github.com/mtigas/django-medusa/\" target=\"_blank\" rel=\"noopener\">django-medusa</a></li>\n<li><a href=\"https://github.com/amitu/djangothis/\" target=\"_blank\" rel=\"noopener\">djangothis</a></li>\n<li><a href=\"https://github.com/fallenhitokiri/drupan\" target=\"_blank\" rel=\"noopener\">drupan</a></li>\n<li><a href=\"https://github.com/FSX/elyse\" target=\"_blank\" rel=\"noopener\">Elyse</a></li>\n<li><a href=\"https://github.com/tylerbutler/engineer\" target=\"_blank\" rel=\"noopener\">Engineer</a></li>\n<li><a href=\"http://www.voidspace.org.uk/python/firedrop2/\" target=\"_blank\" rel=\"noopener\">Firedrop2</a></li>\n<li><a href=\"http://dkuntz2.github.io/fjord/\" target=\"_blank\" rel=\"noopener\">fjord</a></li>\n<li><a href=\"https://github.com/nikcub/floyd\" target=\"_blank\" rel=\"noopener\">Floyd</a></li>\n<li><a href=\"http://glyphobet.github.io/fragments/\" target=\"_blank\" rel=\"noopener\">Fragments</a></li>\n<li><a href=\"http://pythonhosted.org/Frozen-Flask/\" target=\"_blank\" rel=\"noopener\">Frozen-Flask</a></li>\n<li><a href=\"https://github.com/teiko/glynn\" target=\"_blank\" rel=\"noopener\">Glynn</a></li>\n<li><a href=\"https://github.com/xfire/growl/\" target=\"_blank\" rel=\"noopener\">growl</a></li>\n<li><a href=\"https://github.com/mhlakhani/halwa\" target=\"_blank\" rel=\"noopener\">Halwa</a></li>\n<li><a href=\"https://pypi.python.org/pypi/handcrank\" target=\"_blank\" rel=\"noopener\">handcrank</a></li>\n<li><a href=\"https://github.com/lakshmivyas/hyde\" target=\"_blank\" rel=\"noopener\">Hyde</a></li>\n<li><a href=\"https://github.com/aconbere/igor\" target=\"_blank\" rel=\"noopener\">Igor</a></li>\n<li><a href=\"http://jinja.pocoo.org/\" target=\"_blank\" rel=\"noopener\">Jinja</a></li>\n<li><a href=\"https://github.com/jokull/jinjet\" target=\"_blank\" rel=\"noopener\">jinjet</a></li>\n<li><a href=\"https://www.getlektor.com/\" target=\"_blank\" rel=\"noopener\">Lektor</a></li>\n<li><a href=\"https://github.com/an0/Letterpress\" target=\"_blank\" rel=\"noopener\">Letterpress</a></li>\n<li><a href=\"https://github.com/borismus/lightning\" target=\"_blank\" rel=\"noopener\">Lightning</a></li>\n<li><a href=\"https://lilac.readthedocs.org/en/latest/index.html\" target=\"_blank\" rel=\"noopener\">lilac</a></li>\n<li><a href=\"https://github.com/yaph/logya\" target=\"_blank\" rel=\"noopener\">Logya</a></li>\n<li><a href=\"http://www.makotemplates.org/\" target=\"_blank\" rel=\"noopener\">Mako</a></li>\n<li><a href=\"https://github.com/myfreeweb/markbox\" target=\"_blank\" rel=\"noopener\">Markbox</a></li>\n<li><a href=\"http://markdoc.org/\" target=\"_blank\" rel=\"noopener\">Markdoc</a></li>\n<li><a href=\"http://www.mkdocs.org/\" target=\"_blank\" rel=\"noopener\">MkDocs</a></li>\n<li><a href=\"http://mynt.mirroredwhite.com/\" target=\"_blank\" rel=\"noopener\">mynt</a></li>\n<li><a href=\"https://github.com/jreese/nib\" target=\"_blank\" rel=\"noopener\">Nib</a></li>\n<li><a href=\"http://nikola.ralsina.com.ar/\" target=\"_blank\" rel=\"noopener\">Nikola</a></li>\n<li><a href=\"http://obraz.pirx.ru/\" target=\"_blank\" rel=\"noopener\">Obraz</a></li>\n<li><a href=\"https://github.com/getpelican/pelican/\" target=\"_blank\" rel=\"noopener\">Pelican</a></li>\n<li><a href=\"http://inky.github.io/pilcrow/\" target=\"_blank\" rel=\"noopener\">PILCROW</a></li>\n<li><a href=\"https://bitbucket.org/obensonne/poole\" target=\"_blank\" rel=\"noopener\">Poole</a></li>\n<li><a href=\"http://pyblosxom.github.io/\" target=\"_blank\" rel=\"noopener\">PyBlosxom</a></li>\n<li><a href=\"http://pykwiki.nullism.com/\" target=\"_blank\" rel=\"noopener\">PyKwiki</a></li>\n<li><a href=\"https://github.com/arthurk/pyll\" target=\"_blank\" rel=\"noopener\">Pyll</a></li>\n<li><a href=\"https://github.com/mitsuhiko/rstblog\" target=\"_blank\" rel=\"noopener\">rstblog</a></li>\n<li><a href=\"http://rtorr.github.io/serious-chicken/\" target=\"_blank\" rel=\"noopener\">Serious Chicken</a></li>\n<li><a href=\"https://github.com/venthur/sg\" target=\"_blank\" rel=\"noopener\">sg</a></li>\n<li><a href=\"http://honza.ca/socrates/\" target=\"_blank\" rel=\"noopener\">Socrates</a></li>\n<li><a href=\"https://github.com/alvesjnr/speechhub\" target=\"_blank\" rel=\"noopener\">Speech Hub</a></li>\n<li><a href=\"http://sphinx-doc.org/\" target=\"_blank\" rel=\"noopener\">Sphinx</a></li>\n<li><a href=\"https://github.com/nickpetty/squirrel\" target=\"_blank\" rel=\"noopener\">Squirrel</a></li>\n<li><a href=\"http://stadoproject.org/\" target=\"_blank\" rel=\"noopener\">Stadø</a></li>\n<li><a href=\"https://github.com/Ceasar/staticjinja\" target=\"_blank\" rel=\"noopener\">staticjinja</a></li>\n<li><a href=\"https://github.com/colinta/StrangeCase\" target=\"_blank\" rel=\"noopener\">StrangeCase</a></li>\n<li><a href=\"https://github.com/rigoneri/syte\" target=\"_blank\" rel=\"noopener\">Syte</a></li>\n<li><a href=\"http://tags.brace.io/\" target=\"_blank\" rel=\"noopener\">Tags</a></li>\n<li><a href=\"https://github.com/sebastien/tahchee\" target=\"_blank\" rel=\"noopener\">tahchee</a></li>\n<li><a href=\"http://tinkerer.me/\" target=\"_blank\" rel=\"noopener\">Tinkerer</a></li>\n<li><a href=\"https://github.com/semk/voldemort\" target=\"_blank\" rel=\"noopener\">Voldemort</a></li>\n<li><a href=\"https://github.com/bow/volt/\" target=\"_blank\" rel=\"noopener\">Volt</a></li>\n<li><a href=\"http://gitorious.org/webber\" target=\"_blank\" rel=\"noopener\">Webber</a></li>\n<li><a href=\"https://github.com/mythmon/wok\" target=\"_blank\" rel=\"noopener\">Wok</a></li>\n</ul>\n<p>##1.23  Racket</p>\n<ul>\n<li><a href=\"https://github.com/greghendershott/frog\" target=\"_blank\" rel=\"noopener\">Frog</a></li>\n</ul>\n<p>##1.24  Ruby</p>\n<ul>\n<li><a href=\"https://github.com/botanicus/ace\" target=\"_blank\" rel=\"noopener\">Ace</a></li>\n<li><a href=\"http://tinytree.info/\" target=\"_blank\" rel=\"noopener\">Bonsai</a></li>\n<li><a href=\"https://github.com/sstephenson/brochure\" target=\"_blank\" rel=\"noopener\">Brochure</a></li>\n<li><a href=\"https://github.com/cdn64/deplot\" target=\"_blank\" rel=\"noopener\">deplot</a></li>\n<li><a href=\"https://github.com/nex3/dynamicmatic\" target=\"_blank\" rel=\"noopener\">DynamicMatic</a></li>\n<li><a href=\"https://github.com/46Bit/fairytale\" target=\"_blank\" rel=\"noopener\">Fairytale</a></li>\n<li><a href=\"https://github.com/blahed/frank\" target=\"_blank\" rel=\"noopener\">Frank</a></li>\n<li><a href=\"https://github.com/dreverri/gollum-site\" target=\"_blank\" rel=\"noopener\">gollum-site</a></li>\n<li><a href=\"https://github.com/owainlewis/gravity\" target=\"_blank\" rel=\"noopener\">Gravity</a></li>\n<li><a href=\"https://github.com/thoughtbot/high_voltage\" target=\"_blank\" rel=\"noopener\">High Voltage</a></li>\n<li><a href=\"http://hobix.github.io/hobix/\" target=\"_blank\" rel=\"noopener\">hobix</a></li>\n<li><a href=\"https://github.com/hobix/hobix/\" target=\"_blank\" rel=\"noopener\">Hobix</a></li>\n<li><a href=\"https://github.com/mojombo/jekyll\" target=\"_blank\" rel=\"noopener\">Jekyll</a></li>\n<li><a href=\"https://github.com/sandal/korma\" target=\"_blank\" rel=\"noopener\">korma</a></li>\n<li><a href=\"http://avdgaag.github.io/laze/\" target=\"_blank\" rel=\"noopener\">Laze</a></li>\n<li><a href=\"https://github.com/petebrowne/machined\" target=\"_blank\" rel=\"noopener\">Machined</a></li>\n<li><a href=\"https://github.com/donmelton/magneto\" target=\"_blank\" rel=\"noopener\">Magneto</a></li>\n<li><a href=\"https://github.com/petebrowne/massimo\" target=\"_blank\" rel=\"noopener\">Massimo</a></li>\n<li><a href=\"http://middlemanapp.com/\" target=\"_blank\" rel=\"noopener\">Middleman</a></li>\n<li><a href=\"https://github.com/lucaong/Moka\" target=\"_blank\" rel=\"noopener\">Moka</a></li>\n<li><a href=\"http://nanoc.ws/\" target=\"_blank\" rel=\"noopener\">Nanoc</a></li>\n<li><a href=\"http://nestacms.com/\" target=\"_blank\" rel=\"noopener\">NestaCMS</a></li>\n<li><a href=\"http://octopress.org/\" target=\"_blank\" rel=\"noopener\">Octopress</a></li>\n<li><a href=\"https://github.com/mdub/pith\" target=\"_blank\" rel=\"noopener\">Pith</a></li>\n<li><a href=\"http://rubyforge.org/projects/rakeweb/\" target=\"_blank\" rel=\"noopener\">Rakeweb</a></li>\n<li><a href=\"http://snk.tuxfamily.org/lib/rassmalog/doc/guide.html\" target=\"_blank\" rel=\"noopener\">Rassmalog</a></li>\n<li><a href=\"http://rog.rubyforge.org/\" target=\"_blank\" rel=\"noopener\">Rog</a></li>\n<li><a href=\"http://rote.rubyforge.org/\" target=\"_blank\" rel=\"noopener\">rote</a></li>\n<li><a href=\"http://www.apeth.com/RubyFrontierDocs/default.html\" target=\"_blank\" rel=\"noopener\">RubyFrontier</a></li>\n<li><a href=\"http://ruhoh.com/\" target=\"_blank\" rel=\"noopener\">Ruhoh</a></li>\n<li><a href=\"https://github.com/aprescott/serif\" target=\"_blank\" rel=\"noopener\">Serif</a></li>\n<li><a href=\"http://get-serve.com/\" target=\"_blank\" rel=\"noopener\">Serve</a></li>\n<li><a href=\"https://github.com/rubyworks/shelob\" target=\"_blank\" rel=\"noopener\">Shelob</a></li>\n<li><a href=\"http://stasis.me/\" target=\"_blank\" rel=\"noopener\">stasis</a></li>\n<li><a href=\"https://github.com/mindeavor/staticmatic2\" target=\"_blank\" rel=\"noopener\">StaticMatic 2</a></li>\n<li><a href=\"http://rubyforge.org/projects/staticmatic/\" target=\"_blank\" rel=\"noopener\">StaticMatic</a></li>\n<li><a href=\"http://staticweb.rubyforge.org/\" target=\"_blank\" rel=\"noopener\">StaticWeb</a></li>\n<li><a href=\"https://github.com/swaroopsm/striker\" target=\"_blank\" rel=\"noopener\">Striker</a></li>\n<li><a href=\"https://github.com/cloudhead/toto\" target=\"_blank\" rel=\"noopener\">toto</a></li>\n<li><a href=\"http://webby.rubyforge.org/\" target=\"_blank\" rel=\"noopener\">Webby</a></li>\n<li><a href=\"http://webgen.rubyforge.org/\" target=\"_blank\" rel=\"noopener\">webgen</a></li>\n<li><a href=\"http://yurtcms.roberthahn.ca/\" target=\"_blank\" rel=\"noopener\">Yurt CMS</a></li>\n<li><a href=\"http://www.zenspider.com/projects/zenweb.html\" target=\"_blank\" rel=\"noopener\">zenweb</a></li>\n<li><a href=\"http://awestruct.org/\" target=\"_blank\" rel=\"noopener\">{ :awestruct }</a></li>\n</ul>\n<p>##1.25  Scala</p>\n<ul>\n<li><a href=\"https://github.com/wspringer/monkeyman\" target=\"_blank\" rel=\"noopener\">monkeyman</a></li>\n<li><a href=\"https://github.com/scalate/scalate\" target=\"_blank\" rel=\"noopener\">Scalate</a></li>\n</ul>\n<p>##1.26  Scheme</p>\n<ul>\n<li><a href=\"http://wiki.call-cc.org/eggref/4/hyde\" target=\"_blank\" rel=\"noopener\">Hyde</a></li>\n</ul>\n<p>##1.27  Shell</p>\n<ul>\n<li><a href=\"https://github.com/Jack000/Expose\" target=\"_blank\" rel=\"noopener\">Exposé</a></li>\n<li><a href=\"https://gitorious.org/fugitive\" target=\"_blank\" rel=\"noopener\">fugitive</a></li>\n<li><a href=\"https://github.com/wlangstroth/simple-static\" target=\"_blank\" rel=\"noopener\">simple-static</a></li>\n<li><a href=\"https://github.com/jroimartin/sw\" target=\"_blank\" rel=\"noopener\">sw</a></li>\n<li><a href=\"https://github.com/stef/utterson\" target=\"_blank\" rel=\"noopener\">Utterson</a></li>\n<li><a href=\"http://www.0x743.com/vee/\" target=\"_blank\" rel=\"noopener\">Vee</a></li>\n<li><a href=\"http://werc.cat-v.org/\" target=\"_blank\" rel=\"noopener\">werc</a></li>\n</ul>\n<p>##1.28  Tcl</p>\n<ul>\n<li><a href=\"https://github.com/dbohdan/tclssg\" target=\"_blank\" rel=\"noopener\">Tclssg</a></li>\n</ul>\n<p>#2  For Help</p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">WebSite</th>\n<th style=\"text-align:center\">Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\"><a href=\"https://staticsitegenerators.net\" target=\"_blank\" rel=\"noopener\">Static Site Generators</a></td>\n<td style=\"text-align:center\">Static Site Generators<br><br>The definitive listing of Static Site Generators — all 437 of them!</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><a href=\"https://disqus.com/admin/signup\" target=\"_blank\" rel=\"noopener\">Disqus</a></td>\n<td style=\"text-align:center\">The #1 way to build your audience<br><br>Disqus offers the best add-on tools for site owners to power discussions, increase engagement, and earn revenue.<br> Please don’t forget your Shortname</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><a href=\"http://www.google.com/analytics\" target=\"_blank\" rel=\"noopener\">Google Analytics</a></td>\n<td style=\"text-align:center\">Get stronger results across all your sites, apps and offline channels. Google’s analytics solutions help you turn customer insights into real gains.</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><a href=\"http://www.google.com/webmasters\" target=\"_blank\" rel=\"noopener\">Google Webmasters</a></td>\n<td style=\"text-align:center\">Track your site’s search performance with Google Search Console and browse around for more webmaster resources.</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><a href=\"https://www.godaddy.com/\" target=\"_blank\" rel=\"noopener\">Godaddy</a></td>\n<td style=\"text-align:center\">Get a free domain with a website from GoDaddy.</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><a href=\"https://www.dnspod.cn/\" target=\"_blank\" rel=\"noopener\">Dnspod</a></td>\n<td style=\"text-align:center\">DNS resolution service, add a new domain name, and apply a Github Pages A record points to the ip: 207.97.227.245</td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"3-About-This-Site\"><a href=\"#3-About-This-Site\" class=\"headerlink\" title=\"#3    About This Site\"></a>#3    About This Site</h2><p>Our Site is based on Pelican(Python)</p>\n","site":{"data":{}},"excerpt":"","more":"<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">Title</th>\n<th style=\"text-align:center\">Date</th>\n<th style=\"text-align:center\">Category</th>\n<th style=\"text-align:center\">Tags</th>\n<th style=\"text-align:center\">Slug</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">static-site-generators</td>\n<td style=\"text-align:center\">2016-06-27 06:31</td>\n<td style=\"text-align:center\">Linux</td>\n<td style=\"text-align:center\">linux, blog, pelican</td>\n<td style=\"text-align:center\">static-site-generators</td>\n</tr>\n</tbody>\n</table>\n<p>With the CMS of Wordpress and other blog systems, increasingly bloated. The emergence of static blog system to a certain extent, solve this problem, and thus get a lot of personal bloggers of all ages. So, what are static blog program in the end it?</p>\n<p>These static blog generator are based on Bash, C/C++, C# and Perl, Clojure, Common Lisp, Dropbox and other preparation.</p>\n<p>A definitive list of tools for generating static websites.</p>\n<h2 id=\"1-Table-of-Contents\"><a href=\"#1-Table-of-Contents\" class=\"headerlink\" title=\"#1. Table of Contents\"></a>#1. Table of Contents</h2><ul>\n<li><a href=\"##1.1  .NET\">.NET</a></li>\n<li><a href=\"#1.2  awk\">Awk</a></li>\n<li><a href=\"#bash\">Bash</a></li>\n<li><a href=\"#c\">C++</a></li>\n<li><a href=\"#c-sharp\">C#</a></li>\n<li><a href=\"#c-and-perl\">C and Perl</a></li>\n<li><a href=\"#clojure\">Clojure</a></li>\n<li><a href=\"#common-lisp\">Common Lisp</a></li>\n<li><a href=\"#dropbox\">Dropbox</a></li>\n<li><a href=\"#elixir\">Elixir</a></li>\n<li><a href=\"#erlang\">Erlang</a></li>\n<li><a href=\"#go\">Go</a></li>\n<li><a href=\"#groovy\">Groovy</a></li>\n<li><a href=\"#haskell\">Haskell</a></li>\n<li><a href=\"#java\">Java</a></li>\n<li><a href=\"#language-agnostic\">Language Agnostic</a></li>\n<li><a href=\"#lua\">Lua</a></li>\n<li><a href=\"#nimrod\">Nimrod</a></li>\n<li><a href=\"#nodejs\">Node.js</a></li>\n<li><a href=\"#ocaml\">OCaml</a></li>\n<li><a href=\"#php\">PHP</a></li>\n<li><a href=\"#python\">Python</a></li>\n<li><a href=\"#racket\">Racket</a></li>\n<li><a href=\"#ruby\">Ruby</a></li>\n<li><a href=\"#scala\">Scala</a></li>\n<li><a href=\"#scheme\">Scheme</a></li>\n<li><a href=\"#shell\">Shell</a></li>\n<li><a href=\"#tcl\">Tcl</a></li>\n</ul>\n<h2 id=\"1-1-NET\"><a href=\"#1-1-NET\" class=\"headerlink\" title=\"##1.1  .NET\"></a>##1.1  .NET</h2><ul>\n<li><a href=\"https://github.com/Code52/pretzel\" target=\"_blank\" rel=\"noopener\">Pretzel</a></li>\n<li><a href=\"http://wyam.io\" target=\"_blank\" rel=\"noopener\">Wyam</a></li>\n</ul>\n<p>##1.2  Awk</p>\n<ul>\n<li><a href=\"https://github.com/nuex/zodiac\" target=\"_blank\" rel=\"noopener\">zodiac</a></li>\n</ul>\n<p>##1.3  Bash</p>\n<ul>\n<li><a href=\"https://github.com/taylorchu/baker/\" target=\"_blank\" rel=\"noopener\">baker</a></li>\n<li><a href=\"https://github.com/carlesfe/bashblog\" target=\"_blank\" rel=\"noopener\">bashblog</a></li>\n<li><a href=\"http://nanoblogger.sourceforge.net/\" target=\"_blank\" rel=\"noopener\">NanoBlogger</a></li>\n<li><a href=\"http://pagegen.phnd.net/\" target=\"_blank\" rel=\"noopener\">Pagegen</a></li>\n<li><a href=\"http://skf.jeannedhack.org/\" target=\"_blank\" rel=\"noopener\">SKF</a></li>\n</ul>\n<p>##1.4  C++</p>\n<ul>\n<li><a href=\"http://leohtml.sourceforge.net/\" target=\"_blank\" rel=\"noopener\">Leo</a></li>\n</ul>\n<p>##1.5  C Sharp</p>\n<ul>\n<li><a href=\"https://github.com/mikoskinen/graze\" target=\"_blank\" rel=\"noopener\">Graze</a></li>\n</ul>\n<p>##1.6  C and Perl</p>\n<ul>\n<li><a href=\"http://blaze.blackened.cz/\" target=\"_blank\" rel=\"noopener\">BlazeBlogger</a></li>\n<li><a href=\"http://blosxom.sourceforge.net/documentation/users/configure/static.html\" target=\"_blank\" rel=\"noopener\">blosxom</a></li>\n<li><a href=\"https://metacpan.org/pod/Bryar::Frontend::Static\" target=\"_blank\" rel=\"noopener\">Bryar</a></li>\n<li><a href=\"http://vanilladraft.com/dapper/\" target=\"_blank\" rel=\"noopener\">Dapper</a></li>\n<li><a href=\"https://metacpan.org/pod/HiD\" target=\"_blank\" rel=\"noopener\">HiD</a></li>\n<li><a href=\"https://ikiwiki.info/\" target=\"_blank\" rel=\"noopener\">ikiwiki</a></li>\n<li><a href=\"https://metacpan.org/pod/Papery\" target=\"_blank\" rel=\"noopener\">Papery</a></li>\n<li><a href=\"http://search.cpan.org/dist/Quietly-Confident/qc.pod\" target=\"_blank\" rel=\"noopener\">Quietly::Confident</a></li>\n<li><a href=\"https://metacpan.org/pod/StaticVolt\" target=\"_blank\" rel=\"noopener\">StaticVolt</a></li>\n<li><a href=\"https://metacpan.org/pod/Statocles\" target=\"_blank\" rel=\"noopener\">Statocles</a></li>\n<li><a href=\"https://github.com/skx/templer\" target=\"_blank\" rel=\"noopener\">Templer</a></li>\n<li><a href=\"http://www.thewml.org/\" target=\"_blank\" rel=\"noopener\">Website Meta Language</a></li>\n<li><a href=\"http://www.idocs.com/xdo/\" target=\"_blank\" rel=\"noopener\">XDO</a></li>\n<li><a href=\"https://metacpan.org/pod/Zucchini\" target=\"_blank\" rel=\"noopener\">Zucchini</a></li>\n</ul>\n<p>##1.7  Clojure</p>\n<ul>\n<li><a href=\"http://cryogenweb.org/\" target=\"_blank\" rel=\"noopener\">Cryogen</a></li>\n<li><a href=\"http://www.ryanmcg.com/incise/\" target=\"_blank\" rel=\"noopener\">incise</a></li>\n<li><a href=\"https://github.com/liquidz/misaki\" target=\"_blank\" rel=\"noopener\">misaki</a></li>\n<li><a href=\"http://nakkaya.com/static.html\" target=\"_blank\" rel=\"noopener\">Static</a></li>\n</ul>\n<p>##1.8  Common Lisp</p>\n<ul>\n<li><a href=\"http://www.cliki.net/coleslaw\" target=\"_blank\" rel=\"noopener\">coleslaw</a></li>\n<li><a href=\"https://gist.github.com/TeMPOraL/4190622\" target=\"_blank\" rel=\"noopener\">regenerate</a></li>\n</ul>\n<p>##1.9  Dropbox</p>\n<ul>\n<li><a href=\"http://900dpi.com/\" target=\"_blank\" rel=\"noopener\">900dpi</a></li>\n<li><a href=\"https://blogmark.me/\" target=\"_blank\" rel=\"noopener\">Blogmark</a></li>\n<li><a href=\"http://brace.io/\" target=\"_blank\" rel=\"noopener\">Brace</a></li>\n<li><a href=\"http://calepin.co/\" target=\"_blank\" rel=\"noopener\">Calepin</a></li>\n<li><a href=\"http://chilipy.com/\" target=\"_blank\" rel=\"noopener\">Chili</a></li>\n<li><a href=\"http://cloudcannon.com/\" target=\"_blank\" rel=\"noopener\">Cloud Cannon</a></li>\n<li><a href=\"https://github.com/louissobel/Drapache\" target=\"_blank\" rel=\"noopener\">Drapache</a></li>\n<li><a href=\"http://droppages.com/\" target=\"_blank\" rel=\"noopener\">DropPages</a></li>\n<li><a href=\"http://www.kissr.com/\" target=\"_blank\" rel=\"noopener\">KISSr</a></li>\n<li><a href=\"https://www.pancake.io/\" target=\"_blank\" rel=\"noopener\">Pancake.io</a></li>\n<li><a href=\"http://scriptogr.am/\" target=\"_blank\" rel=\"noopener\">Scriptogr.am</a></li>\n<li><a href=\"http://www.site44.com/\" target=\"_blank\" rel=\"noopener\">Site44</a></li>\n<li><a href=\"http://www.sitebox.io/\" target=\"_blank\" rel=\"noopener\">Sitebox.io</a></li>\n<li><a href=\"https://telegr.am/\" target=\"_blank\" rel=\"noopener\">Telegram</a></li>\n<li><a href=\"https://yoozon.com/\" target=\"_blank\" rel=\"noopener\">Yoozon</a></li>\n</ul>\n<p>##1.10 Elixir</p>\n<ul>\n<li><a href=\"https://github.com/BennyHallett/obelisk\" target=\"_blank\" rel=\"noopener\">Obelisk</a></li>\n</ul>\n<p>##1.11 Erlang</p>\n<ul>\n<li><a href=\"https://github.com/gar1t/lambdapad\" target=\"_blank\" rel=\"noopener\">LambdaPad</a></li>\n</ul>\n<p>##1.12 Go</p>\n<ul>\n<li><a href=\"https://github.com/wendal/gor\" target=\"_blank\" rel=\"noopener\">gor</a></li>\n<li><a href=\"https://github.com/piranha/gostatic\" target=\"_blank\" rel=\"noopener\">gostatic</a></li>\n<li><a href=\"https://github.com/mkaz/hastie\" target=\"_blank\" rel=\"noopener\">Hastie</a></li>\n<li><a href=\"http://hugo.spf13.com/\" target=\"_blank\" rel=\"noopener\">Hugo</a></li>\n<li><a href=\"https://github.com/drone/jkl\" target=\"_blank\" rel=\"noopener\">jkl</a></li>\n<li><a href=\"https://github.com/dchest/kkr\" target=\"_blank\" rel=\"noopener\">kkr</a></li>\n</ul>\n<p>##1.13  Groovy</p>\n<ul>\n<li><a href=\"http://sysgears.com/grain/\" target=\"_blank\" rel=\"noopener\">Grain</a></li>\n<li><a href=\"https://github.com/fifthposition/rizzo/\" target=\"_blank\" rel=\"noopener\">Rizzo</a></li>\n</ul>\n<p>##1.14  Haskell</p>\n<ul>\n<li><a href=\"http://jaspervdj.be/hakyll/\" target=\"_blank\" rel=\"noopener\">Hakyll</a></li>\n<li><a href=\"https://github.com/jgm/yst\" target=\"_blank\" rel=\"noopener\">yst</a></li>\n</ul>\n<p>##1.15  Java</p>\n<ul>\n<li><a href=\"http://fmpp.sourceforge.net/\" target=\"_blank\" rel=\"noopener\">FMPP</a></li>\n<li><a href=\"http://jbake.org/\" target=\"_blank\" rel=\"noopener\">JBake</a></li>\n<li><a href=\"https://github.com/wiztools/stagen\" target=\"_blank\" rel=\"noopener\">StaGen</a></li>\n</ul>\n<p>##1.16  Language Agnostic</p>\n<ul>\n<li><a href=\"http://hammerformac.com/\" target=\"_blank\" rel=\"noopener\">Hammer</a></li>\n<li><a href=\"http://livereload.com/\" target=\"_blank\" rel=\"noopener\">LiveReload</a></li>\n<li><a href=\"http://mixture.io/\" target=\"_blank\" rel=\"noopener\">Mixture</a></li>\n<li><a href=\"http://sitebuilder.codeplex.com/\" target=\"_blank\" rel=\"noopener\">Site builder console</a></li>\n<li><a href=\"https://staticmate.com/\" target=\"_blank\" rel=\"noopener\">StaticMate</a></li>\n<li><a href=\"https://github.com/vim-scripts/vimwiki\" target=\"_blank\" rel=\"noopener\">vimwiki</a></li>\n</ul>\n<p>##1.17  Lua</p>\n<ul>\n<li><a href=\"https://github.com/Fizzadar/Luapress\" target=\"_blank\" rel=\"noopener\">Luapress</a></li>\n</ul>\n<p>##1.18  Nimrod</p>\n<ul>\n<li><a href=\"https://github.com/dom96/ipsumgenera\" target=\"_blank\" rel=\"noopener\">ipsum genera</a></li>\n</ul>\n<p>##1.19  Node.js</p>\n<ul>\n<li><a href=\"https://github.com/antwarjs/antwar\" target=\"_blank\" rel=\"noopener\">antwar</a></li>\n<li><a href=\"https://github.com/modparadigm/apto\" target=\"_blank\" rel=\"noopener\">Apto</a></li>\n<li><a href=\"http://assemble.io\" target=\"_blank\" rel=\"noopener\">Assemble</a></li>\n<li><a href=\"http://indigounited.com/automaton/\" target=\"_blank\" rel=\"noopener\">Automaton</a></li>\n<li><a href=\"https://npmjs.org/package/bam\" target=\"_blank\" rel=\"noopener\">BAM</a></li>\n<li><a href=\"https://github.com/flatiron/blacksmith/\" target=\"_blank\" rel=\"noopener\">blacksmith</a></li>\n<li><a href=\"https://github.com/stackoverflow/blode\" target=\"_blank\" rel=\"noopener\">Blode</a></li>\n<li><a href=\"https://github.com/pvorb/node-bread\" target=\"_blank\" rel=\"noopener\">bread</a></li>\n<li><a href=\"http://broccoli-taco.com/\" target=\"_blank\" rel=\"noopener\">Broccoli Taco</a></li>\n<li><a href=\"http://brunch.io/\" target=\"_blank\" rel=\"noopener\">Brunch</a></li>\n<li><a href=\"http://www.cabinjs.com/\" target=\"_blank\" rel=\"noopener\">Cabin</a></li>\n<li><a href=\"https://github.com/cdmedia/cms.js\" target=\"_blank\" rel=\"noopener\">CMS.js</a></li>\n<li><a href=\"https://github.com/logicalparadox/codex\" target=\"_blank\" rel=\"noopener\">Codex</a></li>\n<li><a href=\"https://github.com/braziljs/conf-boilerplate\" target=\"_blank\" rel=\"noopener\">Conf-Boilerplate</a> (For Conference and Events)</li>\n<li><a href=\"http://derbyjs.com/\" target=\"_blank\" rel=\"noopener\">Derby</a></li>\n<li><a href=\"https://github.com/bevry/docpad\" target=\"_blank\" rel=\"noopener\">DocPad</a></li>\n<li><a href=\"https://github.com/easystatic/easystatic\" target=\"_blank\" rel=\"noopener\">Easystatic</a></li>\n<li><a href=\"https://github.com/fortes/enfield\" target=\"_blank\" rel=\"noopener\">Enfield</a></li>\n<li><a href=\"https://github.com/thibaultCha/Equiprose\" target=\"_blank\" rel=\"noopener\">Equiprose</a></li>\n<li><a href=\"https://github.com/alexmingoia/gabby\" target=\"_blank\" rel=\"noopener\">Gabby</a></li>\n<li><a href=\"https://github.com/yeoman/generator-gulp-webapp\" target=\"_blank\" rel=\"noopener\">generator-gulp-webapp</a></li>\n<li><a href=\"http://forge.synthmedia.co.uk/genesis/\" target=\"_blank\" rel=\"noopener\">Genesis</a></li>\n<li><a href=\"https://github.com/mixu/ghost-render\" target=\"_blank\" rel=\"noopener\">ghost-render</a></li>\n<li><a href=\"https://github.com/colynb/generator-go-static\" target=\"_blank\" rel=\"noopener\">Go-Static!</a></li>\n<li><a href=\"http://gruntjs.com/\" target=\"_blank\" rel=\"noopener\">Grunt</a></li>\n<li><a href=\"http://tsvensen.github.io/GruntStart/\" target=\"_blank\" rel=\"noopener\">GruntStart</a></li>\n<li><a href=\"https://github.com/tvooo/grunt-bear\" target=\"_blank\" rel=\"noopener\">grunt-bear</a></li>\n<li><a href=\"https://github.com/TxSSC/grunt-carpenter\" target=\"_blank\" rel=\"noopener\">Grunt-Carpenter</a></li>\n<li><a href=\"https://github.com/aaaristo/grunt-html-builder\" target=\"_blank\" rel=\"noopener\">grunt-html-builder</a></li>\n<li><a href=\"https://github.com/cambridge-healthcare/grunt-stencil\" target=\"_blank\" rel=\"noopener\">grunt-stencil</a></li>\n<li><a href=\"https://github.com/paulwib/gulp-ssg\" target=\"_blank\" rel=\"noopener\">gulp-ssg</a></li>\n<li><a href=\"https://github.com/es6rocks/harmonic\" target=\"_blank\" rel=\"noopener\">Harmonic</a></li>\n<li><a href=\"http://harpjs.com\" target=\"_blank\" rel=\"noopener\">Harp</a></li>\n<li><a href=\"http://macwright.org/heckle/\" target=\"_blank\" rel=\"noopener\">Heckle</a></li>\n<li><a href=\"https://github.com/tommy351/hexo\" target=\"_blank\" rel=\"noopener\">Hexo</a></li>\n<li><a href=\"http://hood.ie/\" target=\"_blank\" rel=\"noopener\">Hoodie</a></li>\n<li><a href=\"https://github.com/rfunduk/jen\" target=\"_blank\" rel=\"noopener\">jen</a></li>\n<li><a href=\"http://zohooo.github.io/jekyde/\" target=\"_blank\" rel=\"noopener\">Jekyde</a></li>\n<li><a href=\"https://github.com/jonsherrard/jott\" target=\"_blank\" rel=\"noopener\">Jott</a></li>\n<li><a href=\"https://github.com/koostudios/kel\" target=\"_blank\" rel=\"noopener\">Kel</a></li>\n<li><a href=\"https://github.com/jaredhanson/kerouac\" target=\"_blank\" rel=\"noopener\">Kerouac</a></li>\n<li><a href=\"https://github.com/testdouble/lineman\" target=\"_blank\" rel=\"noopener\">Lineman</a></li>\n<li><a href=\"https://github.com/jpettersson/lingon\" target=\"_blank\" rel=\"noopener\">Lingon</a></li>\n<li><a href=\"https://github.com/walmartlabs/lumbar\" target=\"_blank\" rel=\"noopener\">Lumbar</a></li>\n<li><a href=\"https://github.com/mixu/markdown-styles\" target=\"_blank\" rel=\"noopener\">markdown-styles</a></li>\n<li><a href=\"https://github.com/jgallen23/markx\" target=\"_blank\" rel=\"noopener\">markx</a></li>\n<li><a href=\"http://www.metalsmith.io/\" target=\"_blank\" rel=\"noopener\">Metalsmith</a></li>\n<li><a href=\"http://mimosajs.com/\" target=\"_blank\" rel=\"noopener\">Mimosa</a></li>\n<li><a href=\"http://modulejs.github.io/modjs/\" target=\"_blank\" rel=\"noopener\">Modjs</a></li>\n<li><a href=\"https://github.com/anupshinde/nirman\" target=\"_blank\" rel=\"noopener\">Nirman</a></li>\n<li><a href=\"http://lab.lepture.com/nico/\" target=\"_blank\" rel=\"noopener\">Nico</a></li>\n<li><a href=\"https://github.com/creationix/node-blog\" target=\"_blank\" rel=\"noopener\">node-blog</a></li>\n<li><a href=\"https://github.com/wangbus/node-jekyll\" target=\"_blank\" rel=\"noopener\">node-jekyll</a></li>\n<li><a href=\"https://github.com/the-grid/noflo-jekyll\" target=\"_blank\" rel=\"noopener\">noflo-jekyll</a></li>\n<li><a href=\"https://github.com/c9/nog\" target=\"_blank\" rel=\"noopener\">Nog</a></li>\n<li><a href=\"https://github.com/jawerty/pagen\" target=\"_blank\" rel=\"noopener\">pagen</a></li>\n<li><a href=\"https://github.com/caolan/petrify\" target=\"_blank\" rel=\"noopener\">Petrify</a></li>\n<li><a href=\"https://phenomic.io/\" target=\"_blank\" rel=\"noopener\">Phenomic</a></li>\n<li><a href=\"http://jsantell.github.io/poet/\" target=\"_blank\" rel=\"noopener\">Poet</a></li>\n<li><a href=\"https://github.com/alexyoung/pop\" target=\"_blank\" rel=\"noopener\">Pop</a></li>\n<li><a href=\"https://github.com/thegreatsunra/propeller\" target=\"_blank\" rel=\"noopener\">Propeller</a></li>\n<li><a href=\"https://github.com/laktek/punch\" target=\"_blank\" rel=\"noopener\">Punch</a></li>\n<li><a href=\"https://github.com/shanewholloway/node-qssg\" target=\"_blank\" rel=\"noopener\">Qabex</a></li>\n<li><a href=\"https://github.com/tjvantoll/quick-start-template\" target=\"_blank\" rel=\"noopener\">Quick Start Guide Template</a></li>\n<li><a href=\"https://npmjs.org/package/quill\" target=\"_blank\" rel=\"noopener\">Quill</a></li>\n<li><a href=\"https://github.com/BradDenver/react-static-site\" target=\"_blank\" rel=\"noopener\">React Static Site</a></li>\n<li><a href=\"http://jxnblk.com/writing/posts/static-site-generation-with-react-and-webpack/\" target=\"_blank\" rel=\"noopener\">React + Webpack</a></li>\n<li><a href=\"https://github.com/felixge/node-romulus\" target=\"_blank\" rel=\"noopener\">romulus</a></li>\n<li><a href=\"http://roots.cx/\" target=\"_blank\" rel=\"noopener\">roots</a></li>\n<li><a href=\"https://github.com/wesleytodd/rufio\" target=\"_blank\" rel=\"noopener\">Rufio</a></li>\n<li><a href=\"https://surge.sh/\" target=\"_blank\" rel=\"noopener\">Surge</a></li>\n<li><a href=\"https://github.com/techwraith/scotch\" target=\"_blank\" rel=\"noopener\">Scotch</a></li>\n<li><a href=\"https://github.com/fians/situs\" target=\"_blank\" rel=\"noopener\">Situs</a></li>\n<li><a href=\"https://github.com/harsha-mudi/squareboy\" target=\"_blank\" rel=\"noopener\">squareboy</a></li>\n<li><a href=\"https://github.com/kriasoft/static-site-starter\" target=\"_blank\" rel=\"noopener\">Static Site Starter Kit</a></li>\n<li><a href=\"https://github.com/ff0000/statix\" target=\"_blank\" rel=\"noopener\">Statix</a></li>\n<li><a href=\"https://github.com/AVGP/susi\" target=\"_blank\" rel=\"noopener\">SuSi</a></li>\n<li><a href=\"https://github.com/ido50/Szyslak\" target=\"_blank\" rel=\"noopener\">Szyslak</a></li>\n<li><a href=\"http://krasimir.github.io/techy/\" target=\"_blank\" rel=\"noopener\">Techy</a></li>\n<li><a href=\"https://github.com/rprieto/thumbsup\" target=\"_blank\" rel=\"noopener\">thumbsup</a></li>\n<li><a href=\"http://volojs.org/\" target=\"_blank\" rel=\"noopener\">volo</a></li>\n<li><a href=\"https://github.com/wprl/wainwright\" target=\"_blank\" rel=\"noopener\">wainwright</a></li>\n<li><a href=\"https://github.com/shaoshuai0102/wanna\" target=\"_blank\" rel=\"noopener\">Wanna</a></li>\n<li><a href=\"https://github.com/creationix/wheat\" target=\"_blank\" rel=\"noopener\">Wheat</a></li>\n<li><a href=\"http://www.wikismith.com/\" target=\"_blank\" rel=\"noopener\">Wikismith</a></li>\n<li><a href=\"http://jnordberg.github.io/wintersmith/\" target=\"_blank\" rel=\"noopener\">Wintersmith</a></li>\n<li><a href=\"https://github.com/studiomoniker/woods\" target=\"_blank\" rel=\"noopener\">Woods</a></li>\n<li><a href=\"https://npmjs.org/package/yassg\" target=\"_blank\" rel=\"noopener\">yassg</a></li>\n<li><a href=\"http://yeoman.io/\" target=\"_blank\" rel=\"noopener\">Yeoman</a></li>\n</ul>\n<p>##1.20  OCaml</p>\n<ul>\n<li><a href=\"http://zoggy.github.io/stog/\" target=\"_blank\" rel=\"noopener\">Stog</a></li>\n<li><a href=\"http://loup-vaillant.fr/projects/ussm/\" target=\"_blank\" rel=\"noopener\">Ultra Simple Site Maker</a></li>\n</ul>\n<p>##1.21  PHP</p>\n<ul>\n<li><a href=\"https://github.com/billpatrianakos/animal-f\" target=\"_blank\" rel=\"noopener\">Animal</a></li>\n<li><a href=\"https://github.com/sarfraznawaz2005/BloggerCMS\" target=\"_blank\" rel=\"noopener\">BloggerCMS</a></li>\n<li><a href=\"http://carew.github.io/\" target=\"_blank\" rel=\"noopener\">Carew</a></li>\n<li><a href=\"http://couscous.io/\" target=\"_blank\" rel=\"noopener\">Couscous</a></li>\n<li><a href=\"https://github.com/Circa75/dropplets\" target=\"_blank\" rel=\"noopener\">Dropplets</a></li>\n<li><a href=\"http://fansoro.org/\" target=\"_blank\" rel=\"noopener\">Fansoro</a></li>\n<li><a href=\"http://getgrav.org/\" target=\"_blank\" rel=\"noopener\">Grav</a></li>\n<li><a href=\"http://gumdropapp.com/\" target=\"_blank\" rel=\"noopener\">Gumdrop</a></li>\n<li><a href=\"http://www.phrozn.info/en/\" target=\"_blank\" rel=\"noopener\">Phrozn</a></li>\n<li><a href=\"http://bolt80.com/piecrust/\" target=\"_blank\" rel=\"noopener\">PieCrust</a></li>\n<li><a href=\"https://github.com/megakote/purepress\" target=\"_blank\" rel=\"noopener\">Purepress</a></li>\n<li><a href=\"http://sculpin.io/\" target=\"_blank\" rel=\"noopener\">Sculpin</a></li>\n<li><a href=\"https://github.com/marcoarment/secondcrack\" target=\"_blank\" rel=\"noopener\">Second Crack</a></li>\n<li><a href=\"https://github.com/maxailloud/SG\" target=\"_blank\" rel=\"noopener\">SG</a></li>\n<li><a href=\"https://github.com/inanimatt/site-builder\" target=\"_blank\" rel=\"noopener\">Site-builder</a></li>\n<li><a href=\"https://github.com/yqtaku/site-maker\" target=\"_blank\" rel=\"noopener\">SiteMaker</a></li>\n<li><a href=\"https://github.com/edvanbeinum/snowshoe\" target=\"_blank\" rel=\"noopener\">Snowshoe</a></li>\n<li><a href=\"https://github.com/yosymfony/Spress\" target=\"_blank\" rel=\"noopener\">Spress</a></li>\n<li><a href=\"https://github.com/kolber/stacey\" target=\"_blank\" rel=\"noopener\">Stacey</a></li>\n<li><a href=\"http://www.statamic.com/\" target=\"_blank\" rel=\"noopener\">Statamic</a></li>\n<li><a href=\"https://github.com/catnapgames/Tempo\" target=\"_blank\" rel=\"noopener\">Tempo</a></li>\n<li><a href=\"http://about.asika.tw/vaseman/\" target=\"_blank\" rel=\"noopener\">Vaseman</a></li>\n<li><a href=\"http://github.com/datenstrom/yellow\" target=\"_blank\" rel=\"noopener\">Yellow</a></li>\n<li><a href=\"https://github.com/alpacaaa/wadoo\" target=\"_blank\" rel=\"noopener\">Wadoo</a></li>\n</ul>\n<p>##1.22  Python</p>\n<ul>\n<li><a href=\"https://github.com/posativ/acrylamid\" target=\"_blank\" rel=\"noopener\">Acrylamid</a></li>\n<li><a href=\"https://bitbucket.org/jek/blatter/\" target=\"_blank\" rel=\"noopener\">Blatter</a></li>\n<li><a href=\"http://www.blogofile.com/\" target=\"_blank\" rel=\"noopener\">Blogofile</a></li>\n<li><a href=\"https://github.com/ipconfiger/blogen\" target=\"_blank\" rel=\"noopener\">Blogen</a></li>\n<li><a href=\"https://github.com/axitkhurana/buster\" target=\"_blank\" rel=\"noopener\">buster</a></li>\n<li><a href=\"http://cactusformac.com/\" target=\"_blank\" rel=\"noopener\">Cactus</a></li>\n<li><a href=\"https://github.com/dz/chisel\" target=\"_blank\" rel=\"noopener\">Chisel</a></li>\n<li><a href=\"https://github.com/lejonet/Cipherpress\" target=\"_blank\" rel=\"noopener\">Cipherpress</a></li>\n<li><a href=\"https://github.com/shazow/composer\" target=\"_blank\" rel=\"noopener\">Composer</a></li>\n<li><a href=\"https://pypi.python.org/pypi/cyrax\" target=\"_blank\" rel=\"noopener\">cyrax</a></li>\n<li><a href=\"https://github.com/mtigas/django-medusa/\" target=\"_blank\" rel=\"noopener\">django-medusa</a></li>\n<li><a href=\"https://github.com/amitu/djangothis/\" target=\"_blank\" rel=\"noopener\">djangothis</a></li>\n<li><a href=\"https://github.com/fallenhitokiri/drupan\" target=\"_blank\" rel=\"noopener\">drupan</a></li>\n<li><a href=\"https://github.com/FSX/elyse\" target=\"_blank\" rel=\"noopener\">Elyse</a></li>\n<li><a href=\"https://github.com/tylerbutler/engineer\" target=\"_blank\" rel=\"noopener\">Engineer</a></li>\n<li><a href=\"http://www.voidspace.org.uk/python/firedrop2/\" target=\"_blank\" rel=\"noopener\">Firedrop2</a></li>\n<li><a href=\"http://dkuntz2.github.io/fjord/\" target=\"_blank\" rel=\"noopener\">fjord</a></li>\n<li><a href=\"https://github.com/nikcub/floyd\" target=\"_blank\" rel=\"noopener\">Floyd</a></li>\n<li><a href=\"http://glyphobet.github.io/fragments/\" target=\"_blank\" rel=\"noopener\">Fragments</a></li>\n<li><a href=\"http://pythonhosted.org/Frozen-Flask/\" target=\"_blank\" rel=\"noopener\">Frozen-Flask</a></li>\n<li><a href=\"https://github.com/teiko/glynn\" target=\"_blank\" rel=\"noopener\">Glynn</a></li>\n<li><a href=\"https://github.com/xfire/growl/\" target=\"_blank\" rel=\"noopener\">growl</a></li>\n<li><a href=\"https://github.com/mhlakhani/halwa\" target=\"_blank\" rel=\"noopener\">Halwa</a></li>\n<li><a href=\"https://pypi.python.org/pypi/handcrank\" target=\"_blank\" rel=\"noopener\">handcrank</a></li>\n<li><a href=\"https://github.com/lakshmivyas/hyde\" target=\"_blank\" rel=\"noopener\">Hyde</a></li>\n<li><a href=\"https://github.com/aconbere/igor\" target=\"_blank\" rel=\"noopener\">Igor</a></li>\n<li><a href=\"http://jinja.pocoo.org/\" target=\"_blank\" rel=\"noopener\">Jinja</a></li>\n<li><a href=\"https://github.com/jokull/jinjet\" target=\"_blank\" rel=\"noopener\">jinjet</a></li>\n<li><a href=\"https://www.getlektor.com/\" target=\"_blank\" rel=\"noopener\">Lektor</a></li>\n<li><a href=\"https://github.com/an0/Letterpress\" target=\"_blank\" rel=\"noopener\">Letterpress</a></li>\n<li><a href=\"https://github.com/borismus/lightning\" target=\"_blank\" rel=\"noopener\">Lightning</a></li>\n<li><a href=\"https://lilac.readthedocs.org/en/latest/index.html\" target=\"_blank\" rel=\"noopener\">lilac</a></li>\n<li><a href=\"https://github.com/yaph/logya\" target=\"_blank\" rel=\"noopener\">Logya</a></li>\n<li><a href=\"http://www.makotemplates.org/\" target=\"_blank\" rel=\"noopener\">Mako</a></li>\n<li><a href=\"https://github.com/myfreeweb/markbox\" target=\"_blank\" rel=\"noopener\">Markbox</a></li>\n<li><a href=\"http://markdoc.org/\" target=\"_blank\" rel=\"noopener\">Markdoc</a></li>\n<li><a href=\"http://www.mkdocs.org/\" target=\"_blank\" rel=\"noopener\">MkDocs</a></li>\n<li><a href=\"http://mynt.mirroredwhite.com/\" target=\"_blank\" rel=\"noopener\">mynt</a></li>\n<li><a href=\"https://github.com/jreese/nib\" target=\"_blank\" rel=\"noopener\">Nib</a></li>\n<li><a href=\"http://nikola.ralsina.com.ar/\" target=\"_blank\" rel=\"noopener\">Nikola</a></li>\n<li><a href=\"http://obraz.pirx.ru/\" target=\"_blank\" rel=\"noopener\">Obraz</a></li>\n<li><a href=\"https://github.com/getpelican/pelican/\" target=\"_blank\" rel=\"noopener\">Pelican</a></li>\n<li><a href=\"http://inky.github.io/pilcrow/\" target=\"_blank\" rel=\"noopener\">PILCROW</a></li>\n<li><a href=\"https://bitbucket.org/obensonne/poole\" target=\"_blank\" rel=\"noopener\">Poole</a></li>\n<li><a href=\"http://pyblosxom.github.io/\" target=\"_blank\" rel=\"noopener\">PyBlosxom</a></li>\n<li><a href=\"http://pykwiki.nullism.com/\" target=\"_blank\" rel=\"noopener\">PyKwiki</a></li>\n<li><a href=\"https://github.com/arthurk/pyll\" target=\"_blank\" rel=\"noopener\">Pyll</a></li>\n<li><a href=\"https://github.com/mitsuhiko/rstblog\" target=\"_blank\" rel=\"noopener\">rstblog</a></li>\n<li><a href=\"http://rtorr.github.io/serious-chicken/\" target=\"_blank\" rel=\"noopener\">Serious Chicken</a></li>\n<li><a href=\"https://github.com/venthur/sg\" target=\"_blank\" rel=\"noopener\">sg</a></li>\n<li><a href=\"http://honza.ca/socrates/\" target=\"_blank\" rel=\"noopener\">Socrates</a></li>\n<li><a href=\"https://github.com/alvesjnr/speechhub\" target=\"_blank\" rel=\"noopener\">Speech Hub</a></li>\n<li><a href=\"http://sphinx-doc.org/\" target=\"_blank\" rel=\"noopener\">Sphinx</a></li>\n<li><a href=\"https://github.com/nickpetty/squirrel\" target=\"_blank\" rel=\"noopener\">Squirrel</a></li>\n<li><a href=\"http://stadoproject.org/\" target=\"_blank\" rel=\"noopener\">Stadø</a></li>\n<li><a href=\"https://github.com/Ceasar/staticjinja\" target=\"_blank\" rel=\"noopener\">staticjinja</a></li>\n<li><a href=\"https://github.com/colinta/StrangeCase\" target=\"_blank\" rel=\"noopener\">StrangeCase</a></li>\n<li><a href=\"https://github.com/rigoneri/syte\" target=\"_blank\" rel=\"noopener\">Syte</a></li>\n<li><a href=\"http://tags.brace.io/\" target=\"_blank\" rel=\"noopener\">Tags</a></li>\n<li><a href=\"https://github.com/sebastien/tahchee\" target=\"_blank\" rel=\"noopener\">tahchee</a></li>\n<li><a href=\"http://tinkerer.me/\" target=\"_blank\" rel=\"noopener\">Tinkerer</a></li>\n<li><a href=\"https://github.com/semk/voldemort\" target=\"_blank\" rel=\"noopener\">Voldemort</a></li>\n<li><a href=\"https://github.com/bow/volt/\" target=\"_blank\" rel=\"noopener\">Volt</a></li>\n<li><a href=\"http://gitorious.org/webber\" target=\"_blank\" rel=\"noopener\">Webber</a></li>\n<li><a href=\"https://github.com/mythmon/wok\" target=\"_blank\" rel=\"noopener\">Wok</a></li>\n</ul>\n<p>##1.23  Racket</p>\n<ul>\n<li><a href=\"https://github.com/greghendershott/frog\" target=\"_blank\" rel=\"noopener\">Frog</a></li>\n</ul>\n<p>##1.24  Ruby</p>\n<ul>\n<li><a href=\"https://github.com/botanicus/ace\" target=\"_blank\" rel=\"noopener\">Ace</a></li>\n<li><a href=\"http://tinytree.info/\" target=\"_blank\" rel=\"noopener\">Bonsai</a></li>\n<li><a href=\"https://github.com/sstephenson/brochure\" target=\"_blank\" rel=\"noopener\">Brochure</a></li>\n<li><a href=\"https://github.com/cdn64/deplot\" target=\"_blank\" rel=\"noopener\">deplot</a></li>\n<li><a href=\"https://github.com/nex3/dynamicmatic\" target=\"_blank\" rel=\"noopener\">DynamicMatic</a></li>\n<li><a href=\"https://github.com/46Bit/fairytale\" target=\"_blank\" rel=\"noopener\">Fairytale</a></li>\n<li><a href=\"https://github.com/blahed/frank\" target=\"_blank\" rel=\"noopener\">Frank</a></li>\n<li><a href=\"https://github.com/dreverri/gollum-site\" target=\"_blank\" rel=\"noopener\">gollum-site</a></li>\n<li><a href=\"https://github.com/owainlewis/gravity\" target=\"_blank\" rel=\"noopener\">Gravity</a></li>\n<li><a href=\"https://github.com/thoughtbot/high_voltage\" target=\"_blank\" rel=\"noopener\">High Voltage</a></li>\n<li><a href=\"http://hobix.github.io/hobix/\" target=\"_blank\" rel=\"noopener\">hobix</a></li>\n<li><a href=\"https://github.com/hobix/hobix/\" target=\"_blank\" rel=\"noopener\">Hobix</a></li>\n<li><a href=\"https://github.com/mojombo/jekyll\" target=\"_blank\" rel=\"noopener\">Jekyll</a></li>\n<li><a href=\"https://github.com/sandal/korma\" target=\"_blank\" rel=\"noopener\">korma</a></li>\n<li><a href=\"http://avdgaag.github.io/laze/\" target=\"_blank\" rel=\"noopener\">Laze</a></li>\n<li><a href=\"https://github.com/petebrowne/machined\" target=\"_blank\" rel=\"noopener\">Machined</a></li>\n<li><a href=\"https://github.com/donmelton/magneto\" target=\"_blank\" rel=\"noopener\">Magneto</a></li>\n<li><a href=\"https://github.com/petebrowne/massimo\" target=\"_blank\" rel=\"noopener\">Massimo</a></li>\n<li><a href=\"http://middlemanapp.com/\" target=\"_blank\" rel=\"noopener\">Middleman</a></li>\n<li><a href=\"https://github.com/lucaong/Moka\" target=\"_blank\" rel=\"noopener\">Moka</a></li>\n<li><a href=\"http://nanoc.ws/\" target=\"_blank\" rel=\"noopener\">Nanoc</a></li>\n<li><a href=\"http://nestacms.com/\" target=\"_blank\" rel=\"noopener\">NestaCMS</a></li>\n<li><a href=\"http://octopress.org/\" target=\"_blank\" rel=\"noopener\">Octopress</a></li>\n<li><a href=\"https://github.com/mdub/pith\" target=\"_blank\" rel=\"noopener\">Pith</a></li>\n<li><a href=\"http://rubyforge.org/projects/rakeweb/\" target=\"_blank\" rel=\"noopener\">Rakeweb</a></li>\n<li><a href=\"http://snk.tuxfamily.org/lib/rassmalog/doc/guide.html\" target=\"_blank\" rel=\"noopener\">Rassmalog</a></li>\n<li><a href=\"http://rog.rubyforge.org/\" target=\"_blank\" rel=\"noopener\">Rog</a></li>\n<li><a href=\"http://rote.rubyforge.org/\" target=\"_blank\" rel=\"noopener\">rote</a></li>\n<li><a href=\"http://www.apeth.com/RubyFrontierDocs/default.html\" target=\"_blank\" rel=\"noopener\">RubyFrontier</a></li>\n<li><a href=\"http://ruhoh.com/\" target=\"_blank\" rel=\"noopener\">Ruhoh</a></li>\n<li><a href=\"https://github.com/aprescott/serif\" target=\"_blank\" rel=\"noopener\">Serif</a></li>\n<li><a href=\"http://get-serve.com/\" target=\"_blank\" rel=\"noopener\">Serve</a></li>\n<li><a href=\"https://github.com/rubyworks/shelob\" target=\"_blank\" rel=\"noopener\">Shelob</a></li>\n<li><a href=\"http://stasis.me/\" target=\"_blank\" rel=\"noopener\">stasis</a></li>\n<li><a href=\"https://github.com/mindeavor/staticmatic2\" target=\"_blank\" rel=\"noopener\">StaticMatic 2</a></li>\n<li><a href=\"http://rubyforge.org/projects/staticmatic/\" target=\"_blank\" rel=\"noopener\">StaticMatic</a></li>\n<li><a href=\"http://staticweb.rubyforge.org/\" target=\"_blank\" rel=\"noopener\">StaticWeb</a></li>\n<li><a href=\"https://github.com/swaroopsm/striker\" target=\"_blank\" rel=\"noopener\">Striker</a></li>\n<li><a href=\"https://github.com/cloudhead/toto\" target=\"_blank\" rel=\"noopener\">toto</a></li>\n<li><a href=\"http://webby.rubyforge.org/\" target=\"_blank\" rel=\"noopener\">Webby</a></li>\n<li><a href=\"http://webgen.rubyforge.org/\" target=\"_blank\" rel=\"noopener\">webgen</a></li>\n<li><a href=\"http://yurtcms.roberthahn.ca/\" target=\"_blank\" rel=\"noopener\">Yurt CMS</a></li>\n<li><a href=\"http://www.zenspider.com/projects/zenweb.html\" target=\"_blank\" rel=\"noopener\">zenweb</a></li>\n<li><a href=\"http://awestruct.org/\" target=\"_blank\" rel=\"noopener\">{ :awestruct }</a></li>\n</ul>\n<p>##1.25  Scala</p>\n<ul>\n<li><a href=\"https://github.com/wspringer/monkeyman\" target=\"_blank\" rel=\"noopener\">monkeyman</a></li>\n<li><a href=\"https://github.com/scalate/scalate\" target=\"_blank\" rel=\"noopener\">Scalate</a></li>\n</ul>\n<p>##1.26  Scheme</p>\n<ul>\n<li><a href=\"http://wiki.call-cc.org/eggref/4/hyde\" target=\"_blank\" rel=\"noopener\">Hyde</a></li>\n</ul>\n<p>##1.27  Shell</p>\n<ul>\n<li><a href=\"https://github.com/Jack000/Expose\" target=\"_blank\" rel=\"noopener\">Exposé</a></li>\n<li><a href=\"https://gitorious.org/fugitive\" target=\"_blank\" rel=\"noopener\">fugitive</a></li>\n<li><a href=\"https://github.com/wlangstroth/simple-static\" target=\"_blank\" rel=\"noopener\">simple-static</a></li>\n<li><a href=\"https://github.com/jroimartin/sw\" target=\"_blank\" rel=\"noopener\">sw</a></li>\n<li><a href=\"https://github.com/stef/utterson\" target=\"_blank\" rel=\"noopener\">Utterson</a></li>\n<li><a href=\"http://www.0x743.com/vee/\" target=\"_blank\" rel=\"noopener\">Vee</a></li>\n<li><a href=\"http://werc.cat-v.org/\" target=\"_blank\" rel=\"noopener\">werc</a></li>\n</ul>\n<p>##1.28  Tcl</p>\n<ul>\n<li><a href=\"https://github.com/dbohdan/tclssg\" target=\"_blank\" rel=\"noopener\">Tclssg</a></li>\n</ul>\n<p>#2  For Help</p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">WebSite</th>\n<th style=\"text-align:center\">Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\"><a href=\"https://staticsitegenerators.net\" target=\"_blank\" rel=\"noopener\">Static Site Generators</a></td>\n<td style=\"text-align:center\">Static Site Generators<br><br>The definitive listing of Static Site Generators — all 437 of them!</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><a href=\"https://disqus.com/admin/signup\" target=\"_blank\" rel=\"noopener\">Disqus</a></td>\n<td style=\"text-align:center\">The #1 way to build your audience<br><br>Disqus offers the best add-on tools for site owners to power discussions, increase engagement, and earn revenue.<br> Please don’t forget your Shortname</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><a href=\"http://www.google.com/analytics\" target=\"_blank\" rel=\"noopener\">Google Analytics</a></td>\n<td style=\"text-align:center\">Get stronger results across all your sites, apps and offline channels. Google’s analytics solutions help you turn customer insights into real gains.</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><a href=\"http://www.google.com/webmasters\" target=\"_blank\" rel=\"noopener\">Google Webmasters</a></td>\n<td style=\"text-align:center\">Track your site’s search performance with Google Search Console and browse around for more webmaster resources.</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><a href=\"https://www.godaddy.com/\" target=\"_blank\" rel=\"noopener\">Godaddy</a></td>\n<td style=\"text-align:center\">Get a free domain with a website from GoDaddy.</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><a href=\"https://www.dnspod.cn/\" target=\"_blank\" rel=\"noopener\">Dnspod</a></td>\n<td style=\"text-align:center\">DNS resolution service, add a new domain name, and apply a Github Pages A record points to the ip: 207.97.227.245</td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"3-About-This-Site\"><a href=\"#3-About-This-Site\" class=\"headerlink\" title=\"#3    About This Site\"></a>#3    About This Site</h2><p>Our Site is based on Pelican(Python)</p>\n"},{"title":"cmatrix","date":"2018-08-05T06:38:00.000Z","author":"gatieme","thumbnail":null,"blogexcerpt":"cmatrix","_content":"\n\n```c\nsudo apt install cmatrix\n```\n\n![cmatrix](images/2018/08/002-cmatrix.jpg)\n","source":"_posts/2018/08/0002_cmatrix.md","raw":"---\ntitle: cmatrix\ndate: 2018-08-05 14:38\ntags: linux\nauthor: gatieme\ncategories:\n        - linux\nthumbnail:\nblogexcerpt: cmatrix\n\n---\n\n\n```c\nsudo apt install cmatrix\n```\n\n![cmatrix](images/2018/08/002-cmatrix.jpg)\n","slug":"2018/08/0002_cmatrix","published":1,"updated":"2018-08-05T08:33:44.370Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjmgbtjd20005n8oz6m4ntpo1","content":"<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo apt install cmatrix</span><br></pre></td></tr></table></figure>\n<p><img src=\"images/2018/08/002-cmatrix.jpg\" alt=\"cmatrix\"></p>\n","site":{"data":{}},"excerpt":"","more":"<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo apt install cmatrix</span><br></pre></td></tr></table></figure>\n<p><img src=\"images/2018/08/002-cmatrix.jpg\" alt=\"cmatrix\"></p>\n"},{"title":"使用 Hexo 搭建 GitHub Page 博客(一)","date":"2018-09-02T10:40:00.000Z","author":"gatieme","thumbnail":null,"blogexcerpt":"Hexo 是一个快速、简洁且高效的博客框架. 支持使用 Markdown (或其他渲染引擎)解析文章. Hexo 生成静态网页的素服非常快, 在几秒内，即可利用靓丽的主题生成静态网页. 本文将介绍如果使用 Hexo 来搭建属于你自己的 Github Page 博客","_content":"\n| CSDN | GitHub | Hexo |\n|:----:|:------:|:----:|\n| [使用 Hexo 搭建 GitHub Page 博客(一)](https://blog.csdn.net/gatieme/article/details/82317681) | [`AderXCoding/blob/master/system/tools/hexo/01-use_hexo`](https://github.com/gatieme/AderXCoding/blob/master/system/tools/hexo/01-use_hexo) | [gatieme.github.io/2018/09/0001-use_hexo_to_build_your_github_page_blog](https://gatieme.github.io/2018/09/02/2018/09/0001-use_hexo_to_build_your_github_page_blog/) |\n<br>\n\n<a rel=\"license\" href=\"http://creativecommons.org/licenses/by-nc-sa/4.0/\"><img alt=\"知识共享许可协议\" style=\"border-width:0\" src=\"https://i.creativecommons.org/l/by-nc-sa/4.0/88x31.png\" /></a>\n\n本作品采用<a rel=\"license\" href=\"http://creativecommons.org/licenses/by-nc-sa/4.0/\">知识共享署名-非商业性使用-相同方式共享 4.0 国际许可协议</a>进行许可, 转载请注明出处, 谢谢合作\n\n因本人技术水平和知识面有限, 内容如有纰漏或者需要修正的地方, 欢迎大家指正, 也欢迎大家提供一些其他好的调试工具以供收录, 鄙人在此谢谢啦\n\n<br>\n\n#1  Hexo 简介\n-------\n\n`Hexo` 是一个快速、简洁且高效的博客框架.\n\n*   `Hexo` 支持使用 `Markdown`(或其他渲染引擎)解析文章.\n\n*   `Hexo` 生成静态网页的素服非常快, 在几秒内，即可利用靓丽的主题生成静态网页.\n\n*   `Hexo` 用户量非常庞大, 有很多资料和主题可供参考和选择, 非常适配我这种前端技能几乎为 `0` 的宅男.\n\n[`StaticSiteGenerators`](https://staticsitegenerators.net/) 网站收集整理的开源的静态网站生成器, 按照编程语言进行分类, 每个分类按照 `Star` 数进行排序. 可以看到 `Hexo` 的热度、`Star` 数量和更新支持情况都排在前三的.\n\n[`Hexo Doc`](https://hexo.io/zh-cn/docs/) 也有详细的帮助文档方便我们使用.\n\n\n#2  搭建 `Hexo` 环境\n-------\n\n##2.1 依赖环境\n------- \n\n环境搭建：\n\nNode.js：[下载地址](https://nodejs.org/)\nGit：[下载地址](https://gitforwindows.org/)\nmarkdown 编辑器 : [Sublime](http://www.sublimetext.com) 或者 [markdownpad](http://markdownpad.com/)\n\n\n##2.2   安装 Hexo\n-------\n\n安装了 `Node.js` 之后, 我们就可以使用 `NPM`. `NPM` 是随同 `NodeJS` 一起安装的包管理工具, 能解决 `NodeJS` 代码部署上的很多问题.\n\n```cpp\nnpm install -g hexo\n```\n\n##2.3   配置 `Hexo` 博客环境\n-------\n\n\n初始化博客\n\n\n```cpp\nhexo init blog\n```\n\n安装依赖库, 安装完成后, 将在 `blog` 目录下配置好生成静态博客的环境\n\n\n```cpp\ncd blog\nnpm install\n```\n\n生成静态网页\n\n\n*   hexo generate (hexo g) 生成静态文件，会在当前目录下生成一个新的叫做public的文件夹/\n\n*   hexo server (hexo s) 启动本地web服务，用于博客的预览\n\n*   hexo deploy (hexo d)   部署播客到远端（比如github, heroku等平台）\n\n\n\n可以在 [http://localhost:4000/](http://localhost:4000/) 查看\n\n\n##2.4    配置主题\n-------\n\n[`Hexo Themes`](https://hexo.io/themes/) 官网收录了很多主题. 我本人挑选了 [`Xups`](http://jelon.top/)\n\n![xups_theme](https://github.com/gatieme/AderXCoding/blob/master/system/tools/hexo/01-use_hexo/01-xups_theme.png)\n\n\n\n#3  Github Pages设置\n-------\n\n##3.1   Github Pages 简介\n-------\n\n`GitHub Pages` 是 `GitHub` 为用户提供的免费空间免费稳定, 用来做搭建一个博客再好不过了.\n\n每个帐号只能有一个仓库来存放个人主页, 而且仓库的名字必须是 `username/username.github.io`, 这是特殊的命名约定. 你可以通过 `http://username.github.io` 来访问你的个人主页.\n\n这里特别提醒一下, 需要注意的**个人主页的网站内容是在 `master` 分支下的**.\n\n\n##3.2   创建自己的 `Github Pages`\n-------\n\n注册及使用 `Github  Pages` 的过程并不是本文的重点, 这部分内容有很多资源, 在此不再详述, 可以参考 :\n\n>[如何搭建一个独立博客——简明Github Pages与Hexo教程](http://www.jianshu.com/p/05289a4bc8b2)\n>\n>[使用GitHub pages 搭建一个心仪的个人博客](https://blog.csdn.net/xudailong_blog/article/details/78762262)\n>\n>[搭建 Github Pages 个人博客网站](https://blog.csdn.net/KNIGH_YUN/article/details/79774344)\n>\n>[利用github-pages建立个人博客\n](https://blog.csdn.net/garfielder007/article/details/50224761)\n>\n>[傻瓜都可以利用github pages建博客\n](https://www.jianshu.com/p/d658ba3b4351)\n\n在这里我创建了一个 `github repo` 叫做 [`gatieme.github.io`](https://github.com/gatieme/gatieme.github.io) 创建完成之后, 需要有一次提交(`git commit`)操作, 然后就可以通过链接 [https://gatieme.github.io](https://gatieme.github.io/)访问了.\n\n##3.3   部署Hexo到Github Pages\n-------\n\n下面我们就需要把本地 `web` 环境下预览到的博客部署到 `github` 上, 然后就可以直接通过 `http://gatieme.github.io` 访问了. \n\n\n1.  之前 `Github` 上创建的那个 `repo` 的 `master` 分支就用来存储中我们博客生成的 `html` 静态文件, 可以通过链接 [`https://gatieme.github.io`](https://gatieme.github.io) 来直接访问.\n\n2.  那我们 `Hexo` 就是用来生成这些静态网页的, `Hexo -g` 会生成一个静态网站(`public` 目录下), 这个静态文件可以直接访问. 我们只需要将 `hexo` 生成的静态网站, 提交(`git commit`)到 `github` 上那个 `repo` 的 `master` 分支即可.\n\n##3.4   使用 `hexo deploy` 部署\n-------\n\n```\n# Deployment\n## Docs: https://hexo.io/docs/deployment.html\ndeploy:\n  type: git\n  repo: git@github.com:gatieme/gatieme.github.io.git\n  branch: master\n```\n\n然后在命令行中执行\n\n```cpp\nhexo d\n```\n\n即可完成部署.\n\n#4  参考资料\n-------\n\n\n[使用Hexo + Github Pages搭建个人独立博客](https://www.cnblogs.com/dushao/p/5999593.html)\n\n\n[hexo干货系列：（四）将hexo博客同时托管到github和coding](https://www.cnblogs.com/tengj/p/5352572.html)\n\n\n[Hexo，创建属于你自己的博客](https://blog.csdn.net/tianbo_zhang/article/details/79137103)\n\n\n\n<br>\n\n*\t本作品/博文 ( [AderStep-紫夜阑珊-青伶巷草 Copyright ©2013-2017](http://blog.csdn.net/gatieme) ), 由 [成坚(gatieme)](http://blog.csdn.net/gatieme) 创作.\n\n*\t采用<a rel=\"license\" href=\"http://creativecommons.org/licenses/by-nc-sa/4.0/\"><img alt=\"知识共享许可协议\" style=\"border-width:0\" src=\"https://i.creativecommons.org/l/by-nc-sa/4.0/88x31.png\" /></a><a rel=\"license\" href=\"http://creativecommons.org/licenses/by-nc-sa/4.0/\">知识共享署名-非商业性使用-相同方式共享 4.0 国际许可协议</a>进行许可. 欢迎转载、使用、重新发布, 但务必保留文章署名[成坚gatieme](http://blog.csdn.net/gatieme) ( 包含链接: http://blog.csdn.net/gatieme ), 不得用于商业目的. \n\n*\t基于本文修改后的作品务必以相同的许可发布. 如有任何疑问，请与我联系.\n","source":"_posts/2018/09/0001-use_hexo_to_build_your_github_page_blog.md","raw":"---\n\ntitle: 使用 Hexo 搭建 GitHub Page 博客(一)\ndate: 2018-09-02 18:40\nauthor: gatieme\ntags: hexo\ncategories:\n        - hexo\nthumbnail: \nblogexcerpt: Hexo 是一个快速、简洁且高效的博客框架. 支持使用 Markdown (或其他渲染引擎)解析文章. Hexo 生成静态网页的素服非常快, 在几秒内，即可利用靓丽的主题生成静态网页. 本文将介绍如果使用 Hexo 来搭建属于你自己的 Github Page 博客\n\n---\n\n| CSDN | GitHub | Hexo |\n|:----:|:------:|:----:|\n| [使用 Hexo 搭建 GitHub Page 博客(一)](https://blog.csdn.net/gatieme/article/details/82317681) | [`AderXCoding/blob/master/system/tools/hexo/01-use_hexo`](https://github.com/gatieme/AderXCoding/blob/master/system/tools/hexo/01-use_hexo) | [gatieme.github.io/2018/09/0001-use_hexo_to_build_your_github_page_blog](https://gatieme.github.io/2018/09/02/2018/09/0001-use_hexo_to_build_your_github_page_blog/) |\n<br>\n\n<a rel=\"license\" href=\"http://creativecommons.org/licenses/by-nc-sa/4.0/\"><img alt=\"知识共享许可协议\" style=\"border-width:0\" src=\"https://i.creativecommons.org/l/by-nc-sa/4.0/88x31.png\" /></a>\n\n本作品采用<a rel=\"license\" href=\"http://creativecommons.org/licenses/by-nc-sa/4.0/\">知识共享署名-非商业性使用-相同方式共享 4.0 国际许可协议</a>进行许可, 转载请注明出处, 谢谢合作\n\n因本人技术水平和知识面有限, 内容如有纰漏或者需要修正的地方, 欢迎大家指正, 也欢迎大家提供一些其他好的调试工具以供收录, 鄙人在此谢谢啦\n\n<br>\n\n#1  Hexo 简介\n-------\n\n`Hexo` 是一个快速、简洁且高效的博客框架.\n\n*   `Hexo` 支持使用 `Markdown`(或其他渲染引擎)解析文章.\n\n*   `Hexo` 生成静态网页的素服非常快, 在几秒内，即可利用靓丽的主题生成静态网页.\n\n*   `Hexo` 用户量非常庞大, 有很多资料和主题可供参考和选择, 非常适配我这种前端技能几乎为 `0` 的宅男.\n\n[`StaticSiteGenerators`](https://staticsitegenerators.net/) 网站收集整理的开源的静态网站生成器, 按照编程语言进行分类, 每个分类按照 `Star` 数进行排序. 可以看到 `Hexo` 的热度、`Star` 数量和更新支持情况都排在前三的.\n\n[`Hexo Doc`](https://hexo.io/zh-cn/docs/) 也有详细的帮助文档方便我们使用.\n\n\n#2  搭建 `Hexo` 环境\n-------\n\n##2.1 依赖环境\n------- \n\n环境搭建：\n\nNode.js：[下载地址](https://nodejs.org/)\nGit：[下载地址](https://gitforwindows.org/)\nmarkdown 编辑器 : [Sublime](http://www.sublimetext.com) 或者 [markdownpad](http://markdownpad.com/)\n\n\n##2.2   安装 Hexo\n-------\n\n安装了 `Node.js` 之后, 我们就可以使用 `NPM`. `NPM` 是随同 `NodeJS` 一起安装的包管理工具, 能解决 `NodeJS` 代码部署上的很多问题.\n\n```cpp\nnpm install -g hexo\n```\n\n##2.3   配置 `Hexo` 博客环境\n-------\n\n\n初始化博客\n\n\n```cpp\nhexo init blog\n```\n\n安装依赖库, 安装完成后, 将在 `blog` 目录下配置好生成静态博客的环境\n\n\n```cpp\ncd blog\nnpm install\n```\n\n生成静态网页\n\n\n*   hexo generate (hexo g) 生成静态文件，会在当前目录下生成一个新的叫做public的文件夹/\n\n*   hexo server (hexo s) 启动本地web服务，用于博客的预览\n\n*   hexo deploy (hexo d)   部署播客到远端（比如github, heroku等平台）\n\n\n\n可以在 [http://localhost:4000/](http://localhost:4000/) 查看\n\n\n##2.4    配置主题\n-------\n\n[`Hexo Themes`](https://hexo.io/themes/) 官网收录了很多主题. 我本人挑选了 [`Xups`](http://jelon.top/)\n\n![xups_theme](https://github.com/gatieme/AderXCoding/blob/master/system/tools/hexo/01-use_hexo/01-xups_theme.png)\n\n\n\n#3  Github Pages设置\n-------\n\n##3.1   Github Pages 简介\n-------\n\n`GitHub Pages` 是 `GitHub` 为用户提供的免费空间免费稳定, 用来做搭建一个博客再好不过了.\n\n每个帐号只能有一个仓库来存放个人主页, 而且仓库的名字必须是 `username/username.github.io`, 这是特殊的命名约定. 你可以通过 `http://username.github.io` 来访问你的个人主页.\n\n这里特别提醒一下, 需要注意的**个人主页的网站内容是在 `master` 分支下的**.\n\n\n##3.2   创建自己的 `Github Pages`\n-------\n\n注册及使用 `Github  Pages` 的过程并不是本文的重点, 这部分内容有很多资源, 在此不再详述, 可以参考 :\n\n>[如何搭建一个独立博客——简明Github Pages与Hexo教程](http://www.jianshu.com/p/05289a4bc8b2)\n>\n>[使用GitHub pages 搭建一个心仪的个人博客](https://blog.csdn.net/xudailong_blog/article/details/78762262)\n>\n>[搭建 Github Pages 个人博客网站](https://blog.csdn.net/KNIGH_YUN/article/details/79774344)\n>\n>[利用github-pages建立个人博客\n](https://blog.csdn.net/garfielder007/article/details/50224761)\n>\n>[傻瓜都可以利用github pages建博客\n](https://www.jianshu.com/p/d658ba3b4351)\n\n在这里我创建了一个 `github repo` 叫做 [`gatieme.github.io`](https://github.com/gatieme/gatieme.github.io) 创建完成之后, 需要有一次提交(`git commit`)操作, 然后就可以通过链接 [https://gatieme.github.io](https://gatieme.github.io/)访问了.\n\n##3.3   部署Hexo到Github Pages\n-------\n\n下面我们就需要把本地 `web` 环境下预览到的博客部署到 `github` 上, 然后就可以直接通过 `http://gatieme.github.io` 访问了. \n\n\n1.  之前 `Github` 上创建的那个 `repo` 的 `master` 分支就用来存储中我们博客生成的 `html` 静态文件, 可以通过链接 [`https://gatieme.github.io`](https://gatieme.github.io) 来直接访问.\n\n2.  那我们 `Hexo` 就是用来生成这些静态网页的, `Hexo -g` 会生成一个静态网站(`public` 目录下), 这个静态文件可以直接访问. 我们只需要将 `hexo` 生成的静态网站, 提交(`git commit`)到 `github` 上那个 `repo` 的 `master` 分支即可.\n\n##3.4   使用 `hexo deploy` 部署\n-------\n\n```\n# Deployment\n## Docs: https://hexo.io/docs/deployment.html\ndeploy:\n  type: git\n  repo: git@github.com:gatieme/gatieme.github.io.git\n  branch: master\n```\n\n然后在命令行中执行\n\n```cpp\nhexo d\n```\n\n即可完成部署.\n\n#4  参考资料\n-------\n\n\n[使用Hexo + Github Pages搭建个人独立博客](https://www.cnblogs.com/dushao/p/5999593.html)\n\n\n[hexo干货系列：（四）将hexo博客同时托管到github和coding](https://www.cnblogs.com/tengj/p/5352572.html)\n\n\n[Hexo，创建属于你自己的博客](https://blog.csdn.net/tianbo_zhang/article/details/79137103)\n\n\n\n<br>\n\n*\t本作品/博文 ( [AderStep-紫夜阑珊-青伶巷草 Copyright ©2013-2017](http://blog.csdn.net/gatieme) ), 由 [成坚(gatieme)](http://blog.csdn.net/gatieme) 创作.\n\n*\t采用<a rel=\"license\" href=\"http://creativecommons.org/licenses/by-nc-sa/4.0/\"><img alt=\"知识共享许可协议\" style=\"border-width:0\" src=\"https://i.creativecommons.org/l/by-nc-sa/4.0/88x31.png\" /></a><a rel=\"license\" href=\"http://creativecommons.org/licenses/by-nc-sa/4.0/\">知识共享署名-非商业性使用-相同方式共享 4.0 国际许可协议</a>进行许可. 欢迎转载、使用、重新发布, 但务必保留文章署名[成坚gatieme](http://blog.csdn.net/gatieme) ( 包含链接: http://blog.csdn.net/gatieme ), 不得用于商业目的. \n\n*\t基于本文修改后的作品务必以相同的许可发布. 如有任何疑问，请与我联系.\n","slug":"2018/09/0001-use_hexo_to_build_your_github_page_blog","published":1,"updated":"2018-09-07T01:28:14.375Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjmgbtjdb0008n8ozxn13gxan","content":"<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">CSDN</th>\n<th style=\"text-align:center\">GitHub</th>\n<th style=\"text-align:center\">Hexo</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\"><a href=\"https://blog.csdn.net/gatieme/article/details/82317681\" target=\"_blank\" rel=\"noopener\">使用 Hexo 搭建 GitHub Page 博客(一)</a></td>\n<td style=\"text-align:center\"><a href=\"https://github.com/gatieme/AderXCoding/blob/master/system/tools/hexo/01-use_hexo\" target=\"_blank\" rel=\"noopener\"><code>AderXCoding/blob/master/system/tools/hexo/01-use_hexo</code></a></td>\n<td style=\"text-align:center\"><a href=\"https://gatieme.github.io/2018/09/02/2018/09/0001-use_hexo_to_build_your_github_page_blog/\" target=\"_blank\" rel=\"noopener\">gatieme.github.io/2018/09/0001-use_hexo_to_build_your_github_page_blog</a></td>\n</tr>\n</tbody>\n</table>\n<p><br></p>\n<p><a rel=\"noopener\" href=\"http://creativecommons.org/licenses/by-nc-sa/4.0/\" target=\"_blank\"><img alt=\"知识共享许可协议\" style=\"border-width:0\" src=\"https://i.creativecommons.org/l/by-nc-sa/4.0/88x31.png\"></a></p>\n<p>本作品采用<a rel=\"noopener\" href=\"http://creativecommons.org/licenses/by-nc-sa/4.0/\" target=\"_blank\">知识共享署名-非商业性使用-相同方式共享 4.0 国际许可协议</a>进行许可, 转载请注明出处, 谢谢合作</p>\n<p>因本人技术水平和知识面有限, 内容如有纰漏或者需要修正的地方, 欢迎大家指正, 也欢迎大家提供一些其他好的调试工具以供收录, 鄙人在此谢谢啦</p>\n<p><br></p>\n<h2 id=\"1-Hexo-简介\"><a href=\"#1-Hexo-简介\" class=\"headerlink\" title=\"#1  Hexo 简介\"></a>#1  Hexo 简介</h2><p><code>Hexo</code> 是一个快速、简洁且高效的博客框架.</p>\n<ul>\n<li><p><code>Hexo</code> 支持使用 <code>Markdown</code>(或其他渲染引擎)解析文章.</p>\n</li>\n<li><p><code>Hexo</code> 生成静态网页的素服非常快, 在几秒内，即可利用靓丽的主题生成静态网页.</p>\n</li>\n<li><p><code>Hexo</code> 用户量非常庞大, 有很多资料和主题可供参考和选择, 非常适配我这种前端技能几乎为 <code>0</code> 的宅男.</p>\n</li>\n</ul>\n<p><a href=\"https://staticsitegenerators.net/\" target=\"_blank\" rel=\"noopener\"><code>StaticSiteGenerators</code></a> 网站收集整理的开源的静态网站生成器, 按照编程语言进行分类, 每个分类按照 <code>Star</code> 数进行排序. 可以看到 <code>Hexo</code> 的热度、<code>Star</code> 数量和更新支持情况都排在前三的.</p>\n<p><a href=\"https://hexo.io/zh-cn/docs/\" target=\"_blank\" rel=\"noopener\"><code>Hexo Doc</code></a> 也有详细的帮助文档方便我们使用.</p>\n<h2 id=\"2-搭建-Hexo-环境\"><a href=\"#2-搭建-Hexo-环境\" class=\"headerlink\" title=\"#2  搭建 Hexo 环境\"></a>#2  搭建 <code>Hexo</code> 环境</h2><h2 id=\"2-1-依赖环境\"><a href=\"#2-1-依赖环境\" class=\"headerlink\" title=\"##2.1 依赖环境\"></a>##2.1 依赖环境</h2><p>环境搭建：</p>\n<p>Node.js：<a href=\"https://nodejs.org/\" target=\"_blank\" rel=\"noopener\">下载地址</a><br>Git：<a href=\"https://gitforwindows.org/\" target=\"_blank\" rel=\"noopener\">下载地址</a><br>markdown 编辑器 : <a href=\"http://www.sublimetext.com\" target=\"_blank\" rel=\"noopener\">Sublime</a> 或者 <a href=\"http://markdownpad.com/\" target=\"_blank\" rel=\"noopener\">markdownpad</a></p>\n<h2 id=\"2-2-安装-Hexo\"><a href=\"#2-2-安装-Hexo\" class=\"headerlink\" title=\"##2.2   安装 Hexo\"></a>##2.2   安装 Hexo</h2><p>安装了 <code>Node.js</code> 之后, 我们就可以使用 <code>NPM</code>. <code>NPM</code> 是随同 <code>NodeJS</code> 一起安装的包管理工具, 能解决 <code>NodeJS</code> 代码部署上的很多问题.</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install -g hexo</span><br></pre></td></tr></table></figure>\n<h2 id=\"2-3-配置-Hexo-博客环境\"><a href=\"#2-3-配置-Hexo-博客环境\" class=\"headerlink\" title=\"##2.3   配置 Hexo 博客环境\"></a>##2.3   配置 <code>Hexo</code> 博客环境</h2><p>初始化博客</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hexo init blog</span><br></pre></td></tr></table></figure>\n<p>安装依赖库, 安装完成后, 将在 <code>blog</code> 目录下配置好生成静态博客的环境</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cd blog</span><br><span class=\"line\">npm install</span><br></pre></td></tr></table></figure>\n<p>生成静态网页</p>\n<ul>\n<li><p>hexo generate (hexo g) 生成静态文件，会在当前目录下生成一个新的叫做public的文件夹/</p>\n</li>\n<li><p>hexo server (hexo s) 启动本地web服务，用于博客的预览</p>\n</li>\n<li><p>hexo deploy (hexo d)   部署播客到远端（比如github, heroku等平台）</p>\n</li>\n</ul>\n<p>可以在 <a href=\"http://localhost:4000/\" target=\"_blank\" rel=\"noopener\">http://localhost:4000/</a> 查看</p>\n<h2 id=\"2-4-配置主题\"><a href=\"#2-4-配置主题\" class=\"headerlink\" title=\"##2.4    配置主题\"></a>##2.4    配置主题</h2><p><a href=\"https://hexo.io/themes/\" target=\"_blank\" rel=\"noopener\"><code>Hexo Themes</code></a> 官网收录了很多主题. 我本人挑选了 <a href=\"http://jelon.top/\" target=\"_blank\" rel=\"noopener\"><code>Xups</code></a></p>\n<p><img src=\"https://github.com/gatieme/AderXCoding/blob/master/system/tools/hexo/01-use_hexo/01-xups_theme.png\" alt=\"xups_theme\"></p>\n<h2 id=\"3-Github-Pages设置\"><a href=\"#3-Github-Pages设置\" class=\"headerlink\" title=\"#3  Github Pages设置\"></a>#3  Github Pages设置</h2><h2 id=\"3-1-Github-Pages-简介\"><a href=\"#3-1-Github-Pages-简介\" class=\"headerlink\" title=\"##3.1   Github Pages 简介\"></a>##3.1   Github Pages 简介</h2><p><code>GitHub Pages</code> 是 <code>GitHub</code> 为用户提供的免费空间免费稳定, 用来做搭建一个博客再好不过了.</p>\n<p>每个帐号只能有一个仓库来存放个人主页, 而且仓库的名字必须是 <code>username/username.github.io</code>, 这是特殊的命名约定. 你可以通过 <code>http://username.github.io</code> 来访问你的个人主页.</p>\n<p>这里特别提醒一下, 需要注意的<strong>个人主页的网站内容是在 <code>master</code> 分支下的</strong>.</p>\n<h2 id=\"3-2-创建自己的-Github-Pages\"><a href=\"#3-2-创建自己的-Github-Pages\" class=\"headerlink\" title=\"##3.2   创建自己的 Github Pages\"></a>##3.2   创建自己的 <code>Github Pages</code></h2><p>注册及使用 <code>Github  Pages</code> 的过程并不是本文的重点, 这部分内容有很多资源, 在此不再详述, 可以参考 :</p>\n<blockquote>\n<p><a href=\"http://www.jianshu.com/p/05289a4bc8b2\" target=\"_blank\" rel=\"noopener\">如何搭建一个独立博客——简明Github Pages与Hexo教程</a></p>\n<p><a href=\"https://blog.csdn.net/xudailong_blog/article/details/78762262\" target=\"_blank\" rel=\"noopener\">使用GitHub pages 搭建一个心仪的个人博客</a></p>\n<p><a href=\"https://blog.csdn.net/KNIGH_YUN/article/details/79774344\" target=\"_blank\" rel=\"noopener\">搭建 Github Pages 个人博客网站</a></p>\n<p><a href=\"https://blog.csdn.net/garfielder007/article/details/50224761\" target=\"_blank\" rel=\"noopener\">利用github-pages建立个人博客\n</a></p>\n<p><a href=\"https://www.jianshu.com/p/d658ba3b4351\" target=\"_blank\" rel=\"noopener\">傻瓜都可以利用github pages建博客\n</a></p>\n</blockquote>\n<p>在这里我创建了一个 <code>github repo</code> 叫做 <a href=\"https://github.com/gatieme/gatieme.github.io\" target=\"_blank\" rel=\"noopener\"><code>gatieme.github.io</code></a> 创建完成之后, 需要有一次提交(<code>git commit</code>)操作, 然后就可以通过链接 <a href=\"https://gatieme.github.io/\" target=\"_blank\" rel=\"noopener\">https://gatieme.github.io</a>访问了.</p>\n<h2 id=\"3-3-部署Hexo到Github-Pages\"><a href=\"#3-3-部署Hexo到Github-Pages\" class=\"headerlink\" title=\"##3.3   部署Hexo到Github Pages\"></a>##3.3   部署Hexo到Github Pages</h2><p>下面我们就需要把本地 <code>web</code> 环境下预览到的博客部署到 <code>github</code> 上, 然后就可以直接通过 <code>http://gatieme.github.io</code> 访问了. </p>\n<ol>\n<li><p>之前 <code>Github</code> 上创建的那个 <code>repo</code> 的 <code>master</code> 分支就用来存储中我们博客生成的 <code>html</code> 静态文件, 可以通过链接 <a href=\"https://gatieme.github.io\" target=\"_blank\" rel=\"noopener\"><code>https://gatieme.github.io</code></a> 来直接访问.</p>\n</li>\n<li><p>那我们 <code>Hexo</code> 就是用来生成这些静态网页的, <code>Hexo -g</code> 会生成一个静态网站(<code>public</code> 目录下), 这个静态文件可以直接访问. 我们只需要将 <code>hexo</code> 生成的静态网站, 提交(<code>git commit</code>)到 <code>github</code> 上那个 <code>repo</code> 的 <code>master</code> 分支即可.</p>\n</li>\n</ol>\n<h2 id=\"3-4-使用-hexo-deploy-部署\"><a href=\"#3-4-使用-hexo-deploy-部署\" class=\"headerlink\" title=\"##3.4   使用 hexo deploy 部署\"></a>##3.4   使用 <code>hexo deploy</code> 部署</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># Deployment</span><br><span class=\"line\">## Docs: https://hexo.io/docs/deployment.html</span><br><span class=\"line\">deploy:</span><br><span class=\"line\">  type: git</span><br><span class=\"line\">  repo: git@github.com:gatieme/gatieme.github.io.git</span><br><span class=\"line\">  branch: master</span><br></pre></td></tr></table></figure>\n<p>然后在命令行中执行</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hexo d</span><br></pre></td></tr></table></figure>\n<p>即可完成部署.</p>\n<h2 id=\"4-参考资料\"><a href=\"#4-参考资料\" class=\"headerlink\" title=\"#4  参考资料\"></a>#4  参考资料</h2><p><a href=\"https://www.cnblogs.com/dushao/p/5999593.html\" target=\"_blank\" rel=\"noopener\">使用Hexo + Github Pages搭建个人独立博客</a></p>\n<p><a href=\"https://www.cnblogs.com/tengj/p/5352572.html\" target=\"_blank\" rel=\"noopener\">hexo干货系列：（四）将hexo博客同时托管到github和coding</a></p>\n<p><a href=\"https://blog.csdn.net/tianbo_zhang/article/details/79137103\" target=\"_blank\" rel=\"noopener\">Hexo，创建属于你自己的博客</a></p>\n<p><br></p>\n<ul>\n<li><p>本作品/博文 ( <a href=\"http://blog.csdn.net/gatieme\" target=\"_blank\" rel=\"noopener\">AderStep-紫夜阑珊-青伶巷草 Copyright ©2013-2017</a> ), 由 <a href=\"http://blog.csdn.net/gatieme\" target=\"_blank\" rel=\"noopener\">成坚(gatieme)</a> 创作.</p>\n</li>\n<li><p>采用<a rel=\"noopener\" href=\"http://creativecommons.org/licenses/by-nc-sa/4.0/\" target=\"_blank\"><img alt=\"知识共享许可协议\" style=\"border-width:0\" src=\"https://i.creativecommons.org/l/by-nc-sa/4.0/88x31.png\"></a><a rel=\"noopener\" href=\"http://creativecommons.org/licenses/by-nc-sa/4.0/\" target=\"_blank\">知识共享署名-非商业性使用-相同方式共享 4.0 国际许可协议</a>进行许可. 欢迎转载、使用、重新发布, 但务必保留文章署名<a href=\"http://blog.csdn.net/gatieme\" target=\"_blank\" rel=\"noopener\">成坚gatieme</a> ( 包含链接: <a href=\"http://blog.csdn.net/gatieme\" target=\"_blank\" rel=\"noopener\">http://blog.csdn.net/gatieme</a> ), 不得用于商业目的. </p>\n</li>\n<li><p>基于本文修改后的作品务必以相同的许可发布. 如有任何疑问，请与我联系.</p>\n</li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">CSDN</th>\n<th style=\"text-align:center\">GitHub</th>\n<th style=\"text-align:center\">Hexo</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\"><a href=\"https://blog.csdn.net/gatieme/article/details/82317681\" target=\"_blank\" rel=\"noopener\">使用 Hexo 搭建 GitHub Page 博客(一)</a></td>\n<td style=\"text-align:center\"><a href=\"https://github.com/gatieme/AderXCoding/blob/master/system/tools/hexo/01-use_hexo\" target=\"_blank\" rel=\"noopener\"><code>AderXCoding/blob/master/system/tools/hexo/01-use_hexo</code></a></td>\n<td style=\"text-align:center\"><a href=\"https://gatieme.github.io/2018/09/02/2018/09/0001-use_hexo_to_build_your_github_page_blog/\" target=\"_blank\" rel=\"noopener\">gatieme.github.io/2018/09/0001-use_hexo_to_build_your_github_page_blog</a></td>\n</tr>\n</tbody>\n</table>\n<p><br></p>\n<p><a rel=\"noopener\" href=\"http://creativecommons.org/licenses/by-nc-sa/4.0/\" target=\"_blank\"><img alt=\"知识共享许可协议\" style=\"border-width:0\" src=\"https://i.creativecommons.org/l/by-nc-sa/4.0/88x31.png\"></a></p>\n<p>本作品采用<a rel=\"noopener\" href=\"http://creativecommons.org/licenses/by-nc-sa/4.0/\" target=\"_blank\">知识共享署名-非商业性使用-相同方式共享 4.0 国际许可协议</a>进行许可, 转载请注明出处, 谢谢合作</p>\n<p>因本人技术水平和知识面有限, 内容如有纰漏或者需要修正的地方, 欢迎大家指正, 也欢迎大家提供一些其他好的调试工具以供收录, 鄙人在此谢谢啦</p>\n<p><br></p>\n<h2 id=\"1-Hexo-简介\"><a href=\"#1-Hexo-简介\" class=\"headerlink\" title=\"#1  Hexo 简介\"></a>#1  Hexo 简介</h2><p><code>Hexo</code> 是一个快速、简洁且高效的博客框架.</p>\n<ul>\n<li><p><code>Hexo</code> 支持使用 <code>Markdown</code>(或其他渲染引擎)解析文章.</p>\n</li>\n<li><p><code>Hexo</code> 生成静态网页的素服非常快, 在几秒内，即可利用靓丽的主题生成静态网页.</p>\n</li>\n<li><p><code>Hexo</code> 用户量非常庞大, 有很多资料和主题可供参考和选择, 非常适配我这种前端技能几乎为 <code>0</code> 的宅男.</p>\n</li>\n</ul>\n<p><a href=\"https://staticsitegenerators.net/\" target=\"_blank\" rel=\"noopener\"><code>StaticSiteGenerators</code></a> 网站收集整理的开源的静态网站生成器, 按照编程语言进行分类, 每个分类按照 <code>Star</code> 数进行排序. 可以看到 <code>Hexo</code> 的热度、<code>Star</code> 数量和更新支持情况都排在前三的.</p>\n<p><a href=\"https://hexo.io/zh-cn/docs/\" target=\"_blank\" rel=\"noopener\"><code>Hexo Doc</code></a> 也有详细的帮助文档方便我们使用.</p>\n<h2 id=\"2-搭建-Hexo-环境\"><a href=\"#2-搭建-Hexo-环境\" class=\"headerlink\" title=\"#2  搭建 Hexo 环境\"></a>#2  搭建 <code>Hexo</code> 环境</h2><h2 id=\"2-1-依赖环境\"><a href=\"#2-1-依赖环境\" class=\"headerlink\" title=\"##2.1 依赖环境\"></a>##2.1 依赖环境</h2><p>环境搭建：</p>\n<p>Node.js：<a href=\"https://nodejs.org/\" target=\"_blank\" rel=\"noopener\">下载地址</a><br>Git：<a href=\"https://gitforwindows.org/\" target=\"_blank\" rel=\"noopener\">下载地址</a><br>markdown 编辑器 : <a href=\"http://www.sublimetext.com\" target=\"_blank\" rel=\"noopener\">Sublime</a> 或者 <a href=\"http://markdownpad.com/\" target=\"_blank\" rel=\"noopener\">markdownpad</a></p>\n<h2 id=\"2-2-安装-Hexo\"><a href=\"#2-2-安装-Hexo\" class=\"headerlink\" title=\"##2.2   安装 Hexo\"></a>##2.2   安装 Hexo</h2><p>安装了 <code>Node.js</code> 之后, 我们就可以使用 <code>NPM</code>. <code>NPM</code> 是随同 <code>NodeJS</code> 一起安装的包管理工具, 能解决 <code>NodeJS</code> 代码部署上的很多问题.</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install -g hexo</span><br></pre></td></tr></table></figure>\n<h2 id=\"2-3-配置-Hexo-博客环境\"><a href=\"#2-3-配置-Hexo-博客环境\" class=\"headerlink\" title=\"##2.3   配置 Hexo 博客环境\"></a>##2.3   配置 <code>Hexo</code> 博客环境</h2><p>初始化博客</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hexo init blog</span><br></pre></td></tr></table></figure>\n<p>安装依赖库, 安装完成后, 将在 <code>blog</code> 目录下配置好生成静态博客的环境</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cd blog</span><br><span class=\"line\">npm install</span><br></pre></td></tr></table></figure>\n<p>生成静态网页</p>\n<ul>\n<li><p>hexo generate (hexo g) 生成静态文件，会在当前目录下生成一个新的叫做public的文件夹/</p>\n</li>\n<li><p>hexo server (hexo s) 启动本地web服务，用于博客的预览</p>\n</li>\n<li><p>hexo deploy (hexo d)   部署播客到远端（比如github, heroku等平台）</p>\n</li>\n</ul>\n<p>可以在 <a href=\"http://localhost:4000/\" target=\"_blank\" rel=\"noopener\">http://localhost:4000/</a> 查看</p>\n<h2 id=\"2-4-配置主题\"><a href=\"#2-4-配置主题\" class=\"headerlink\" title=\"##2.4    配置主题\"></a>##2.4    配置主题</h2><p><a href=\"https://hexo.io/themes/\" target=\"_blank\" rel=\"noopener\"><code>Hexo Themes</code></a> 官网收录了很多主题. 我本人挑选了 <a href=\"http://jelon.top/\" target=\"_blank\" rel=\"noopener\"><code>Xups</code></a></p>\n<p><img src=\"https://github.com/gatieme/AderXCoding/blob/master/system/tools/hexo/01-use_hexo/01-xups_theme.png\" alt=\"xups_theme\"></p>\n<h2 id=\"3-Github-Pages设置\"><a href=\"#3-Github-Pages设置\" class=\"headerlink\" title=\"#3  Github Pages设置\"></a>#3  Github Pages设置</h2><h2 id=\"3-1-Github-Pages-简介\"><a href=\"#3-1-Github-Pages-简介\" class=\"headerlink\" title=\"##3.1   Github Pages 简介\"></a>##3.1   Github Pages 简介</h2><p><code>GitHub Pages</code> 是 <code>GitHub</code> 为用户提供的免费空间免费稳定, 用来做搭建一个博客再好不过了.</p>\n<p>每个帐号只能有一个仓库来存放个人主页, 而且仓库的名字必须是 <code>username/username.github.io</code>, 这是特殊的命名约定. 你可以通过 <code>http://username.github.io</code> 来访问你的个人主页.</p>\n<p>这里特别提醒一下, 需要注意的<strong>个人主页的网站内容是在 <code>master</code> 分支下的</strong>.</p>\n<h2 id=\"3-2-创建自己的-Github-Pages\"><a href=\"#3-2-创建自己的-Github-Pages\" class=\"headerlink\" title=\"##3.2   创建自己的 Github Pages\"></a>##3.2   创建自己的 <code>Github Pages</code></h2><p>注册及使用 <code>Github  Pages</code> 的过程并不是本文的重点, 这部分内容有很多资源, 在此不再详述, 可以参考 :</p>\n<blockquote>\n<p><a href=\"http://www.jianshu.com/p/05289a4bc8b2\" target=\"_blank\" rel=\"noopener\">如何搭建一个独立博客——简明Github Pages与Hexo教程</a></p>\n<p><a href=\"https://blog.csdn.net/xudailong_blog/article/details/78762262\" target=\"_blank\" rel=\"noopener\">使用GitHub pages 搭建一个心仪的个人博客</a></p>\n<p><a href=\"https://blog.csdn.net/KNIGH_YUN/article/details/79774344\" target=\"_blank\" rel=\"noopener\">搭建 Github Pages 个人博客网站</a></p>\n<p><a href=\"https://blog.csdn.net/garfielder007/article/details/50224761\" target=\"_blank\" rel=\"noopener\">利用github-pages建立个人博客\n</a></p>\n<p><a href=\"https://www.jianshu.com/p/d658ba3b4351\" target=\"_blank\" rel=\"noopener\">傻瓜都可以利用github pages建博客\n</a></p>\n</blockquote>\n<p>在这里我创建了一个 <code>github repo</code> 叫做 <a href=\"https://github.com/gatieme/gatieme.github.io\" target=\"_blank\" rel=\"noopener\"><code>gatieme.github.io</code></a> 创建完成之后, 需要有一次提交(<code>git commit</code>)操作, 然后就可以通过链接 <a href=\"https://gatieme.github.io/\" target=\"_blank\" rel=\"noopener\">https://gatieme.github.io</a>访问了.</p>\n<h2 id=\"3-3-部署Hexo到Github-Pages\"><a href=\"#3-3-部署Hexo到Github-Pages\" class=\"headerlink\" title=\"##3.3   部署Hexo到Github Pages\"></a>##3.3   部署Hexo到Github Pages</h2><p>下面我们就需要把本地 <code>web</code> 环境下预览到的博客部署到 <code>github</code> 上, 然后就可以直接通过 <code>http://gatieme.github.io</code> 访问了. </p>\n<ol>\n<li><p>之前 <code>Github</code> 上创建的那个 <code>repo</code> 的 <code>master</code> 分支就用来存储中我们博客生成的 <code>html</code> 静态文件, 可以通过链接 <a href=\"https://gatieme.github.io\" target=\"_blank\" rel=\"noopener\"><code>https://gatieme.github.io</code></a> 来直接访问.</p>\n</li>\n<li><p>那我们 <code>Hexo</code> 就是用来生成这些静态网页的, <code>Hexo -g</code> 会生成一个静态网站(<code>public</code> 目录下), 这个静态文件可以直接访问. 我们只需要将 <code>hexo</code> 生成的静态网站, 提交(<code>git commit</code>)到 <code>github</code> 上那个 <code>repo</code> 的 <code>master</code> 分支即可.</p>\n</li>\n</ol>\n<h2 id=\"3-4-使用-hexo-deploy-部署\"><a href=\"#3-4-使用-hexo-deploy-部署\" class=\"headerlink\" title=\"##3.4   使用 hexo deploy 部署\"></a>##3.4   使用 <code>hexo deploy</code> 部署</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># Deployment</span><br><span class=\"line\">## Docs: https://hexo.io/docs/deployment.html</span><br><span class=\"line\">deploy:</span><br><span class=\"line\">  type: git</span><br><span class=\"line\">  repo: git@github.com:gatieme/gatieme.github.io.git</span><br><span class=\"line\">  branch: master</span><br></pre></td></tr></table></figure>\n<p>然后在命令行中执行</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hexo d</span><br></pre></td></tr></table></figure>\n<p>即可完成部署.</p>\n<h2 id=\"4-参考资料\"><a href=\"#4-参考资料\" class=\"headerlink\" title=\"#4  参考资料\"></a>#4  参考资料</h2><p><a href=\"https://www.cnblogs.com/dushao/p/5999593.html\" target=\"_blank\" rel=\"noopener\">使用Hexo + Github Pages搭建个人独立博客</a></p>\n<p><a href=\"https://www.cnblogs.com/tengj/p/5352572.html\" target=\"_blank\" rel=\"noopener\">hexo干货系列：（四）将hexo博客同时托管到github和coding</a></p>\n<p><a href=\"https://blog.csdn.net/tianbo_zhang/article/details/79137103\" target=\"_blank\" rel=\"noopener\">Hexo，创建属于你自己的博客</a></p>\n<p><br></p>\n<ul>\n<li><p>本作品/博文 ( <a href=\"http://blog.csdn.net/gatieme\" target=\"_blank\" rel=\"noopener\">AderStep-紫夜阑珊-青伶巷草 Copyright ©2013-2017</a> ), 由 <a href=\"http://blog.csdn.net/gatieme\" target=\"_blank\" rel=\"noopener\">成坚(gatieme)</a> 创作.</p>\n</li>\n<li><p>采用<a rel=\"noopener\" href=\"http://creativecommons.org/licenses/by-nc-sa/4.0/\" target=\"_blank\"><img alt=\"知识共享许可协议\" style=\"border-width:0\" src=\"https://i.creativecommons.org/l/by-nc-sa/4.0/88x31.png\"></a><a rel=\"noopener\" href=\"http://creativecommons.org/licenses/by-nc-sa/4.0/\" target=\"_blank\">知识共享署名-非商业性使用-相同方式共享 4.0 国际许可协议</a>进行许可. 欢迎转载、使用、重新发布, 但务必保留文章署名<a href=\"http://blog.csdn.net/gatieme\" target=\"_blank\" rel=\"noopener\">成坚gatieme</a> ( 包含链接: <a href=\"http://blog.csdn.net/gatieme\" target=\"_blank\" rel=\"noopener\">http://blog.csdn.net/gatieme</a> ), 不得用于商业目的. </p>\n</li>\n<li><p>基于本文修改后的作品务必以相同的许可发布. 如有任何疑问，请与我联系.</p>\n</li>\n</ul>\n"},{"title":"使用 Hexo 搭建 GitHub Page 博客(二)--备份至 GitHub 过程","date":"2018-09-02T10:42:00.000Z","author":"gatieme","thumbnail":null,"blogexcerpt":"Hexo 是一个快速、简洁且高效的博客框架. 支持使用 Markdown (或其他渲染引擎)解析文章. Hexo 生成静态网页的素服非常快, 在几秒内，即可利用靓丽的主题生成静态网页. 本文将介绍如果使用 Hexo 来搭建属于你自己的 Github Page 博客","_content":"\n| CSDN | GitHub | Hexo |\n|:----:|:------:|:----:|\n| [使用 Hexo 搭建 GitHub Page 博客(二)--使用 GitHub 分支保存 Hexo 环境和博文](https://blog.csdn.net/gatieme/article/details/82317704) | [`AderXCoding/system/tools/hexo/02-use_branch_to_backup`](https://github.com/gatieme/AderXCoding/tree/master/system/tools/hexo/02-use_branch_to_backup) | [gatieme.github.io/2018/09/0002-hexo_use_branch_to_backup_your_hexo_environment_and_blogs](https://gatieme.github.io/2018/09/02/2018/09/0002-hexo_use_branch_to_backup_your_hexo_environment_and_blogs/) |\n\n<br>\n\n<a rel=\"license\" href=\"http://creativecommons.org/licenses/by-nc-sa/4.0/\"><img alt=\"知识共享许可协议\" style=\"border-width:0\" src=\"https://i.creativecommons.org/l/by-nc-sa/4.0/88x31.png\" /></a>\n\n本作品采用<a rel=\"license\" href=\"http://creativecommons.org/licenses/by-nc-sa/4.0/\">知识共享署名-非商业性使用-相同方式共享 4.0 国际许可协议</a>进行许可, 转载请注明出处, 谢谢合作\n\n因本人技术水平和知识面有限, 内容如有纰漏或者需要修正的地方, 欢迎大家指正, 也欢迎大家提供一些其他好的调试工具以供收录, 鄙人在此谢谢啦\n\n<br>\n\n#1  问题提出\n-------\n\n使用 `GitHub Page` 搭建个人博客, 经常会遇到一个问题.\n\n我们的 `username.github.io` 的 master 分支, 保存了我们用 `Hexo` 生成的静态 `Html`. 那 `Hexo` 环境和博客的 `markdown` 源码, 怎么高校的保存呢?\n\n最简单的方法就是用另外一个 `repo` 来保存我们的 `Hexo` 环境和源码, 我们称为 `Hexo repo`. 这样我们只需要将 `public` 目录重定向到实际的 `html repo` 就可以了. 这样子我们更新博客的方式就成为:\n\n1.  在 `Hexo repo` 中编写和生成博客, 最后生成 `HTML`. 然后将修改 `git commit`, 就完成了 Hexo 环境和博客源码的保存.\n\n2.  生成的 `HTML` 静态网页, 直接生成在 `username.github.io`, 我们同样 `git commit` 到 `master` 分支上之后, 访问网页就可以看到更新后的博客.\n\n有没有更方便的方法呢, 我们考虑, 我们用 `master` 分支保存了 `Hexo` 生成的 `HTML` 网页, 那我们可以新建一个分支保存 `Hexo` 环境和 博文源代码.\n\n\n\n##2 问题解决\n-------\n\n在 `github` 上新建一个 `GitHub Page : gatieme.github.io`. 在这个仓库下, 另外新增加一个 `hexo` 分支, 并且设置该分支为主分支.\n\n![01-hexo_branch](https://github.com/gatieme/AderXCoding/blob/master/system/tools/hexo/02-use_branch_to_backup/01-hexo_branch.png)\n\n这样, `master` 用来上传 `hexo` 搭建的博客编译好的博客. `hexo` 分支用来备份源文件.\n\n\n##2.1   **完整操作如下(首次搭建环境建议运行)**\n-------\n\n\n1. 创建仓库, gatieme.github.io\n\n2. 创建两个分支： master 与 hexo, 设置hexo为默认分支(因为我们只需要手动管理这个分支上的Hexo网站文件) \n\n3. 将 gatieme.github.io.git 仓库 clone 到本地\n\n4. 如果是首次搭建环境, 则需要安装 hexo 的编译和处理环境\n    在本地仓库下通过依次执行\n    npm install hexo\n    hexo init\n    npm install\n    npm install hexo-deployer-git\n\n5. 配置 `Hexo` 的 `deploy`.\n    配置 `_config.yml` 中的 `deploy` 参数, 分支应为 `master`.\n    \n    ```\n    # Deployment\n    ## Docs: https://hexo.io/docs/deployment.html\n    deploy:\n        type: git\n        repo: git@github.com:gatieme/gatieme.github.io.git\n        branch: master\n    ```\n\n6. 每次修改或者新增博文后, 将博客的源码提交到 `Hexo` 分支.\n    依次执行 git add .、git commit -m “…”、git push origin hexo 提交网站相关的文件\n\n7. 执行 hexo generate -d 生成网站并部署到 GitHub 上。\n\n\n##2.2   **日常博文修改**\n-------\n\n第一次配置完成后, 以后只需要循环进行 `6-7` 操作即可.\n\n\n在本地对博客进行修改添加新博文、修改样式等等后. 通过下面的流程进行管理：\n\n1.  依次执行git add .、git commit -m “…”、git push origin hexo指令将改动推送到GitHub (此时当前分支应为hexo)\n\n2.  然后才执行 hexo generate -d 发布网站到 master 分支上.\n\n\n##2.3   本地资料丢失 \n-------\n\n当重装电脑之后，或者想在其他电脑上修改博客，可以使用下列步骤 :\n\n1.  将 gatieme.github.io 仓库 clone 到本地\n\n    git clone git@github.com:gatieme/gatieme.github.io.git 拷贝仓库(默认分支为hexo) \n\n2.  在本地重新安装 `Hexo` 编译环境.\n    通过Git bash依次执行下列指令:\n    npm install hexo\n    npm install\n    npm install hexo-deployer-git\n\n>注意:\n>\n>hexo init 会初始化 Hexo 环境, 该操作会清空.git 文件夹, 导致版本控制信息会丢失. \n>\n>因此除了首次搭建环境之外, 无需运行此命令.\n>\n>如果万不得已出现 `Hexo` 环境损坏, 需要重新初始化, 可以先拷贝出 `.git` 文件夹, 然后搭建环境并初始化之后, 将 .git 信息重新拷贝回来.\n\n\n#3  参考资料\n-------\n\n[使用hexo，如果换了电脑怎么更新博客？](https://www.zhihu.com/question/21193762)\n \n\n[GitHub Pages + Hexo搭建博客](http://crazymilk.github.io/2015/12/28/GitHub-Pages-Hexo%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2/#more)\n\n[【GitHub】创建Git分支将Hexo博客迁移到其它电脑](https://blog.csdn.net/White_Idiot/article/details/80685990)\n\n<br>\n\n*\t本作品/博文 ( [AderStep-紫夜阑珊-青伶巷草 Copyright ©2013-2017](http://blog.csdn.net/gatieme) ), 由 [成坚(gatieme)](http://blog.csdn.net/gatieme) 创作.\n\n*\t采用<a rel=\"license\" href=\"http://creativecommons.org/licenses/by-nc-sa/4.0/\"><img alt=\"知识共享许可协议\" style=\"border-width:0\" src=\"https://i.creativecommons.org/l/by-nc-sa/4.0/88x31.png\" /></a><a rel=\"license\" href=\"http://creativecommons.org/licenses/by-nc-sa/4.0/\">知识共享署名-非商业性使用-相同方式共享 4.0 国际许可协议</a>进行许可. 欢迎转载、使用、重新发布, 但务必保留文章署名[成坚gatieme](http://blog.csdn.net/gatieme) ( 包含链接: http://blog.csdn.net/gatieme ), 不得用于商业目的. \n\n*\t基于本文修改后的作品务必以相同的许可发布. 如有任何疑问，请与我联系.\n","source":"_posts/2018/09/0002-hexo_use_branch_to_backup_your_hexo_environment_and_blogs.md","raw":"---\ntitle: 使用 Hexo 搭建 GitHub Page 博客(二)--备份至 GitHub 过程\ndate: 2018-09-02 18:42\nauthor: gatieme\ntags: hexo\ncategories:\n        - hexo\nthumbnail: \nblogexcerpt: Hexo 是一个快速、简洁且高效的博客框架. 支持使用 Markdown (或其他渲染引擎)解析文章. Hexo 生成静态网页的素服非常快, 在几秒内，即可利用靓丽的主题生成静态网页. 本文将介绍如果使用 Hexo 来搭建属于你自己的 Github Page 博客\n\n---\n\n| CSDN | GitHub | Hexo |\n|:----:|:------:|:----:|\n| [使用 Hexo 搭建 GitHub Page 博客(二)--使用 GitHub 分支保存 Hexo 环境和博文](https://blog.csdn.net/gatieme/article/details/82317704) | [`AderXCoding/system/tools/hexo/02-use_branch_to_backup`](https://github.com/gatieme/AderXCoding/tree/master/system/tools/hexo/02-use_branch_to_backup) | [gatieme.github.io/2018/09/0002-hexo_use_branch_to_backup_your_hexo_environment_and_blogs](https://gatieme.github.io/2018/09/02/2018/09/0002-hexo_use_branch_to_backup_your_hexo_environment_and_blogs/) |\n\n<br>\n\n<a rel=\"license\" href=\"http://creativecommons.org/licenses/by-nc-sa/4.0/\"><img alt=\"知识共享许可协议\" style=\"border-width:0\" src=\"https://i.creativecommons.org/l/by-nc-sa/4.0/88x31.png\" /></a>\n\n本作品采用<a rel=\"license\" href=\"http://creativecommons.org/licenses/by-nc-sa/4.0/\">知识共享署名-非商业性使用-相同方式共享 4.0 国际许可协议</a>进行许可, 转载请注明出处, 谢谢合作\n\n因本人技术水平和知识面有限, 内容如有纰漏或者需要修正的地方, 欢迎大家指正, 也欢迎大家提供一些其他好的调试工具以供收录, 鄙人在此谢谢啦\n\n<br>\n\n#1  问题提出\n-------\n\n使用 `GitHub Page` 搭建个人博客, 经常会遇到一个问题.\n\n我们的 `username.github.io` 的 master 分支, 保存了我们用 `Hexo` 生成的静态 `Html`. 那 `Hexo` 环境和博客的 `markdown` 源码, 怎么高校的保存呢?\n\n最简单的方法就是用另外一个 `repo` 来保存我们的 `Hexo` 环境和源码, 我们称为 `Hexo repo`. 这样我们只需要将 `public` 目录重定向到实际的 `html repo` 就可以了. 这样子我们更新博客的方式就成为:\n\n1.  在 `Hexo repo` 中编写和生成博客, 最后生成 `HTML`. 然后将修改 `git commit`, 就完成了 Hexo 环境和博客源码的保存.\n\n2.  生成的 `HTML` 静态网页, 直接生成在 `username.github.io`, 我们同样 `git commit` 到 `master` 分支上之后, 访问网页就可以看到更新后的博客.\n\n有没有更方便的方法呢, 我们考虑, 我们用 `master` 分支保存了 `Hexo` 生成的 `HTML` 网页, 那我们可以新建一个分支保存 `Hexo` 环境和 博文源代码.\n\n\n\n##2 问题解决\n-------\n\n在 `github` 上新建一个 `GitHub Page : gatieme.github.io`. 在这个仓库下, 另外新增加一个 `hexo` 分支, 并且设置该分支为主分支.\n\n![01-hexo_branch](https://github.com/gatieme/AderXCoding/blob/master/system/tools/hexo/02-use_branch_to_backup/01-hexo_branch.png)\n\n这样, `master` 用来上传 `hexo` 搭建的博客编译好的博客. `hexo` 分支用来备份源文件.\n\n\n##2.1   **完整操作如下(首次搭建环境建议运行)**\n-------\n\n\n1. 创建仓库, gatieme.github.io\n\n2. 创建两个分支： master 与 hexo, 设置hexo为默认分支(因为我们只需要手动管理这个分支上的Hexo网站文件) \n\n3. 将 gatieme.github.io.git 仓库 clone 到本地\n\n4. 如果是首次搭建环境, 则需要安装 hexo 的编译和处理环境\n    在本地仓库下通过依次执行\n    npm install hexo\n    hexo init\n    npm install\n    npm install hexo-deployer-git\n\n5. 配置 `Hexo` 的 `deploy`.\n    配置 `_config.yml` 中的 `deploy` 参数, 分支应为 `master`.\n    \n    ```\n    # Deployment\n    ## Docs: https://hexo.io/docs/deployment.html\n    deploy:\n        type: git\n        repo: git@github.com:gatieme/gatieme.github.io.git\n        branch: master\n    ```\n\n6. 每次修改或者新增博文后, 将博客的源码提交到 `Hexo` 分支.\n    依次执行 git add .、git commit -m “…”、git push origin hexo 提交网站相关的文件\n\n7. 执行 hexo generate -d 生成网站并部署到 GitHub 上。\n\n\n##2.2   **日常博文修改**\n-------\n\n第一次配置完成后, 以后只需要循环进行 `6-7` 操作即可.\n\n\n在本地对博客进行修改添加新博文、修改样式等等后. 通过下面的流程进行管理：\n\n1.  依次执行git add .、git commit -m “…”、git push origin hexo指令将改动推送到GitHub (此时当前分支应为hexo)\n\n2.  然后才执行 hexo generate -d 发布网站到 master 分支上.\n\n\n##2.3   本地资料丢失 \n-------\n\n当重装电脑之后，或者想在其他电脑上修改博客，可以使用下列步骤 :\n\n1.  将 gatieme.github.io 仓库 clone 到本地\n\n    git clone git@github.com:gatieme/gatieme.github.io.git 拷贝仓库(默认分支为hexo) \n\n2.  在本地重新安装 `Hexo` 编译环境.\n    通过Git bash依次执行下列指令:\n    npm install hexo\n    npm install\n    npm install hexo-deployer-git\n\n>注意:\n>\n>hexo init 会初始化 Hexo 环境, 该操作会清空.git 文件夹, 导致版本控制信息会丢失. \n>\n>因此除了首次搭建环境之外, 无需运行此命令.\n>\n>如果万不得已出现 `Hexo` 环境损坏, 需要重新初始化, 可以先拷贝出 `.git` 文件夹, 然后搭建环境并初始化之后, 将 .git 信息重新拷贝回来.\n\n\n#3  参考资料\n-------\n\n[使用hexo，如果换了电脑怎么更新博客？](https://www.zhihu.com/question/21193762)\n \n\n[GitHub Pages + Hexo搭建博客](http://crazymilk.github.io/2015/12/28/GitHub-Pages-Hexo%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2/#more)\n\n[【GitHub】创建Git分支将Hexo博客迁移到其它电脑](https://blog.csdn.net/White_Idiot/article/details/80685990)\n\n<br>\n\n*\t本作品/博文 ( [AderStep-紫夜阑珊-青伶巷草 Copyright ©2013-2017](http://blog.csdn.net/gatieme) ), 由 [成坚(gatieme)](http://blog.csdn.net/gatieme) 创作.\n\n*\t采用<a rel=\"license\" href=\"http://creativecommons.org/licenses/by-nc-sa/4.0/\"><img alt=\"知识共享许可协议\" style=\"border-width:0\" src=\"https://i.creativecommons.org/l/by-nc-sa/4.0/88x31.png\" /></a><a rel=\"license\" href=\"http://creativecommons.org/licenses/by-nc-sa/4.0/\">知识共享署名-非商业性使用-相同方式共享 4.0 国际许可协议</a>进行许可. 欢迎转载、使用、重新发布, 但务必保留文章署名[成坚gatieme](http://blog.csdn.net/gatieme) ( 包含链接: http://blog.csdn.net/gatieme ), 不得用于商业目的. \n\n*\t基于本文修改后的作品务必以相同的许可发布. 如有任何疑问，请与我联系.\n","slug":"2018/09/0002-hexo_use_branch_to_backup_your_hexo_environment_and_blogs","published":1,"updated":"2018-09-07T01:28:07.068Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjmgbtjdi0009n8ozshsvvohi","content":"<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">CSDN</th>\n<th style=\"text-align:center\">GitHub</th>\n<th style=\"text-align:center\">Hexo</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\"><a href=\"https://blog.csdn.net/gatieme/article/details/82317704\" target=\"_blank\" rel=\"noopener\">使用 Hexo 搭建 GitHub Page 博客(二)–使用 GitHub 分支保存 Hexo 环境和博文</a></td>\n<td style=\"text-align:center\"><a href=\"https://github.com/gatieme/AderXCoding/tree/master/system/tools/hexo/02-use_branch_to_backup\" target=\"_blank\" rel=\"noopener\"><code>AderXCoding/system/tools/hexo/02-use_branch_to_backup</code></a></td>\n<td style=\"text-align:center\"><a href=\"https://gatieme.github.io/2018/09/02/2018/09/0002-hexo_use_branch_to_backup_your_hexo_environment_and_blogs/\" target=\"_blank\" rel=\"noopener\">gatieme.github.io/2018/09/0002-hexo_use_branch_to_backup_your_hexo_environment_and_blogs</a></td>\n</tr>\n</tbody>\n</table>\n<p><br></p>\n<p><a rel=\"noopener\" href=\"http://creativecommons.org/licenses/by-nc-sa/4.0/\" target=\"_blank\"><img alt=\"知识共享许可协议\" style=\"border-width:0\" src=\"https://i.creativecommons.org/l/by-nc-sa/4.0/88x31.png\"></a></p>\n<p>本作品采用<a rel=\"noopener\" href=\"http://creativecommons.org/licenses/by-nc-sa/4.0/\" target=\"_blank\">知识共享署名-非商业性使用-相同方式共享 4.0 国际许可协议</a>进行许可, 转载请注明出处, 谢谢合作</p>\n<p>因本人技术水平和知识面有限, 内容如有纰漏或者需要修正的地方, 欢迎大家指正, 也欢迎大家提供一些其他好的调试工具以供收录, 鄙人在此谢谢啦</p>\n<p><br></p>\n<h2 id=\"1-问题提出\"><a href=\"#1-问题提出\" class=\"headerlink\" title=\"#1  问题提出\"></a>#1  问题提出</h2><p>使用 <code>GitHub Page</code> 搭建个人博客, 经常会遇到一个问题.</p>\n<p>我们的 <code>username.github.io</code> 的 master 分支, 保存了我们用 <code>Hexo</code> 生成的静态 <code>Html</code>. 那 <code>Hexo</code> 环境和博客的 <code>markdown</code> 源码, 怎么高校的保存呢?</p>\n<p>最简单的方法就是用另外一个 <code>repo</code> 来保存我们的 <code>Hexo</code> 环境和源码, 我们称为 <code>Hexo repo</code>. 这样我们只需要将 <code>public</code> 目录重定向到实际的 <code>html repo</code> 就可以了. 这样子我们更新博客的方式就成为:</p>\n<ol>\n<li><p>在 <code>Hexo repo</code> 中编写和生成博客, 最后生成 <code>HTML</code>. 然后将修改 <code>git commit</code>, 就完成了 Hexo 环境和博客源码的保存.</p>\n</li>\n<li><p>生成的 <code>HTML</code> 静态网页, 直接生成在 <code>username.github.io</code>, 我们同样 <code>git commit</code> 到 <code>master</code> 分支上之后, 访问网页就可以看到更新后的博客.</p>\n</li>\n</ol>\n<p>有没有更方便的方法呢, 我们考虑, 我们用 <code>master</code> 分支保存了 <code>Hexo</code> 生成的 <code>HTML</code> 网页, 那我们可以新建一个分支保存 <code>Hexo</code> 环境和 博文源代码.</p>\n<h2 id=\"2-问题解决\"><a href=\"#2-问题解决\" class=\"headerlink\" title=\"##2 问题解决\"></a>##2 问题解决</h2><p>在 <code>github</code> 上新建一个 <code>GitHub Page : gatieme.github.io</code>. 在这个仓库下, 另外新增加一个 <code>hexo</code> 分支, 并且设置该分支为主分支.</p>\n<p><img src=\"https://github.com/gatieme/AderXCoding/blob/master/system/tools/hexo/02-use_branch_to_backup/01-hexo_branch.png\" alt=\"01-hexo_branch\"></p>\n<p>这样, <code>master</code> 用来上传 <code>hexo</code> 搭建的博客编译好的博客. <code>hexo</code> 分支用来备份源文件.</p>\n<h2 id=\"2-1-完整操作如下-首次搭建环境建议运行\"><a href=\"#2-1-完整操作如下-首次搭建环境建议运行\" class=\"headerlink\" title=\"##2.1   完整操作如下(首次搭建环境建议运行)\"></a>##2.1   <strong>完整操作如下(首次搭建环境建议运行)</strong></h2><ol>\n<li><p>创建仓库, gatieme.github.io</p>\n</li>\n<li><p>创建两个分支： master 与 hexo, 设置hexo为默认分支(因为我们只需要手动管理这个分支上的Hexo网站文件) </p>\n</li>\n<li><p>将 gatieme.github.io.git 仓库 clone 到本地</p>\n</li>\n<li><p>如果是首次搭建环境, 则需要安装 hexo 的编译和处理环境<br> 在本地仓库下通过依次执行<br> npm install hexo<br> hexo init<br> npm install<br> npm install hexo-deployer-git</p>\n</li>\n<li><p>配置 <code>Hexo</code> 的 <code>deploy</code>.<br> 配置 <code>_config.yml</code> 中的 <code>deploy</code> 参数, 分支应为 <code>master</code>.</p>\n <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># Deployment</span><br><span class=\"line\">## Docs: https://hexo.io/docs/deployment.html</span><br><span class=\"line\">deploy:</span><br><span class=\"line\">    type: git</span><br><span class=\"line\">    repo: git@github.com:gatieme/gatieme.github.io.git</span><br><span class=\"line\">    branch: master</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>每次修改或者新增博文后, 将博客的源码提交到 <code>Hexo</code> 分支.<br> 依次执行 git add .、git commit -m “…”、git push origin hexo 提交网站相关的文件</p>\n</li>\n<li><p>执行 hexo generate -d 生成网站并部署到 GitHub 上。</p>\n</li>\n</ol>\n<h2 id=\"2-2-日常博文修改\"><a href=\"#2-2-日常博文修改\" class=\"headerlink\" title=\"##2.2   日常博文修改\"></a>##2.2   <strong>日常博文修改</strong></h2><p>第一次配置完成后, 以后只需要循环进行 <code>6-7</code> 操作即可.</p>\n<p>在本地对博客进行修改添加新博文、修改样式等等后. 通过下面的流程进行管理：</p>\n<ol>\n<li><p>依次执行git add .、git commit -m “…”、git push origin hexo指令将改动推送到GitHub (此时当前分支应为hexo)</p>\n</li>\n<li><p>然后才执行 hexo generate -d 发布网站到 master 分支上.</p>\n</li>\n</ol>\n<h2 id=\"2-3-本地资料丢失\"><a href=\"#2-3-本地资料丢失\" class=\"headerlink\" title=\"##2.3   本地资料丢失 \"></a>##2.3   本地资料丢失 </h2><p>当重装电脑之后，或者想在其他电脑上修改博客，可以使用下列步骤 :</p>\n<ol>\n<li><p>将 gatieme.github.io 仓库 clone 到本地</p>\n<p>git clone <a href=\"mailto:git@github.com\" target=\"_blank\" rel=\"noopener\">git@github.com</a>:gatieme/gatieme.github.io.git 拷贝仓库(默认分支为hexo) </p>\n</li>\n<li><p>在本地重新安装 <code>Hexo</code> 编译环境.<br>通过Git bash依次执行下列指令:<br>npm install hexo<br>npm install<br>npm install hexo-deployer-git</p>\n</li>\n</ol>\n<blockquote>\n<p>注意:</p>\n<p>hexo init 会初始化 Hexo 环境, 该操作会清空.git 文件夹, 导致版本控制信息会丢失. </p>\n<p>因此除了首次搭建环境之外, 无需运行此命令.</p>\n<p>如果万不得已出现 <code>Hexo</code> 环境损坏, 需要重新初始化, 可以先拷贝出 <code>.git</code> 文件夹, 然后搭建环境并初始化之后, 将 .git 信息重新拷贝回来.</p>\n</blockquote>\n<h2 id=\"3-参考资料\"><a href=\"#3-参考资料\" class=\"headerlink\" title=\"#3  参考资料\"></a>#3  参考资料</h2><p><a href=\"https://www.zhihu.com/question/21193762\" target=\"_blank\" rel=\"noopener\">使用hexo，如果换了电脑怎么更新博客？</a></p>\n<p><a href=\"http://crazymilk.github.io/2015/12/28/GitHub-Pages-Hexo%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2/#more\" target=\"_blank\" rel=\"noopener\">GitHub Pages + Hexo搭建博客</a></p>\n<p><a href=\"https://blog.csdn.net/White_Idiot/article/details/80685990\" target=\"_blank\" rel=\"noopener\">【GitHub】创建Git分支将Hexo博客迁移到其它电脑</a></p>\n<p><br></p>\n<ul>\n<li><p>本作品/博文 ( <a href=\"http://blog.csdn.net/gatieme\" target=\"_blank\" rel=\"noopener\">AderStep-紫夜阑珊-青伶巷草 Copyright ©2013-2017</a> ), 由 <a href=\"http://blog.csdn.net/gatieme\" target=\"_blank\" rel=\"noopener\">成坚(gatieme)</a> 创作.</p>\n</li>\n<li><p>采用<a rel=\"noopener\" href=\"http://creativecommons.org/licenses/by-nc-sa/4.0/\" target=\"_blank\"><img alt=\"知识共享许可协议\" style=\"border-width:0\" src=\"https://i.creativecommons.org/l/by-nc-sa/4.0/88x31.png\"></a><a rel=\"noopener\" href=\"http://creativecommons.org/licenses/by-nc-sa/4.0/\" target=\"_blank\">知识共享署名-非商业性使用-相同方式共享 4.0 国际许可协议</a>进行许可. 欢迎转载、使用、重新发布, 但务必保留文章署名<a href=\"http://blog.csdn.net/gatieme\" target=\"_blank\" rel=\"noopener\">成坚gatieme</a> ( 包含链接: <a href=\"http://blog.csdn.net/gatieme\" target=\"_blank\" rel=\"noopener\">http://blog.csdn.net/gatieme</a> ), 不得用于商业目的. </p>\n</li>\n<li><p>基于本文修改后的作品务必以相同的许可发布. 如有任何疑问，请与我联系.</p>\n</li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">CSDN</th>\n<th style=\"text-align:center\">GitHub</th>\n<th style=\"text-align:center\">Hexo</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\"><a href=\"https://blog.csdn.net/gatieme/article/details/82317704\" target=\"_blank\" rel=\"noopener\">使用 Hexo 搭建 GitHub Page 博客(二)–使用 GitHub 分支保存 Hexo 环境和博文</a></td>\n<td style=\"text-align:center\"><a href=\"https://github.com/gatieme/AderXCoding/tree/master/system/tools/hexo/02-use_branch_to_backup\" target=\"_blank\" rel=\"noopener\"><code>AderXCoding/system/tools/hexo/02-use_branch_to_backup</code></a></td>\n<td style=\"text-align:center\"><a href=\"https://gatieme.github.io/2018/09/02/2018/09/0002-hexo_use_branch_to_backup_your_hexo_environment_and_blogs/\" target=\"_blank\" rel=\"noopener\">gatieme.github.io/2018/09/0002-hexo_use_branch_to_backup_your_hexo_environment_and_blogs</a></td>\n</tr>\n</tbody>\n</table>\n<p><br></p>\n<p><a rel=\"noopener\" href=\"http://creativecommons.org/licenses/by-nc-sa/4.0/\" target=\"_blank\"><img alt=\"知识共享许可协议\" style=\"border-width:0\" src=\"https://i.creativecommons.org/l/by-nc-sa/4.0/88x31.png\"></a></p>\n<p>本作品采用<a rel=\"noopener\" href=\"http://creativecommons.org/licenses/by-nc-sa/4.0/\" target=\"_blank\">知识共享署名-非商业性使用-相同方式共享 4.0 国际许可协议</a>进行许可, 转载请注明出处, 谢谢合作</p>\n<p>因本人技术水平和知识面有限, 内容如有纰漏或者需要修正的地方, 欢迎大家指正, 也欢迎大家提供一些其他好的调试工具以供收录, 鄙人在此谢谢啦</p>\n<p><br></p>\n<h2 id=\"1-问题提出\"><a href=\"#1-问题提出\" class=\"headerlink\" title=\"#1  问题提出\"></a>#1  问题提出</h2><p>使用 <code>GitHub Page</code> 搭建个人博客, 经常会遇到一个问题.</p>\n<p>我们的 <code>username.github.io</code> 的 master 分支, 保存了我们用 <code>Hexo</code> 生成的静态 <code>Html</code>. 那 <code>Hexo</code> 环境和博客的 <code>markdown</code> 源码, 怎么高校的保存呢?</p>\n<p>最简单的方法就是用另外一个 <code>repo</code> 来保存我们的 <code>Hexo</code> 环境和源码, 我们称为 <code>Hexo repo</code>. 这样我们只需要将 <code>public</code> 目录重定向到实际的 <code>html repo</code> 就可以了. 这样子我们更新博客的方式就成为:</p>\n<ol>\n<li><p>在 <code>Hexo repo</code> 中编写和生成博客, 最后生成 <code>HTML</code>. 然后将修改 <code>git commit</code>, 就完成了 Hexo 环境和博客源码的保存.</p>\n</li>\n<li><p>生成的 <code>HTML</code> 静态网页, 直接生成在 <code>username.github.io</code>, 我们同样 <code>git commit</code> 到 <code>master</code> 分支上之后, 访问网页就可以看到更新后的博客.</p>\n</li>\n</ol>\n<p>有没有更方便的方法呢, 我们考虑, 我们用 <code>master</code> 分支保存了 <code>Hexo</code> 生成的 <code>HTML</code> 网页, 那我们可以新建一个分支保存 <code>Hexo</code> 环境和 博文源代码.</p>\n<h2 id=\"2-问题解决\"><a href=\"#2-问题解决\" class=\"headerlink\" title=\"##2 问题解决\"></a>##2 问题解决</h2><p>在 <code>github</code> 上新建一个 <code>GitHub Page : gatieme.github.io</code>. 在这个仓库下, 另外新增加一个 <code>hexo</code> 分支, 并且设置该分支为主分支.</p>\n<p><img src=\"https://github.com/gatieme/AderXCoding/blob/master/system/tools/hexo/02-use_branch_to_backup/01-hexo_branch.png\" alt=\"01-hexo_branch\"></p>\n<p>这样, <code>master</code> 用来上传 <code>hexo</code> 搭建的博客编译好的博客. <code>hexo</code> 分支用来备份源文件.</p>\n<h2 id=\"2-1-完整操作如下-首次搭建环境建议运行\"><a href=\"#2-1-完整操作如下-首次搭建环境建议运行\" class=\"headerlink\" title=\"##2.1   完整操作如下(首次搭建环境建议运行)\"></a>##2.1   <strong>完整操作如下(首次搭建环境建议运行)</strong></h2><ol>\n<li><p>创建仓库, gatieme.github.io</p>\n</li>\n<li><p>创建两个分支： master 与 hexo, 设置hexo为默认分支(因为我们只需要手动管理这个分支上的Hexo网站文件) </p>\n</li>\n<li><p>将 gatieme.github.io.git 仓库 clone 到本地</p>\n</li>\n<li><p>如果是首次搭建环境, 则需要安装 hexo 的编译和处理环境<br> 在本地仓库下通过依次执行<br> npm install hexo<br> hexo init<br> npm install<br> npm install hexo-deployer-git</p>\n</li>\n<li><p>配置 <code>Hexo</code> 的 <code>deploy</code>.<br> 配置 <code>_config.yml</code> 中的 <code>deploy</code> 参数, 分支应为 <code>master</code>.</p>\n <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># Deployment</span><br><span class=\"line\">## Docs: https://hexo.io/docs/deployment.html</span><br><span class=\"line\">deploy:</span><br><span class=\"line\">    type: git</span><br><span class=\"line\">    repo: git@github.com:gatieme/gatieme.github.io.git</span><br><span class=\"line\">    branch: master</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>每次修改或者新增博文后, 将博客的源码提交到 <code>Hexo</code> 分支.<br> 依次执行 git add .、git commit -m “…”、git push origin hexo 提交网站相关的文件</p>\n</li>\n<li><p>执行 hexo generate -d 生成网站并部署到 GitHub 上。</p>\n</li>\n</ol>\n<h2 id=\"2-2-日常博文修改\"><a href=\"#2-2-日常博文修改\" class=\"headerlink\" title=\"##2.2   日常博文修改\"></a>##2.2   <strong>日常博文修改</strong></h2><p>第一次配置完成后, 以后只需要循环进行 <code>6-7</code> 操作即可.</p>\n<p>在本地对博客进行修改添加新博文、修改样式等等后. 通过下面的流程进行管理：</p>\n<ol>\n<li><p>依次执行git add .、git commit -m “…”、git push origin hexo指令将改动推送到GitHub (此时当前分支应为hexo)</p>\n</li>\n<li><p>然后才执行 hexo generate -d 发布网站到 master 分支上.</p>\n</li>\n</ol>\n<h2 id=\"2-3-本地资料丢失\"><a href=\"#2-3-本地资料丢失\" class=\"headerlink\" title=\"##2.3   本地资料丢失 \"></a>##2.3   本地资料丢失 </h2><p>当重装电脑之后，或者想在其他电脑上修改博客，可以使用下列步骤 :</p>\n<ol>\n<li><p>将 gatieme.github.io 仓库 clone 到本地</p>\n<p>git clone <a href=\"mailto:git@github.com\" target=\"_blank\" rel=\"noopener\">git@github.com</a>:gatieme/gatieme.github.io.git 拷贝仓库(默认分支为hexo) </p>\n</li>\n<li><p>在本地重新安装 <code>Hexo</code> 编译环境.<br>通过Git bash依次执行下列指令:<br>npm install hexo<br>npm install<br>npm install hexo-deployer-git</p>\n</li>\n</ol>\n<blockquote>\n<p>注意:</p>\n<p>hexo init 会初始化 Hexo 环境, 该操作会清空.git 文件夹, 导致版本控制信息会丢失. </p>\n<p>因此除了首次搭建环境之外, 无需运行此命令.</p>\n<p>如果万不得已出现 <code>Hexo</code> 环境损坏, 需要重新初始化, 可以先拷贝出 <code>.git</code> 文件夹, 然后搭建环境并初始化之后, 将 .git 信息重新拷贝回来.</p>\n</blockquote>\n<h2 id=\"3-参考资料\"><a href=\"#3-参考资料\" class=\"headerlink\" title=\"#3  参考资料\"></a>#3  参考资料</h2><p><a href=\"https://www.zhihu.com/question/21193762\" target=\"_blank\" rel=\"noopener\">使用hexo，如果换了电脑怎么更新博客？</a></p>\n<p><a href=\"http://crazymilk.github.io/2015/12/28/GitHub-Pages-Hexo%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2/#more\" target=\"_blank\" rel=\"noopener\">GitHub Pages + Hexo搭建博客</a></p>\n<p><a href=\"https://blog.csdn.net/White_Idiot/article/details/80685990\" target=\"_blank\" rel=\"noopener\">【GitHub】创建Git分支将Hexo博客迁移到其它电脑</a></p>\n<p><br></p>\n<ul>\n<li><p>本作品/博文 ( <a href=\"http://blog.csdn.net/gatieme\" target=\"_blank\" rel=\"noopener\">AderStep-紫夜阑珊-青伶巷草 Copyright ©2013-2017</a> ), 由 <a href=\"http://blog.csdn.net/gatieme\" target=\"_blank\" rel=\"noopener\">成坚(gatieme)</a> 创作.</p>\n</li>\n<li><p>采用<a rel=\"noopener\" href=\"http://creativecommons.org/licenses/by-nc-sa/4.0/\" target=\"_blank\"><img alt=\"知识共享许可协议\" style=\"border-width:0\" src=\"https://i.creativecommons.org/l/by-nc-sa/4.0/88x31.png\"></a><a rel=\"noopener\" href=\"http://creativecommons.org/licenses/by-nc-sa/4.0/\" target=\"_blank\">知识共享署名-非商业性使用-相同方式共享 4.0 国际许可协议</a>进行许可. 欢迎转载、使用、重新发布, 但务必保留文章署名<a href=\"http://blog.csdn.net/gatieme\" target=\"_blank\" rel=\"noopener\">成坚gatieme</a> ( 包含链接: <a href=\"http://blog.csdn.net/gatieme\" target=\"_blank\" rel=\"noopener\">http://blog.csdn.net/gatieme</a> ), 不得用于商业目的. </p>\n</li>\n<li><p>基于本文修改后的作品务必以相同的许可发布. 如有任何疑问，请与我联系.</p>\n</li>\n</ul>\n"},{"title":"qemu中使用 9p virtio, 支持 host 和 guest 中共享目录","date":"2018-09-30T11:46:00.000Z","author":"gatieme","thumbnail":null,"blogexcerpt":"在使用qemu调试内核的时候, 如果没有网络，想要部署点驱动或者程序上去都需要重新制作文件系统，本文讲解了如何通过 9p virtio fs 实现在 qemu 和 host 机器上共享文件和目录。","_content":"\n| CSDN | GitHub | Hexo |\n|:----:|:------:|:----:|\n| [qemu中使用 9p virtio, 支持 host 和 guest 中共享目录](https://blog.csdn.net/gatieme/article/details/82912921) | [`AderXCoding/system/tools/qemu/0001-9p_virtio`](https://github.com/gatieme/AderXCoding/tree/master/system/tools/qemu/0001-9p_virtio) | [gatieme.github.io](https://gatieme.github.io) |\n\n<br>\n\n<a rel=\"license\" href=\"http://creativecommons.org/licenses/by-nc-sa/4.0/\"><img alt=\"知识共享许可协议\" style=\"border-width:0\" src=\"https://i.creativecommons.org/l/by-nc-sa/4.0/88x31.png\" /></a>\n\n本作品采用<a rel=\"license\" href=\"http://creativecommons.org/licenses/by-nc-sa/4.0/\">知识共享署名-非商业性使用-相同方式共享 4.0 国际许可协议</a>进行许可, 转载请注明出处, 谢谢合作\n\n因本人技术水平和知识面有限, 内容如有纰漏或者需要修正的地方, 欢迎大家指正, 也欢迎大家提供一些其他好的调试工具以供收录, 鄙人在此谢谢啦\n\n<br>\n\n\n#1\t问题描述\n-------\n\n使用 qemu 调试内核是很方便的，但是我们有时候想传点驱动或者程序上去跑一下子，都需要重新制作和打包文件系统，这样花费了我们的精力，也很烦。\n\n那有没有什么办法能够在 qemu 和 host 机器之间共享文件呢，这样我们就省去了很多工作量。\n\n> 于是 9p virtio fs 就登场了\n\n#2\t问题分析\n-------\n\n`9p` 是啥，网络文件系统，用于共享目录。当然，qemu中使用9p是用于host和guest中共享目录，也不需要网络的支持，而是需要virtio的支持。\n\n#3\tqemu 使用 9p virtio实现共享目录\n-------\n\n##3.1\t`qemu` 支持和设置 `virtfs`\n-------\n\n###3.1.1\t`qemu` 启动参数添加 `virfts`\n-------\n\n`qemu` 启动参数需要添加 :\n\n```cpp\n-fsdev local,security_model=passthrough,id=fsdev0,path=/tmp/share \\\n-device virtio-9p-pci,id=fs0,fsdev=fsdev0,mount_tag=hostshare\n```\n\n其中 `path` 为 `host` 本地的共享目录\n\n然后提示：\n\n```cpp\n'virtio-9p-pci' is not a valid device model name\n```\n\n需要重新编译 `qemu`, 编译时添加额外的 `configure` 参数 `--enable-virtfs`\n\n\n###3.1.2\t`qemu` 支持 `virtfs`\n-------\n\n\n```cpp\n./configure --enable-kvm --enable-virtfs --prefix=/opt/software/toolchain/qemu\n```\n\n注意 `qemu` 支持 `virtfs` 需要 `libcap` 和 `libattr` 等依赖库.\n\n\n```\n./configure --enable-kvm --enable-virtfs --prefix=/opt/software/toolchain/qemu                            !2818\n\nERROR: VirtFS requires libcap devel and libattr devel\n```\n\n`CentOS` 可以使用如下命令安装\n\n```cpp\nsudo yum install -y libcap-devel\nsudo yum install -y libattr-devel\n```\n\n编译安装 `qemu` 后, 再运行, 可以了.\n\n\n##3.2\t`guest` 支持和设置 `virtfs`\n-------\n\n###3.2.1\t在 `guest` 中挂载 `host` 共享的目录\n-------\n\n```cpp\nmkdir /tmp/host_files\nmount -t 9p -o trans=virtio,version=9p2000.L hostshare /tmp/host_files\n```\n\n如果提示 :\n\n```cpp\nmount: unknown filesystem type '9p'\n```\n\n则说明构建的 `guest` 内核不支持 `9p-virtio`.\n需要开启对应的内核选项, 并重新编译.\n\n\n###3.2.2\t需要在 `kernel` 中添加 `9p` 的支持\n-------\n\n\n```cpp\nCONFIG_NET_9P=y\nCONFIG_9P_FS=y\nCONFIG_VIRTIO_PCI=y\nCONFIG_NET_9P_VIRTIO=y\nCONFIG_9P_FS_POSIX_ACL=y\nCONFIG_NET_9P_DEBUG=y (Optional可选)\n```\n\n然后就可以使用了, 如果再加上 `virtio console` 的支持, 那么既有 `shell`, 又可以传输文件\n基本可以代替 `adb` 的常用功能了.\n\n\n最后, 一切就绪之后, 启动 qemu, 就可以看到目录正常挂载了.\n\nhost 机器的共享目录\n\n![host 机器的共享目录](https://github.com/gatieme/AderXCoding/blob/master/system/tools/qemu/0001-9p_virtio/001-9p_virtio_host.png)\n\nguest 机器的挂载点\n\n![guest 机器的挂载点](002-9p_virtio_guest.png)\n\n\n#4\t参考\n-------\n\n[qemu启动命令](http://www.linux-kvm.org/page/9p_virtio)\n\n[kernel配置](http://wiki.qemu.org/Documentation/9psetup)\n\n[qemu添加configure选项](https://groups.google.com/forum/#!topic/coreos-dev/MjhL3tOOAVM)\n\n[qemu中使用9p，支持host和guest中共享目录](https://blog.csdn.net/ayu_ag/article/details/52956351)\n\n[Qemu share folder - 9pnet_virtio: no channels available for device](https://superuser.com/questions/1317119/qemu-share-folder-9pnet-virtio-no-channels-available-for-device)\n\n[Documentation/9psetup](https://wiki.qemu.org/Documentation/9psetup)\n\n[Linux-KVM-9P_virtio](https://www.linux-kvm.org/page/9p_virtio)\n\n<br>\n\n*\t本作品/博文 ( [AderStep-紫夜阑珊-青伶巷草 Copyright ©2013-2017](http://blog.csdn.net/gatieme) ), 由 [成坚(gatieme)](http://blog.csdn.net/gatieme) 创作.\n\n*\t采用<a rel=\"license\" href=\"http://creativecommons.org/licenses/by-nc-sa/4.0/\"><img alt=\"知识共享许可协议\" style=\"border-width:0\" src=\"https://i.creativecommons.org/l/by-nc-sa/4.0/88x31.png\" /></a><a rel=\"license\" href=\"http://creativecommons.org/licenses/by-nc-sa/4.0/\">知识共享署名-非商业性使用-相同方式共享 4.0 国际许可协议</a>进行许可. 欢迎转载、使用、重新发布, 但务必保留文章署名[成坚gatieme](http://blog.csdn.net/gatieme) ( 包含链接: http://blog.csdn.net/gatieme ), 不得用于商业目的. \n\n*\t基于本文修改后的作品务必以相同的许可发布. 如有任何疑问，请与我联系.\n","source":"_posts/2018/09/0003-qemu_use_9pnet_virtio_fs_to_share_folder.md","raw":"---\n\ntitle: qemu中使用 9p virtio, 支持 host 和 guest 中共享目录\ndate: 2018-09-30 19:46\nauthor: gatieme\ntags: qemu\ncategories:\n        - qemu\nthumbnail: \nblogexcerpt: 在使用qemu调试内核的时候, 如果没有网络，想要部署点驱动或者程序上去都需要重新制作文件系统，本文讲解了如何通过 9p virtio fs 实现在 qemu 和 host 机器上共享文件和目录。\n\n---\n\n| CSDN | GitHub | Hexo |\n|:----:|:------:|:----:|\n| [qemu中使用 9p virtio, 支持 host 和 guest 中共享目录](https://blog.csdn.net/gatieme/article/details/82912921) | [`AderXCoding/system/tools/qemu/0001-9p_virtio`](https://github.com/gatieme/AderXCoding/tree/master/system/tools/qemu/0001-9p_virtio) | [gatieme.github.io](https://gatieme.github.io) |\n\n<br>\n\n<a rel=\"license\" href=\"http://creativecommons.org/licenses/by-nc-sa/4.0/\"><img alt=\"知识共享许可协议\" style=\"border-width:0\" src=\"https://i.creativecommons.org/l/by-nc-sa/4.0/88x31.png\" /></a>\n\n本作品采用<a rel=\"license\" href=\"http://creativecommons.org/licenses/by-nc-sa/4.0/\">知识共享署名-非商业性使用-相同方式共享 4.0 国际许可协议</a>进行许可, 转载请注明出处, 谢谢合作\n\n因本人技术水平和知识面有限, 内容如有纰漏或者需要修正的地方, 欢迎大家指正, 也欢迎大家提供一些其他好的调试工具以供收录, 鄙人在此谢谢啦\n\n<br>\n\n\n#1\t问题描述\n-------\n\n使用 qemu 调试内核是很方便的，但是我们有时候想传点驱动或者程序上去跑一下子，都需要重新制作和打包文件系统，这样花费了我们的精力，也很烦。\n\n那有没有什么办法能够在 qemu 和 host 机器之间共享文件呢，这样我们就省去了很多工作量。\n\n> 于是 9p virtio fs 就登场了\n\n#2\t问题分析\n-------\n\n`9p` 是啥，网络文件系统，用于共享目录。当然，qemu中使用9p是用于host和guest中共享目录，也不需要网络的支持，而是需要virtio的支持。\n\n#3\tqemu 使用 9p virtio实现共享目录\n-------\n\n##3.1\t`qemu` 支持和设置 `virtfs`\n-------\n\n###3.1.1\t`qemu` 启动参数添加 `virfts`\n-------\n\n`qemu` 启动参数需要添加 :\n\n```cpp\n-fsdev local,security_model=passthrough,id=fsdev0,path=/tmp/share \\\n-device virtio-9p-pci,id=fs0,fsdev=fsdev0,mount_tag=hostshare\n```\n\n其中 `path` 为 `host` 本地的共享目录\n\n然后提示：\n\n```cpp\n'virtio-9p-pci' is not a valid device model name\n```\n\n需要重新编译 `qemu`, 编译时添加额外的 `configure` 参数 `--enable-virtfs`\n\n\n###3.1.2\t`qemu` 支持 `virtfs`\n-------\n\n\n```cpp\n./configure --enable-kvm --enable-virtfs --prefix=/opt/software/toolchain/qemu\n```\n\n注意 `qemu` 支持 `virtfs` 需要 `libcap` 和 `libattr` 等依赖库.\n\n\n```\n./configure --enable-kvm --enable-virtfs --prefix=/opt/software/toolchain/qemu                            !2818\n\nERROR: VirtFS requires libcap devel and libattr devel\n```\n\n`CentOS` 可以使用如下命令安装\n\n```cpp\nsudo yum install -y libcap-devel\nsudo yum install -y libattr-devel\n```\n\n编译安装 `qemu` 后, 再运行, 可以了.\n\n\n##3.2\t`guest` 支持和设置 `virtfs`\n-------\n\n###3.2.1\t在 `guest` 中挂载 `host` 共享的目录\n-------\n\n```cpp\nmkdir /tmp/host_files\nmount -t 9p -o trans=virtio,version=9p2000.L hostshare /tmp/host_files\n```\n\n如果提示 :\n\n```cpp\nmount: unknown filesystem type '9p'\n```\n\n则说明构建的 `guest` 内核不支持 `9p-virtio`.\n需要开启对应的内核选项, 并重新编译.\n\n\n###3.2.2\t需要在 `kernel` 中添加 `9p` 的支持\n-------\n\n\n```cpp\nCONFIG_NET_9P=y\nCONFIG_9P_FS=y\nCONFIG_VIRTIO_PCI=y\nCONFIG_NET_9P_VIRTIO=y\nCONFIG_9P_FS_POSIX_ACL=y\nCONFIG_NET_9P_DEBUG=y (Optional可选)\n```\n\n然后就可以使用了, 如果再加上 `virtio console` 的支持, 那么既有 `shell`, 又可以传输文件\n基本可以代替 `adb` 的常用功能了.\n\n\n最后, 一切就绪之后, 启动 qemu, 就可以看到目录正常挂载了.\n\nhost 机器的共享目录\n\n![host 机器的共享目录](https://github.com/gatieme/AderXCoding/blob/master/system/tools/qemu/0001-9p_virtio/001-9p_virtio_host.png)\n\nguest 机器的挂载点\n\n![guest 机器的挂载点](002-9p_virtio_guest.png)\n\n\n#4\t参考\n-------\n\n[qemu启动命令](http://www.linux-kvm.org/page/9p_virtio)\n\n[kernel配置](http://wiki.qemu.org/Documentation/9psetup)\n\n[qemu添加configure选项](https://groups.google.com/forum/#!topic/coreos-dev/MjhL3tOOAVM)\n\n[qemu中使用9p，支持host和guest中共享目录](https://blog.csdn.net/ayu_ag/article/details/52956351)\n\n[Qemu share folder - 9pnet_virtio: no channels available for device](https://superuser.com/questions/1317119/qemu-share-folder-9pnet-virtio-no-channels-available-for-device)\n\n[Documentation/9psetup](https://wiki.qemu.org/Documentation/9psetup)\n\n[Linux-KVM-9P_virtio](https://www.linux-kvm.org/page/9p_virtio)\n\n<br>\n\n*\t本作品/博文 ( [AderStep-紫夜阑珊-青伶巷草 Copyright ©2013-2017](http://blog.csdn.net/gatieme) ), 由 [成坚(gatieme)](http://blog.csdn.net/gatieme) 创作.\n\n*\t采用<a rel=\"license\" href=\"http://creativecommons.org/licenses/by-nc-sa/4.0/\"><img alt=\"知识共享许可协议\" style=\"border-width:0\" src=\"https://i.creativecommons.org/l/by-nc-sa/4.0/88x31.png\" /></a><a rel=\"license\" href=\"http://creativecommons.org/licenses/by-nc-sa/4.0/\">知识共享署名-非商业性使用-相同方式共享 4.0 国际许可协议</a>进行许可. 欢迎转载、使用、重新发布, 但务必保留文章署名[成坚gatieme](http://blog.csdn.net/gatieme) ( 包含链接: http://blog.csdn.net/gatieme ), 不得用于商业目的. \n\n*\t基于本文修改后的作品务必以相同的许可发布. 如有任何疑问，请与我联系.\n","slug":"2018/09/0003-qemu_use_9pnet_virtio_fs_to_share_folder","published":1,"updated":"2018-11-17T08:38:39.308Z","_id":"cjmot6shr0000jlozr6abvoxv","comments":1,"layout":"post","photos":[],"link":"","content":"<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">CSDN</th>\n<th style=\"text-align:center\">GitHub</th>\n<th style=\"text-align:center\">Hexo</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\"><a href=\"https://blog.csdn.net/gatieme/article/details/82912921\" target=\"_blank\" rel=\"noopener\">qemu中使用 9p virtio, 支持 host 和 guest 中共享目录</a></td>\n<td style=\"text-align:center\"><a href=\"https://github.com/gatieme/AderXCoding/tree/master/system/tools/qemu/0001-9p_virtio\" target=\"_blank\" rel=\"noopener\"><code>AderXCoding/system/tools/qemu/0001-9p_virtio</code></a></td>\n<td style=\"text-align:center\"><a href=\"https://gatieme.github.io\" target=\"_blank\" rel=\"noopener\">gatieme.github.io</a></td>\n</tr>\n</tbody>\n</table>\n<p><br></p>\n<p><a rel=\"noopener\" href=\"http://creativecommons.org/licenses/by-nc-sa/4.0/\" target=\"_blank\"><img alt=\"知识共享许可协议\" style=\"border-width:0\" src=\"https://i.creativecommons.org/l/by-nc-sa/4.0/88x31.png\"></a></p>\n<p>本作品采用<a rel=\"noopener\" href=\"http://creativecommons.org/licenses/by-nc-sa/4.0/\" target=\"_blank\">知识共享署名-非商业性使用-相同方式共享 4.0 国际许可协议</a>进行许可, 转载请注明出处, 谢谢合作</p>\n<p>因本人技术水平和知识面有限, 内容如有纰漏或者需要修正的地方, 欢迎大家指正, 也欢迎大家提供一些其他好的调试工具以供收录, 鄙人在此谢谢啦</p>\n<p><br></p>\n<h2 id=\"1-问题描述\"><a href=\"#1-问题描述\" class=\"headerlink\" title=\"#1    问题描述\"></a>#1    问题描述</h2><p>使用 qemu 调试内核是很方便的，但是我们有时候想传点驱动或者程序上去跑一下子，都需要重新制作和打包文件系统，这样花费了我们的精力，也很烦。</p>\n<p>那有没有什么办法能够在 qemu 和 host 机器之间共享文件呢，这样我们就省去了很多工作量。</p>\n<blockquote>\n<p>于是 9p virtio fs 就登场了</p>\n</blockquote>\n<h2 id=\"2-问题分析\"><a href=\"#2-问题分析\" class=\"headerlink\" title=\"#2    问题分析\"></a>#2    问题分析</h2><p><code>9p</code> 是啥，网络文件系统，用于共享目录。当然，qemu中使用9p是用于host和guest中共享目录，也不需要网络的支持，而是需要virtio的支持。</p>\n<h2 id=\"3-qemu-使用-9p-virtio实现共享目录\"><a href=\"#3-qemu-使用-9p-virtio实现共享目录\" class=\"headerlink\" title=\"#3    qemu 使用 9p virtio实现共享目录\"></a>#3    qemu 使用 9p virtio实现共享目录</h2><h2 id=\"3-1-qemu-支持和设置-virtfs\"><a href=\"#3-1-qemu-支持和设置-virtfs\" class=\"headerlink\" title=\"##3.1    qemu 支持和设置 virtfs\"></a>##3.1    <code>qemu</code> 支持和设置 <code>virtfs</code></h2><h2 id=\"3-1-1-qemu-启动参数添加-virfts\"><a href=\"#3-1-1-qemu-启动参数添加-virfts\" class=\"headerlink\" title=\"###3.1.1    qemu 启动参数添加 virfts\"></a>###3.1.1    <code>qemu</code> 启动参数添加 <code>virfts</code></h2><p><code>qemu</code> 启动参数需要添加 :</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">-fsdev local,security_model=passthrough,id=fsdev0,path=/tmp/share \\</span><br><span class=\"line\">-device virtio<span class=\"number\">-9</span>p-pci,id=fs0,fsdev=fsdev0,mount_tag=hostshare</span><br></pre></td></tr></table></figure>\n<p>其中 <code>path</code> 为 <code>host</code> 本地的共享目录</p>\n<p>然后提示：</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">'virtio-9p-pci' is not a valid device model name</span><br></pre></td></tr></table></figure>\n<p>需要重新编译 <code>qemu</code>, 编译时添加额外的 <code>configure</code> 参数 <code>--enable-virtfs</code></p>\n<h2 id=\"3-1-2-qemu-支持-virtfs\"><a href=\"#3-1-2-qemu-支持-virtfs\" class=\"headerlink\" title=\"###3.1.2    qemu 支持 virtfs\"></a>###3.1.2    <code>qemu</code> 支持 <code>virtfs</code></h2><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">./configure --enable-kvm --enable-virtfs --prefix=/opt/software/toolchain/qemu</span><br></pre></td></tr></table></figure>\n<p>注意 <code>qemu</code> 支持 <code>virtfs</code> 需要 <code>libcap</code> 和 <code>libattr</code> 等依赖库.</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">./configure --enable-kvm --enable-virtfs --prefix=/opt/software/toolchain/qemu                            !2818</span><br><span class=\"line\"></span><br><span class=\"line\">ERROR: VirtFS requires libcap devel and libattr devel</span><br></pre></td></tr></table></figure>\n<p><code>CentOS</code> 可以使用如下命令安装</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo yum install -y libcap-devel</span><br><span class=\"line\">sudo yum install -y libattr-devel</span><br></pre></td></tr></table></figure>\n<p>编译安装 <code>qemu</code> 后, 再运行, 可以了.</p>\n<h2 id=\"3-2-guest-支持和设置-virtfs\"><a href=\"#3-2-guest-支持和设置-virtfs\" class=\"headerlink\" title=\"##3.2    guest 支持和设置 virtfs\"></a>##3.2    <code>guest</code> 支持和设置 <code>virtfs</code></h2><h2 id=\"3-2-1-在-guest-中挂载-host-共享的目录\"><a href=\"#3-2-1-在-guest-中挂载-host-共享的目录\" class=\"headerlink\" title=\"###3.2.1    在 guest 中挂载 host 共享的目录\"></a>###3.2.1    在 <code>guest</code> 中挂载 <code>host</code> 共享的目录</h2><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mkdir /tmp/host_files</span><br><span class=\"line\">mount -t <span class=\"number\">9</span>p -o trans=virtio,version=<span class=\"number\">9</span>p2000.L hostshare /tmp/host_files</span><br></pre></td></tr></table></figure>\n<p>如果提示 :</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mount: unknown filesystem type '9p'</span><br></pre></td></tr></table></figure>\n<p>则说明构建的 <code>guest</code> 内核不支持 <code>9p-virtio</code>.<br>需要开启对应的内核选项, 并重新编译.</p>\n<h2 id=\"3-2-2-需要在-kernel-中添加-9p-的支持\"><a href=\"#3-2-2-需要在-kernel-中添加-9p-的支持\" class=\"headerlink\" title=\"###3.2.2    需要在 kernel 中添加 9p 的支持\"></a>###3.2.2    需要在 <code>kernel</code> 中添加 <code>9p</code> 的支持</h2><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">CONFIG_NET_9P=y</span><br><span class=\"line\">CONFIG_9P_FS=y</span><br><span class=\"line\">CONFIG_VIRTIO_PCI=y</span><br><span class=\"line\">CONFIG_NET_9P_VIRTIO=y</span><br><span class=\"line\">CONFIG_9P_FS_POSIX_ACL=y</span><br><span class=\"line\">CONFIG_NET_9P_DEBUG=y (Optional可选)</span><br></pre></td></tr></table></figure>\n<p>然后就可以使用了, 如果再加上 <code>virtio console</code> 的支持, 那么既有 <code>shell</code>, 又可以传输文件<br>基本可以代替 <code>adb</code> 的常用功能了.</p>\n<p>最后, 一切就绪之后, 启动 qemu, 就可以看到目录正常挂载了.</p>\n<p>host 机器的共享目录</p>\n<p><img src=\"https://github.com/gatieme/AderXCoding/blob/master/system/tools/qemu/0001-9p_virtio/001-9p_virtio_host.png\" alt=\"host 机器的共享目录\"></p>\n<p>guest 机器的挂载点</p>\n<p><img src=\"002-9p_virtio_guest.png\" alt=\"guest 机器的挂载点\"></p>\n<h2 id=\"4-参考\"><a href=\"#4-参考\" class=\"headerlink\" title=\"#4    参考\"></a>#4    参考</h2><p><a href=\"http://www.linux-kvm.org/page/9p_virtio\" target=\"_blank\" rel=\"noopener\">qemu启动命令</a></p>\n<p><a href=\"http://wiki.qemu.org/Documentation/9psetup\" target=\"_blank\" rel=\"noopener\">kernel配置</a></p>\n<p><a href=\"https://groups.google.com/forum/#!topic/coreos-dev/MjhL3tOOAVM\" target=\"_blank\" rel=\"noopener\">qemu添加configure选项</a></p>\n<p><a href=\"https://blog.csdn.net/ayu_ag/article/details/52956351\" target=\"_blank\" rel=\"noopener\">qemu中使用9p，支持host和guest中共享目录</a></p>\n<p><a href=\"https://superuser.com/questions/1317119/qemu-share-folder-9pnet-virtio-no-channels-available-for-device\" target=\"_blank\" rel=\"noopener\">Qemu share folder - 9pnet_virtio: no channels available for device</a></p>\n<p><a href=\"https://wiki.qemu.org/Documentation/9psetup\" target=\"_blank\" rel=\"noopener\">Documentation/9psetup</a></p>\n<p><a href=\"https://www.linux-kvm.org/page/9p_virtio\" target=\"_blank\" rel=\"noopener\">Linux-KVM-9P_virtio</a></p>\n<p><br></p>\n<ul>\n<li><p>本作品/博文 ( <a href=\"http://blog.csdn.net/gatieme\" target=\"_blank\" rel=\"noopener\">AderStep-紫夜阑珊-青伶巷草 Copyright ©2013-2017</a> ), 由 <a href=\"http://blog.csdn.net/gatieme\" target=\"_blank\" rel=\"noopener\">成坚(gatieme)</a> 创作.</p>\n</li>\n<li><p>采用<a rel=\"noopener\" href=\"http://creativecommons.org/licenses/by-nc-sa/4.0/\" target=\"_blank\"><img alt=\"知识共享许可协议\" style=\"border-width:0\" src=\"https://i.creativecommons.org/l/by-nc-sa/4.0/88x31.png\"></a><a rel=\"noopener\" href=\"http://creativecommons.org/licenses/by-nc-sa/4.0/\" target=\"_blank\">知识共享署名-非商业性使用-相同方式共享 4.0 国际许可协议</a>进行许可. 欢迎转载、使用、重新发布, 但务必保留文章署名<a href=\"http://blog.csdn.net/gatieme\" target=\"_blank\" rel=\"noopener\">成坚gatieme</a> ( 包含链接: <a href=\"http://blog.csdn.net/gatieme\" target=\"_blank\" rel=\"noopener\">http://blog.csdn.net/gatieme</a> ), 不得用于商业目的. </p>\n</li>\n<li><p>基于本文修改后的作品务必以相同的许可发布. 如有任何疑问，请与我联系.</p>\n</li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">CSDN</th>\n<th style=\"text-align:center\">GitHub</th>\n<th style=\"text-align:center\">Hexo</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\"><a href=\"https://blog.csdn.net/gatieme/article/details/82912921\" target=\"_blank\" rel=\"noopener\">qemu中使用 9p virtio, 支持 host 和 guest 中共享目录</a></td>\n<td style=\"text-align:center\"><a href=\"https://github.com/gatieme/AderXCoding/tree/master/system/tools/qemu/0001-9p_virtio\" target=\"_blank\" rel=\"noopener\"><code>AderXCoding/system/tools/qemu/0001-9p_virtio</code></a></td>\n<td style=\"text-align:center\"><a href=\"https://gatieme.github.io\" target=\"_blank\" rel=\"noopener\">gatieme.github.io</a></td>\n</tr>\n</tbody>\n</table>\n<p><br></p>\n<p><a rel=\"noopener\" href=\"http://creativecommons.org/licenses/by-nc-sa/4.0/\" target=\"_blank\"><img alt=\"知识共享许可协议\" style=\"border-width:0\" src=\"https://i.creativecommons.org/l/by-nc-sa/4.0/88x31.png\"></a></p>\n<p>本作品采用<a rel=\"noopener\" href=\"http://creativecommons.org/licenses/by-nc-sa/4.0/\" target=\"_blank\">知识共享署名-非商业性使用-相同方式共享 4.0 国际许可协议</a>进行许可, 转载请注明出处, 谢谢合作</p>\n<p>因本人技术水平和知识面有限, 内容如有纰漏或者需要修正的地方, 欢迎大家指正, 也欢迎大家提供一些其他好的调试工具以供收录, 鄙人在此谢谢啦</p>\n<p><br></p>\n<h2 id=\"1-问题描述\"><a href=\"#1-问题描述\" class=\"headerlink\" title=\"#1    问题描述\"></a>#1    问题描述</h2><p>使用 qemu 调试内核是很方便的，但是我们有时候想传点驱动或者程序上去跑一下子，都需要重新制作和打包文件系统，这样花费了我们的精力，也很烦。</p>\n<p>那有没有什么办法能够在 qemu 和 host 机器之间共享文件呢，这样我们就省去了很多工作量。</p>\n<blockquote>\n<p>于是 9p virtio fs 就登场了</p>\n</blockquote>\n<h2 id=\"2-问题分析\"><a href=\"#2-问题分析\" class=\"headerlink\" title=\"#2    问题分析\"></a>#2    问题分析</h2><p><code>9p</code> 是啥，网络文件系统，用于共享目录。当然，qemu中使用9p是用于host和guest中共享目录，也不需要网络的支持，而是需要virtio的支持。</p>\n<h2 id=\"3-qemu-使用-9p-virtio实现共享目录\"><a href=\"#3-qemu-使用-9p-virtio实现共享目录\" class=\"headerlink\" title=\"#3    qemu 使用 9p virtio实现共享目录\"></a>#3    qemu 使用 9p virtio实现共享目录</h2><h2 id=\"3-1-qemu-支持和设置-virtfs\"><a href=\"#3-1-qemu-支持和设置-virtfs\" class=\"headerlink\" title=\"##3.1    qemu 支持和设置 virtfs\"></a>##3.1    <code>qemu</code> 支持和设置 <code>virtfs</code></h2><h2 id=\"3-1-1-qemu-启动参数添加-virfts\"><a href=\"#3-1-1-qemu-启动参数添加-virfts\" class=\"headerlink\" title=\"###3.1.1    qemu 启动参数添加 virfts\"></a>###3.1.1    <code>qemu</code> 启动参数添加 <code>virfts</code></h2><p><code>qemu</code> 启动参数需要添加 :</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">-fsdev local,security_model=passthrough,id=fsdev0,path=/tmp/share \\</span><br><span class=\"line\">-device virtio<span class=\"number\">-9</span>p-pci,id=fs0,fsdev=fsdev0,mount_tag=hostshare</span><br></pre></td></tr></table></figure>\n<p>其中 <code>path</code> 为 <code>host</code> 本地的共享目录</p>\n<p>然后提示：</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">'virtio-9p-pci' is not a valid device model name</span><br></pre></td></tr></table></figure>\n<p>需要重新编译 <code>qemu</code>, 编译时添加额外的 <code>configure</code> 参数 <code>--enable-virtfs</code></p>\n<h2 id=\"3-1-2-qemu-支持-virtfs\"><a href=\"#3-1-2-qemu-支持-virtfs\" class=\"headerlink\" title=\"###3.1.2    qemu 支持 virtfs\"></a>###3.1.2    <code>qemu</code> 支持 <code>virtfs</code></h2><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">./configure --enable-kvm --enable-virtfs --prefix=/opt/software/toolchain/qemu</span><br></pre></td></tr></table></figure>\n<p>注意 <code>qemu</code> 支持 <code>virtfs</code> 需要 <code>libcap</code> 和 <code>libattr</code> 等依赖库.</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">./configure --enable-kvm --enable-virtfs --prefix=/opt/software/toolchain/qemu                            !2818</span><br><span class=\"line\"></span><br><span class=\"line\">ERROR: VirtFS requires libcap devel and libattr devel</span><br></pre></td></tr></table></figure>\n<p><code>CentOS</code> 可以使用如下命令安装</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo yum install -y libcap-devel</span><br><span class=\"line\">sudo yum install -y libattr-devel</span><br></pre></td></tr></table></figure>\n<p>编译安装 <code>qemu</code> 后, 再运行, 可以了.</p>\n<h2 id=\"3-2-guest-支持和设置-virtfs\"><a href=\"#3-2-guest-支持和设置-virtfs\" class=\"headerlink\" title=\"##3.2    guest 支持和设置 virtfs\"></a>##3.2    <code>guest</code> 支持和设置 <code>virtfs</code></h2><h2 id=\"3-2-1-在-guest-中挂载-host-共享的目录\"><a href=\"#3-2-1-在-guest-中挂载-host-共享的目录\" class=\"headerlink\" title=\"###3.2.1    在 guest 中挂载 host 共享的目录\"></a>###3.2.1    在 <code>guest</code> 中挂载 <code>host</code> 共享的目录</h2><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mkdir /tmp/host_files</span><br><span class=\"line\">mount -t <span class=\"number\">9</span>p -o trans=virtio,version=<span class=\"number\">9</span>p2000.L hostshare /tmp/host_files</span><br></pre></td></tr></table></figure>\n<p>如果提示 :</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mount: unknown filesystem type '9p'</span><br></pre></td></tr></table></figure>\n<p>则说明构建的 <code>guest</code> 内核不支持 <code>9p-virtio</code>.<br>需要开启对应的内核选项, 并重新编译.</p>\n<h2 id=\"3-2-2-需要在-kernel-中添加-9p-的支持\"><a href=\"#3-2-2-需要在-kernel-中添加-9p-的支持\" class=\"headerlink\" title=\"###3.2.2    需要在 kernel 中添加 9p 的支持\"></a>###3.2.2    需要在 <code>kernel</code> 中添加 <code>9p</code> 的支持</h2><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">CONFIG_NET_9P=y</span><br><span class=\"line\">CONFIG_9P_FS=y</span><br><span class=\"line\">CONFIG_VIRTIO_PCI=y</span><br><span class=\"line\">CONFIG_NET_9P_VIRTIO=y</span><br><span class=\"line\">CONFIG_9P_FS_POSIX_ACL=y</span><br><span class=\"line\">CONFIG_NET_9P_DEBUG=y (Optional可选)</span><br></pre></td></tr></table></figure>\n<p>然后就可以使用了, 如果再加上 <code>virtio console</code> 的支持, 那么既有 <code>shell</code>, 又可以传输文件<br>基本可以代替 <code>adb</code> 的常用功能了.</p>\n<p>最后, 一切就绪之后, 启动 qemu, 就可以看到目录正常挂载了.</p>\n<p>host 机器的共享目录</p>\n<p><img src=\"https://github.com/gatieme/AderXCoding/blob/master/system/tools/qemu/0001-9p_virtio/001-9p_virtio_host.png\" alt=\"host 机器的共享目录\"></p>\n<p>guest 机器的挂载点</p>\n<p><img src=\"002-9p_virtio_guest.png\" alt=\"guest 机器的挂载点\"></p>\n<h2 id=\"4-参考\"><a href=\"#4-参考\" class=\"headerlink\" title=\"#4    参考\"></a>#4    参考</h2><p><a href=\"http://www.linux-kvm.org/page/9p_virtio\" target=\"_blank\" rel=\"noopener\">qemu启动命令</a></p>\n<p><a href=\"http://wiki.qemu.org/Documentation/9psetup\" target=\"_blank\" rel=\"noopener\">kernel配置</a></p>\n<p><a href=\"https://groups.google.com/forum/#!topic/coreos-dev/MjhL3tOOAVM\" target=\"_blank\" rel=\"noopener\">qemu添加configure选项</a></p>\n<p><a href=\"https://blog.csdn.net/ayu_ag/article/details/52956351\" target=\"_blank\" rel=\"noopener\">qemu中使用9p，支持host和guest中共享目录</a></p>\n<p><a href=\"https://superuser.com/questions/1317119/qemu-share-folder-9pnet-virtio-no-channels-available-for-device\" target=\"_blank\" rel=\"noopener\">Qemu share folder - 9pnet_virtio: no channels available for device</a></p>\n<p><a href=\"https://wiki.qemu.org/Documentation/9psetup\" target=\"_blank\" rel=\"noopener\">Documentation/9psetup</a></p>\n<p><a href=\"https://www.linux-kvm.org/page/9p_virtio\" target=\"_blank\" rel=\"noopener\">Linux-KVM-9P_virtio</a></p>\n<p><br></p>\n<ul>\n<li><p>本作品/博文 ( <a href=\"http://blog.csdn.net/gatieme\" target=\"_blank\" rel=\"noopener\">AderStep-紫夜阑珊-青伶巷草 Copyright ©2013-2017</a> ), 由 <a href=\"http://blog.csdn.net/gatieme\" target=\"_blank\" rel=\"noopener\">成坚(gatieme)</a> 创作.</p>\n</li>\n<li><p>采用<a rel=\"noopener\" href=\"http://creativecommons.org/licenses/by-nc-sa/4.0/\" target=\"_blank\"><img alt=\"知识共享许可协议\" style=\"border-width:0\" src=\"https://i.creativecommons.org/l/by-nc-sa/4.0/88x31.png\"></a><a rel=\"noopener\" href=\"http://creativecommons.org/licenses/by-nc-sa/4.0/\" target=\"_blank\">知识共享署名-非商业性使用-相同方式共享 4.0 国际许可协议</a>进行许可. 欢迎转载、使用、重新发布, 但务必保留文章署名<a href=\"http://blog.csdn.net/gatieme\" target=\"_blank\" rel=\"noopener\">成坚gatieme</a> ( 包含链接: <a href=\"http://blog.csdn.net/gatieme\" target=\"_blank\" rel=\"noopener\">http://blog.csdn.net/gatieme</a> ), 不得用于商业目的. </p>\n</li>\n<li><p>基于本文修改后的作品务必以相同的许可发布. 如有任何疑问，请与我联系.</p>\n</li>\n</ul>\n"},{"title":"用户态使用 glibc/backtrace 追踪函数调用堆栈定位段错误","date":"2018-11-17T07:22:00.000Z","author":"gatieme","thumbnail":null,"blogexcerpt":"一般用户态程序出现段错误, 而我们想要察看函数运行时堆栈, 常用的方法是使用GDB(bt命令)之类的外部调试器,但是有些时候为了分析程序的BUG,(主要针对长时间运行程序的分析),在程序出错时打印出函数的调用堆栈是非常有用的. C 库中提供了一些堆栈 backtrace 的函数用于跟踪函数的堆栈信息, 我们也可以通过注册异常处理函数来实现函数异常时自动打印调用栈.","_content":"\n| CSDN | GitHub | Hexo |\n|:----:|:------:|:----:|\n| [用户态使用 glibc/backtrace 追踪函数调用堆栈定位段错误](https://blog.csdn.net/gatieme/article/details/84189280) | [`AderXCoding/language/c/backtrace`](https://github.com/gatieme/AderXCoding/tree/master/language/c/backtrace) | [KernelShow(gatieme.github.io)](https://gatieme.github.io/2018/09/30/2018/09/0003-qemu_use_9pnet_virtio_fs_to_share_folder/index) |\n\n<br>\n\n<a rel=\"license\" href=\"http://creativecommons.org/licenses/by-nc-sa/4.0/\"><img alt=\"知识共享许可协议\" style=\"border-width:0\" src=\"https://i.creativecommons.org/l/by-nc-sa/4.0/88x31.png\" /></a>\n\n本作品采用<a rel=\"license\" href=\"http://creativecommons.org/licenses/by-nc-sa/4.0/\">知识共享署名-非商业性使用-相同方式共享 4.0 国际许可协议</a>进行许可, 转载请注明出处, 谢谢合作\n\n因本人技术水平和知识面有限, 内容如有纰漏或者需要修正的地方, 欢迎大家指正, 也欢迎大家提供一些其他好的调试工具以供收录, 鄙人在此谢谢啦\n\n<br>\n\n\n一般察看函数运行时堆栈的方法是使用 `GDB(bt命令)` 之类的外部调试器, 但是, 有些时候为了分析程序的 `BUG`,(主要针对长时间运行程序的分析),在程序出错时打印出函数的调用堆栈是非常有用的.\n\n\n#1\tglibc 获取堆栈信息的接口\n-------\n\n\n在 `glibc` 头文件 `execinfo.h` 中声明了三个函数用于获取当前线程的函数调用堆栈.\n\n\n#1.1\n-------\n\n```cpp\n#include <execinfo.h>\n\n/* Store up to SIZE return address of the current program state in\n   ARRAY and return the exact number of values stored.  */\nint backtrace(void **array, int size);\n\n/* Return names of functions from the backtrace list in ARRAY in a newly\n   malloc()ed memory block.  */\nchar **backtrace_symbols(void *const *array, int size);\n\n/* This function is similar to backtrace_symbols() but it writes the\n   result immediately to a file.  */\nvoid backtrace_symbols_fd(void *const *array, int size, int fd);\n```\n\n使用它们的时候有一下几点需要我们注意的地方：\n\n*\tbacktrace的实现依赖于栈指针(fp寄存器), 在gcc编译过程中任何非零的优化等级（-On参数）或加入了栈指针优化参数 `-fomit-frame-pointer` 后多将不能正确得到程序栈信息;\n\n*\tbacktrace_symbols的实现需要符号名称的支持, 在gcc编译过程中需要加入 `-rdynamic` 参数\n\n*\t内联函数没有栈帧, 它在编译过程中被展开在调用的位置；\n\n*\t尾调用优化(Tail-call Optimization)将复用当前函数栈, 而不再生成新的函数栈, 这将导致栈信息不能正确被获取。\n\n\n##1.2\tbacktrace\n-------\n\n```cpp\nint backtrace(void **buffer,int size)\n```\n\n该函数用于获取当前线程的调用堆栈,\n\n参数:\n\t获取的信息将会被存放在 `buffer` 中,它是一个指针列表.\n\t参数 `size` 用来指定 `buffer` 中可以保存多少个 `void*` 元素.\n\n函数返回值:\n\t实际获取的指针个数, 最大不超过 `size`大小.\n\n在 `buffer` 中的指针实际是从堆栈中获取的返回地址, 每一个堆栈框架有一个返回地址\n\n注意:某些编译器的优化选项对获取正确的调用堆栈有干扰,另外内联函数没有堆栈框架;删除框架指针也会导致无法正确解析堆栈内容\n\n##1.3\tbacktrace_symbols\n-------\n\n```cpp\nchar ** backtrace_symbols (void *const *buffer, int size)\n```\n\n`backtrace_symbols` 将从 `backtrace` 函数获取的信息转化为一个字符串数组.\n\n参数:\n\t`buffer` 应该是从 `backtrace` 函数获取的指针数组\n\t`size` 是该数组中的元素个数(`backtrace` 的返回值)\n\n函数返回值:\n\t一个指向字符串数组的指针, 它的大小同 `buffer` 相同.\n\t每个字符串包含了一个相对于buffer中对应元素的可打印信息.\n\t它包括函数名，函数的偏移地址,和实际的返回地址\n\n现在, 只有使用ELF二进制格式的程序才能获取函数名称和偏移地址. 在其他系统,只有16进制的返回地址能被获取.\n另外,你可能需要传递相应的符号给链接器,以能支持函数名功能\n>(比如,在使用GNU ld链接器的系统中,你需要传递(-rdynamic)， -rdynamic可用来通知链接器将所有符号添加到动态符号表中，如果你的链接器支持-rdynamic的话，建议将其加上！)\n\n该函数的返回值是通过malloc函数申请的空间,因此调用者必须使用free函数来释放指针.\n\n>注意 : 如果不能为字符串获取足够的空间函数的返回值将会为NULL\n\n##1.4\tbacktrace_symbols_fd\n-------\n\n```cpp\nvoid backtrace_symbols_fd (void *const *buffer, int size, int fd)\n```\n\n`backtrace_symbols_fd` 与 `backtrace_symbols` 函数具有相同的功能, 不同的是它不会给调用者返回字符串数组,而是将结果写入文件描述符为 `fd` 的文件中, 每个函数对应一行.它不需要调用malloc函数,因此适用于有可能调用该函数会失败的情况\n\n\n#2\t示例\n-------\n\n\n##2.1\t简单用例(glibc 提供)\n-------\n\n下面是 `glibc` 中的实例：\n\n```cpp\n// http://www.gnu.org/software/libc/manual/html_node/Backtraces.html\n#include <execinfo.h>\n#include <stdio.h>\n#include <stdlib.h>\n\n/* Obtain a backtrace and print it to @code{stdout}. */\nvoid print_trace (void)\n{\n\tvoid    * array[10];\n\tsize_t  size;\n\tchar    ** strings;\n\tsize_t  i;\n\n\tsize = backtrace(array, 10);\n\tstrings = backtrace_symbols (array, size);\n\tif (NULL == strings)\n\t{\n\t\tperror(\"backtrace_symbols\");\n\t\texit(EXIT_FAILURE);\n\t}\n\n\tprintf (\"Obtained %zd stack frames.\\n\", size);\n\n\tfor (i = 0; i < size; i++)\n\t\tprintf (\"%s\\n\", strings[i]);\n\n\tfree (strings);\n\tstrings = NULL;\n}\n\n/* A dummy function to make the backtrace more interesting. */\nvoid dummy_function (void)\n{\n\tprint_trace();\n}\n\nint main (int argc, char *argv[])\n{\n\tdummy_function();\n\treturn 0;\n}\n```\n\n\n输出如下：\n\n\n```cpp\ngcc -c example.c -o example.o    -rdynamic -g\ngcc example.o -o example  -rdynamic -g\n\n#./example\n\nObtained 5 stack frames.\n./example(print_trace+0x19) [0x400916]\n./example(dummy_function+0x9) [0x4009bb]\n./example(main+0x14) [0x4009d1]\n/lib64/libc.so.6(__libc_start_main+0xf5) [0x7fb5e7f49445]\n./example() [0x400839]\n```\n\n![example](./example.png)\n\n##2.2\t简单使用(man手册)\n-------\n\n```cpp\n//http://man7.org/linux/man-pages/man3/backtrace.3.html\n#include <execinfo.h>\n#include <stdio.h>\n#include <stdlib.h>\n#include <unistd.h>\n\n\tvoid\nmyfunc3(void)\n{\n\tint j, nptrs;\n#define SIZE 100\n\tvoid *buffer[100];\n\tchar **strings;\n\n\tnptrs = backtrace(buffer, SIZE);\n\tprintf(\"backtrace() returned %d addresses\\n\", nptrs);\n\n\t/* The call backtrace_symbols_fd(buffer, nptrs,\n\t * STDOUT_FILENO)\n\t *               would produce similar output to the\n\t *               following: */\n\n\tstrings = backtrace_symbols(buffer, nptrs);\n\tif (strings == NULL) {\n\t\tperror(\"backtrace_symbols\");\n\t\texit(EXIT_FAILURE);\n\t}\n\n\tfor (j = 0; j < nptrs; j++)\n\t\tprintf(\"%s\\n\", strings[j]);\n\n\tfree(strings);\n}\n\nstatic void   /* \"static\" means don't export the symbol... */\nmyfunc2(void)\n{\n\tmyfunc3();\n}\n\nvoid\nmyfunc(int ncalls)\n{\n\tif (ncalls > 1)\n\t\tmyfunc(ncalls - 1);\n\telse\n\t\tmyfunc2();\n}\n\n```\n\n编译运行程序\n\n```cpp\ngcc -c prog.c -o prog.o    -rdynamic -g\ngcc prog.o -o prog  -rdynamic -g\n\n\n#./prog 3\n\nbacktrace() returned 8 addresses\n./prog(myfunc3+0x1f) [0x4009cc]\n./prog() [0x400a61]\n./prog(myfunc+0x25) [0x400a88]\n./prog(myfunc+0x1e) [0x400a81]\n./prog(myfunc+0x1e) [0x400a81]\n./prog(main+0x59) [0x400ae3]\n/lib64/libc.so.6(__libc_start_main+0xf5) [0x7f1d1b1f1445]\n./prog() [0x4008e9]\n\n```\n\n![prog](./prog.png)\n\n\n##2.3\t段错误时自动触发 `call trace`\n-------\n\n我们还可以利用这 `backtrace` 来定位段错误位置.\n\n通常情况系, 程序发生段错误时系统会发送 `SIGSEGV` 信号给程序, 缺省处理是退出函数.\n\n我们可以使用 `signal(SIGSEGV, &your_function);` 函数来接管 `SIGSEGV` 信号的处理,\n程序在发生段错误后, 自动调用我们准备好的函数, 从而在那个函数里来获取当前函数调用栈.\n\n\n```cpp\n#include <stdio.h>\n#include <stdlib.h>\n#include <stddef.h>\n#include <execinfo.h>\n#include <signal.h>\n\n/* Obtain a backtrace and print it to stdout. */\n#define ARRAY_SIZE(x) (sizeof(x)/sizeof(x[0]))\nvoid dump_stack(void)\n{\n\tvoid *array[30] = { 0 };\n\tsize_t size = backtrace(array, ARRAY_SIZE(array));\n\tchar **strings = backtrace_symbols(array, size);\n\tsize_t i;\n\n\tif (strings == NULL)\n\t{\n\t\tperror(\"backtrace_symbols.\");\n\t\texit(EXIT_FAILURE);\n\t}\n\n\tprintf(\"Obtained %zd stack frames.\\n\", size);\n\n\tfor (i = 0; i < size; i++)\n\t\tprintf(\"%s\\n\", strings[i]);\n\n\tfree(strings);\n\tstrings = NULL;\n\n\texit(EXIT_SUCCESS);\n}\n\nvoid sighandler_dump_stack(int sig)\n{\n\tpsignal(sig, \"handler\");\n\tdump_stack();\n\tsignal(sig, SIG_DFL);\n\traise(sig);\n}\n\nvoid func_c()\n{\n\t*((volatile int *)0x0) = 0x9999; /* ERROR */\n}\n\nvoid func_b()\n{\n\tfunc_c();\n}\n\nvoid func_a()\n{\n\tfunc_b();\n}\n\n\nint main(int argc, const char *argv[])\n{\n\tif (signal(SIGSEGV, sighandler_dump_stack) == SIG_ERR)\n\t\tperror(\"can't catch SIGSEGV\");\n\n\tfunc_a();\n\n\treturn 0;\n}\n```\n\n编译该程序\n\n```cpp\ncc -c handler.c -o handler.o    -rdynamic\ncc handler.o -o handler  -rdynamic\n```\n\n接着运行.\n\n```cpp\n#./handler\n\nhandler: Segmentation fault\nObtained 9 stack frames.\n./handler(dump_stack+0x39) [0x400aa6]\n./handler(sighandler_dump_stack+0x1f) [0x400b6c]\n/lib64/libc.so.6(+0x362f0) [0x7f0bc00f72f0]\n./handler(func_c+0x9) [0x400b90]\n./handler(func_b+0xe) [0x400ba6]\n./handler(func_a+0xe) [0x400bb6]\n./handler(main+0x38) [0x400bf0]\n/lib64/libc.so.6(__libc_start_main+0xf5) [0x7f0bc00e3445]\n./handler() [0x4009a9]\n```\n\n![程度异常后自动打印调用栈](./handler.png)\n\n可以看出, 真正出异常的函数位置在 `./handler(func_c+0x9) [0x400b90]`.\n\n我们可以看下这个位置位于哪里:\n\n*\t使用 `addr2line`\n\n```cpp\naddr2line -C -f -e  ./handler 0x400b90\n```\n\n![addr2line 将行号显示出来](./addr2line.png)\n\n对应错误的行号.\n\n![bugline](./bugline.png)\n\n*\t使用 `objdump`\n\n使用 objdump 将函数的指令信息 dump 出来.\n其中  -D 参数表示显示所有汇编代码, -S 表示将对应的源码也显示出来\n最后用 grep 显示地址 0x400b90 处前后 6 行的信息\n\n```cpp\nobjdump -DS ./handler | grep -6  \"400b90\"\n```\n\n![objdump 将异常欣喜 dump 出来](./objdump.png)\n\n\n参考代码:\n\n>[a user-space simulated dump_stack(), based on mips.](https://github.com/castoz/backtrace)\n>\n>[kernel perf source dump_stack](https://elixir.bootlin.com/linux/v4.19.2/source/tools/perf/util/debug.c#L260)\n\n\n#3\t更低层次的函数\n-------\n\n只有使用 `glibc 2.1` 或更新版本, 可以使用 `backtrace()` 函数, 参看 `<execinfo.h>`, 并且不同架构和系统中可能有不同的支持.\n\n因此 `GCC` 提供了两个内置函数用来在运行时取得函数调用栈中的返回地址和框架地址\n\n\n```cpp\nvoid *__builtin_return_address(int level);\n```\n\n得到当前函数层次为 level 的返回地址， 即此函数被别的函数调用, 然后此函数执行完毕后, 返回, 所谓返回地址就是调用的时候的地址(其实是调用位置的下一条指令的地址).\n\n```cpp\nvoid* __builtin_frame_address (unsigned int level);\n```\n\n得到当前函数的栈帧的地址.\n\n```cpp\n#include <memory.h>\n#include <stdlib.h>\n#include <stdio.h>\n#include <signal.h>\n#include <ucontext.h>\n#include <dlfcn.h>\n#include <execinfo.h>\n\nvoid showBacktrace()\n{\n        void * ret = __builtin_return_address(1);\n        printf(\"ret address [%p]\\n\", ret);\n        void * caller = __builtin_frame_address(0);\n        printf(\"call address [%p]\\n\", caller);\n#ifdef __cplusplus\n        Dl_info dlinfo;\n\n        void *ip = ret;\n        if(!dladdr(ip, &dlinfo)) {\n                perror(\"addr not found\\n\");\n                return;\n        }\n\n        const char *symname = dlinfo.dli_sname;\n        int f = 0;\n        fprintf(stderr, \"% 2d: %p %s+%u (%s)\\n\",\n                        ++f,\n                        ip,\n                        symname, 0,\n// (unsigned)(ip - dlinfo.dli_saddr),\n\n                        dlinfo.dli_fname);\n#endif\n}\n\nint MyFunc_A()\n{\n        showBacktrace();\n        return 10;\n}\n\nint MyFunc_B()\n{\n        return MyFunc_A();\n}\n\nint main()\n{\n        MyFunc_B();\n        return 0;\n}\n```\n\n![运行结果](./builtin.png)\n\n#4\t参考资料\n-------\n\n[Stack backtrace 的实现](https://www.douban.com/group/topic/54568167/)\n\n\n[backtrace.c：Code Content](http://en.verysource.com/code/6087935_1/backtrace.c.html)\n\n\n[一个glibc中abort不能backtrace的问题](https://www.xuebuyuan.com/2867142.html)\n\n\n[在Linux中如何利用backtrace信息解决问题](https://blog.csdn.net/jxgz_leo/article/details/53458366)\n\n\n[内核中dump_stack()的实现，并在用户态模拟dump_stack()](https://blog.csdn.net/jasonchen_gbd/article/details/44066815?utm_source=blogxgwz8)\n\n\n<br>\n\n*\t本作品/博文 ( [AderStep-紫夜阑珊-青伶巷草 Copyright ©2013-2017](http://blog.csdn.net/gatieme) ), 由 [成坚(gatieme)](http://blog.csdn.net/gatieme) 创作.\n\n*\t采用<a rel=\"license\" href=\"http://creativecommons.org/licenses/by-nc-sa/4.0/\"><img alt=\"知识共享许可协议\" style=\"border-width:0\" src=\"https://i.creativecommons.org/l/by-nc-sa/4.0/88x31.png\" /></a><a rel=\"license\" href=\"http://creativecommons.org/licenses/by-nc-sa/4.0/\">知识共享署名-非商业性使用-相同方式共享 4.0 国际许可协议</a>进行许可. 欢迎转载、使用、重新发布, 但务必保留文章署名[成坚gatieme](http://blog.csdn.net/gatieme) ( 包含链接: http://blog.csdn.net/gatieme ), 不得用于商业目的.\n\n*\t基于本文修改后的作品务必以相同的许可发布. 如有任何疑问，请与我联系.\n","source":"_posts/2018/11/0001-use_glibc_backtrace_to_report_active_stack_frames_userspace.md","raw":"---\n\ntitle: 用户态使用 glibc/backtrace 追踪函数调用堆栈定位段错误\ndate: 2018-11-17 15:22\nauthor: gatieme\ntags: linux\ncategories:\n        - debug\nthumbnail:\nblogexcerpt: 一般用户态程序出现段错误, 而我们想要察看函数运行时堆栈, 常用的方法是使用GDB(bt命令)之类的外部调试器,但是有些时候为了分析程序的BUG,(主要针对长时间运行程序的分析),在程序出错时打印出函数的调用堆栈是非常有用的. C 库中提供了一些堆栈 backtrace 的函数用于跟踪函数的堆栈信息, 我们也可以通过注册异常处理函数来实现函数异常时自动打印调用栈.\n\n---\n\n| CSDN | GitHub | Hexo |\n|:----:|:------:|:----:|\n| [用户态使用 glibc/backtrace 追踪函数调用堆栈定位段错误](https://blog.csdn.net/gatieme/article/details/84189280) | [`AderXCoding/language/c/backtrace`](https://github.com/gatieme/AderXCoding/tree/master/language/c/backtrace) | [KernelShow(gatieme.github.io)](https://gatieme.github.io/2018/09/30/2018/09/0003-qemu_use_9pnet_virtio_fs_to_share_folder/index) |\n\n<br>\n\n<a rel=\"license\" href=\"http://creativecommons.org/licenses/by-nc-sa/4.0/\"><img alt=\"知识共享许可协议\" style=\"border-width:0\" src=\"https://i.creativecommons.org/l/by-nc-sa/4.0/88x31.png\" /></a>\n\n本作品采用<a rel=\"license\" href=\"http://creativecommons.org/licenses/by-nc-sa/4.0/\">知识共享署名-非商业性使用-相同方式共享 4.0 国际许可协议</a>进行许可, 转载请注明出处, 谢谢合作\n\n因本人技术水平和知识面有限, 内容如有纰漏或者需要修正的地方, 欢迎大家指正, 也欢迎大家提供一些其他好的调试工具以供收录, 鄙人在此谢谢啦\n\n<br>\n\n\n一般察看函数运行时堆栈的方法是使用 `GDB(bt命令)` 之类的外部调试器, 但是, 有些时候为了分析程序的 `BUG`,(主要针对长时间运行程序的分析),在程序出错时打印出函数的调用堆栈是非常有用的.\n\n\n#1\tglibc 获取堆栈信息的接口\n-------\n\n\n在 `glibc` 头文件 `execinfo.h` 中声明了三个函数用于获取当前线程的函数调用堆栈.\n\n\n#1.1\n-------\n\n```cpp\n#include <execinfo.h>\n\n/* Store up to SIZE return address of the current program state in\n   ARRAY and return the exact number of values stored.  */\nint backtrace(void **array, int size);\n\n/* Return names of functions from the backtrace list in ARRAY in a newly\n   malloc()ed memory block.  */\nchar **backtrace_symbols(void *const *array, int size);\n\n/* This function is similar to backtrace_symbols() but it writes the\n   result immediately to a file.  */\nvoid backtrace_symbols_fd(void *const *array, int size, int fd);\n```\n\n使用它们的时候有一下几点需要我们注意的地方：\n\n*\tbacktrace的实现依赖于栈指针(fp寄存器), 在gcc编译过程中任何非零的优化等级（-On参数）或加入了栈指针优化参数 `-fomit-frame-pointer` 后多将不能正确得到程序栈信息;\n\n*\tbacktrace_symbols的实现需要符号名称的支持, 在gcc编译过程中需要加入 `-rdynamic` 参数\n\n*\t内联函数没有栈帧, 它在编译过程中被展开在调用的位置；\n\n*\t尾调用优化(Tail-call Optimization)将复用当前函数栈, 而不再生成新的函数栈, 这将导致栈信息不能正确被获取。\n\n\n##1.2\tbacktrace\n-------\n\n```cpp\nint backtrace(void **buffer,int size)\n```\n\n该函数用于获取当前线程的调用堆栈,\n\n参数:\n\t获取的信息将会被存放在 `buffer` 中,它是一个指针列表.\n\t参数 `size` 用来指定 `buffer` 中可以保存多少个 `void*` 元素.\n\n函数返回值:\n\t实际获取的指针个数, 最大不超过 `size`大小.\n\n在 `buffer` 中的指针实际是从堆栈中获取的返回地址, 每一个堆栈框架有一个返回地址\n\n注意:某些编译器的优化选项对获取正确的调用堆栈有干扰,另外内联函数没有堆栈框架;删除框架指针也会导致无法正确解析堆栈内容\n\n##1.3\tbacktrace_symbols\n-------\n\n```cpp\nchar ** backtrace_symbols (void *const *buffer, int size)\n```\n\n`backtrace_symbols` 将从 `backtrace` 函数获取的信息转化为一个字符串数组.\n\n参数:\n\t`buffer` 应该是从 `backtrace` 函数获取的指针数组\n\t`size` 是该数组中的元素个数(`backtrace` 的返回值)\n\n函数返回值:\n\t一个指向字符串数组的指针, 它的大小同 `buffer` 相同.\n\t每个字符串包含了一个相对于buffer中对应元素的可打印信息.\n\t它包括函数名，函数的偏移地址,和实际的返回地址\n\n现在, 只有使用ELF二进制格式的程序才能获取函数名称和偏移地址. 在其他系统,只有16进制的返回地址能被获取.\n另外,你可能需要传递相应的符号给链接器,以能支持函数名功能\n>(比如,在使用GNU ld链接器的系统中,你需要传递(-rdynamic)， -rdynamic可用来通知链接器将所有符号添加到动态符号表中，如果你的链接器支持-rdynamic的话，建议将其加上！)\n\n该函数的返回值是通过malloc函数申请的空间,因此调用者必须使用free函数来释放指针.\n\n>注意 : 如果不能为字符串获取足够的空间函数的返回值将会为NULL\n\n##1.4\tbacktrace_symbols_fd\n-------\n\n```cpp\nvoid backtrace_symbols_fd (void *const *buffer, int size, int fd)\n```\n\n`backtrace_symbols_fd` 与 `backtrace_symbols` 函数具有相同的功能, 不同的是它不会给调用者返回字符串数组,而是将结果写入文件描述符为 `fd` 的文件中, 每个函数对应一行.它不需要调用malloc函数,因此适用于有可能调用该函数会失败的情况\n\n\n#2\t示例\n-------\n\n\n##2.1\t简单用例(glibc 提供)\n-------\n\n下面是 `glibc` 中的实例：\n\n```cpp\n// http://www.gnu.org/software/libc/manual/html_node/Backtraces.html\n#include <execinfo.h>\n#include <stdio.h>\n#include <stdlib.h>\n\n/* Obtain a backtrace and print it to @code{stdout}. */\nvoid print_trace (void)\n{\n\tvoid    * array[10];\n\tsize_t  size;\n\tchar    ** strings;\n\tsize_t  i;\n\n\tsize = backtrace(array, 10);\n\tstrings = backtrace_symbols (array, size);\n\tif (NULL == strings)\n\t{\n\t\tperror(\"backtrace_symbols\");\n\t\texit(EXIT_FAILURE);\n\t}\n\n\tprintf (\"Obtained %zd stack frames.\\n\", size);\n\n\tfor (i = 0; i < size; i++)\n\t\tprintf (\"%s\\n\", strings[i]);\n\n\tfree (strings);\n\tstrings = NULL;\n}\n\n/* A dummy function to make the backtrace more interesting. */\nvoid dummy_function (void)\n{\n\tprint_trace();\n}\n\nint main (int argc, char *argv[])\n{\n\tdummy_function();\n\treturn 0;\n}\n```\n\n\n输出如下：\n\n\n```cpp\ngcc -c example.c -o example.o    -rdynamic -g\ngcc example.o -o example  -rdynamic -g\n\n#./example\n\nObtained 5 stack frames.\n./example(print_trace+0x19) [0x400916]\n./example(dummy_function+0x9) [0x4009bb]\n./example(main+0x14) [0x4009d1]\n/lib64/libc.so.6(__libc_start_main+0xf5) [0x7fb5e7f49445]\n./example() [0x400839]\n```\n\n![example](./example.png)\n\n##2.2\t简单使用(man手册)\n-------\n\n```cpp\n//http://man7.org/linux/man-pages/man3/backtrace.3.html\n#include <execinfo.h>\n#include <stdio.h>\n#include <stdlib.h>\n#include <unistd.h>\n\n\tvoid\nmyfunc3(void)\n{\n\tint j, nptrs;\n#define SIZE 100\n\tvoid *buffer[100];\n\tchar **strings;\n\n\tnptrs = backtrace(buffer, SIZE);\n\tprintf(\"backtrace() returned %d addresses\\n\", nptrs);\n\n\t/* The call backtrace_symbols_fd(buffer, nptrs,\n\t * STDOUT_FILENO)\n\t *               would produce similar output to the\n\t *               following: */\n\n\tstrings = backtrace_symbols(buffer, nptrs);\n\tif (strings == NULL) {\n\t\tperror(\"backtrace_symbols\");\n\t\texit(EXIT_FAILURE);\n\t}\n\n\tfor (j = 0; j < nptrs; j++)\n\t\tprintf(\"%s\\n\", strings[j]);\n\n\tfree(strings);\n}\n\nstatic void   /* \"static\" means don't export the symbol... */\nmyfunc2(void)\n{\n\tmyfunc3();\n}\n\nvoid\nmyfunc(int ncalls)\n{\n\tif (ncalls > 1)\n\t\tmyfunc(ncalls - 1);\n\telse\n\t\tmyfunc2();\n}\n\n```\n\n编译运行程序\n\n```cpp\ngcc -c prog.c -o prog.o    -rdynamic -g\ngcc prog.o -o prog  -rdynamic -g\n\n\n#./prog 3\n\nbacktrace() returned 8 addresses\n./prog(myfunc3+0x1f) [0x4009cc]\n./prog() [0x400a61]\n./prog(myfunc+0x25) [0x400a88]\n./prog(myfunc+0x1e) [0x400a81]\n./prog(myfunc+0x1e) [0x400a81]\n./prog(main+0x59) [0x400ae3]\n/lib64/libc.so.6(__libc_start_main+0xf5) [0x7f1d1b1f1445]\n./prog() [0x4008e9]\n\n```\n\n![prog](./prog.png)\n\n\n##2.3\t段错误时自动触发 `call trace`\n-------\n\n我们还可以利用这 `backtrace` 来定位段错误位置.\n\n通常情况系, 程序发生段错误时系统会发送 `SIGSEGV` 信号给程序, 缺省处理是退出函数.\n\n我们可以使用 `signal(SIGSEGV, &your_function);` 函数来接管 `SIGSEGV` 信号的处理,\n程序在发生段错误后, 自动调用我们准备好的函数, 从而在那个函数里来获取当前函数调用栈.\n\n\n```cpp\n#include <stdio.h>\n#include <stdlib.h>\n#include <stddef.h>\n#include <execinfo.h>\n#include <signal.h>\n\n/* Obtain a backtrace and print it to stdout. */\n#define ARRAY_SIZE(x) (sizeof(x)/sizeof(x[0]))\nvoid dump_stack(void)\n{\n\tvoid *array[30] = { 0 };\n\tsize_t size = backtrace(array, ARRAY_SIZE(array));\n\tchar **strings = backtrace_symbols(array, size);\n\tsize_t i;\n\n\tif (strings == NULL)\n\t{\n\t\tperror(\"backtrace_symbols.\");\n\t\texit(EXIT_FAILURE);\n\t}\n\n\tprintf(\"Obtained %zd stack frames.\\n\", size);\n\n\tfor (i = 0; i < size; i++)\n\t\tprintf(\"%s\\n\", strings[i]);\n\n\tfree(strings);\n\tstrings = NULL;\n\n\texit(EXIT_SUCCESS);\n}\n\nvoid sighandler_dump_stack(int sig)\n{\n\tpsignal(sig, \"handler\");\n\tdump_stack();\n\tsignal(sig, SIG_DFL);\n\traise(sig);\n}\n\nvoid func_c()\n{\n\t*((volatile int *)0x0) = 0x9999; /* ERROR */\n}\n\nvoid func_b()\n{\n\tfunc_c();\n}\n\nvoid func_a()\n{\n\tfunc_b();\n}\n\n\nint main(int argc, const char *argv[])\n{\n\tif (signal(SIGSEGV, sighandler_dump_stack) == SIG_ERR)\n\t\tperror(\"can't catch SIGSEGV\");\n\n\tfunc_a();\n\n\treturn 0;\n}\n```\n\n编译该程序\n\n```cpp\ncc -c handler.c -o handler.o    -rdynamic\ncc handler.o -o handler  -rdynamic\n```\n\n接着运行.\n\n```cpp\n#./handler\n\nhandler: Segmentation fault\nObtained 9 stack frames.\n./handler(dump_stack+0x39) [0x400aa6]\n./handler(sighandler_dump_stack+0x1f) [0x400b6c]\n/lib64/libc.so.6(+0x362f0) [0x7f0bc00f72f0]\n./handler(func_c+0x9) [0x400b90]\n./handler(func_b+0xe) [0x400ba6]\n./handler(func_a+0xe) [0x400bb6]\n./handler(main+0x38) [0x400bf0]\n/lib64/libc.so.6(__libc_start_main+0xf5) [0x7f0bc00e3445]\n./handler() [0x4009a9]\n```\n\n![程度异常后自动打印调用栈](./handler.png)\n\n可以看出, 真正出异常的函数位置在 `./handler(func_c+0x9) [0x400b90]`.\n\n我们可以看下这个位置位于哪里:\n\n*\t使用 `addr2line`\n\n```cpp\naddr2line -C -f -e  ./handler 0x400b90\n```\n\n![addr2line 将行号显示出来](./addr2line.png)\n\n对应错误的行号.\n\n![bugline](./bugline.png)\n\n*\t使用 `objdump`\n\n使用 objdump 将函数的指令信息 dump 出来.\n其中  -D 参数表示显示所有汇编代码, -S 表示将对应的源码也显示出来\n最后用 grep 显示地址 0x400b90 处前后 6 行的信息\n\n```cpp\nobjdump -DS ./handler | grep -6  \"400b90\"\n```\n\n![objdump 将异常欣喜 dump 出来](./objdump.png)\n\n\n参考代码:\n\n>[a user-space simulated dump_stack(), based on mips.](https://github.com/castoz/backtrace)\n>\n>[kernel perf source dump_stack](https://elixir.bootlin.com/linux/v4.19.2/source/tools/perf/util/debug.c#L260)\n\n\n#3\t更低层次的函数\n-------\n\n只有使用 `glibc 2.1` 或更新版本, 可以使用 `backtrace()` 函数, 参看 `<execinfo.h>`, 并且不同架构和系统中可能有不同的支持.\n\n因此 `GCC` 提供了两个内置函数用来在运行时取得函数调用栈中的返回地址和框架地址\n\n\n```cpp\nvoid *__builtin_return_address(int level);\n```\n\n得到当前函数层次为 level 的返回地址， 即此函数被别的函数调用, 然后此函数执行完毕后, 返回, 所谓返回地址就是调用的时候的地址(其实是调用位置的下一条指令的地址).\n\n```cpp\nvoid* __builtin_frame_address (unsigned int level);\n```\n\n得到当前函数的栈帧的地址.\n\n```cpp\n#include <memory.h>\n#include <stdlib.h>\n#include <stdio.h>\n#include <signal.h>\n#include <ucontext.h>\n#include <dlfcn.h>\n#include <execinfo.h>\n\nvoid showBacktrace()\n{\n        void * ret = __builtin_return_address(1);\n        printf(\"ret address [%p]\\n\", ret);\n        void * caller = __builtin_frame_address(0);\n        printf(\"call address [%p]\\n\", caller);\n#ifdef __cplusplus\n        Dl_info dlinfo;\n\n        void *ip = ret;\n        if(!dladdr(ip, &dlinfo)) {\n                perror(\"addr not found\\n\");\n                return;\n        }\n\n        const char *symname = dlinfo.dli_sname;\n        int f = 0;\n        fprintf(stderr, \"% 2d: %p %s+%u (%s)\\n\",\n                        ++f,\n                        ip,\n                        symname, 0,\n// (unsigned)(ip - dlinfo.dli_saddr),\n\n                        dlinfo.dli_fname);\n#endif\n}\n\nint MyFunc_A()\n{\n        showBacktrace();\n        return 10;\n}\n\nint MyFunc_B()\n{\n        return MyFunc_A();\n}\n\nint main()\n{\n        MyFunc_B();\n        return 0;\n}\n```\n\n![运行结果](./builtin.png)\n\n#4\t参考资料\n-------\n\n[Stack backtrace 的实现](https://www.douban.com/group/topic/54568167/)\n\n\n[backtrace.c：Code Content](http://en.verysource.com/code/6087935_1/backtrace.c.html)\n\n\n[一个glibc中abort不能backtrace的问题](https://www.xuebuyuan.com/2867142.html)\n\n\n[在Linux中如何利用backtrace信息解决问题](https://blog.csdn.net/jxgz_leo/article/details/53458366)\n\n\n[内核中dump_stack()的实现，并在用户态模拟dump_stack()](https://blog.csdn.net/jasonchen_gbd/article/details/44066815?utm_source=blogxgwz8)\n\n\n<br>\n\n*\t本作品/博文 ( [AderStep-紫夜阑珊-青伶巷草 Copyright ©2013-2017](http://blog.csdn.net/gatieme) ), 由 [成坚(gatieme)](http://blog.csdn.net/gatieme) 创作.\n\n*\t采用<a rel=\"license\" href=\"http://creativecommons.org/licenses/by-nc-sa/4.0/\"><img alt=\"知识共享许可协议\" style=\"border-width:0\" src=\"https://i.creativecommons.org/l/by-nc-sa/4.0/88x31.png\" /></a><a rel=\"license\" href=\"http://creativecommons.org/licenses/by-nc-sa/4.0/\">知识共享署名-非商业性使用-相同方式共享 4.0 国际许可协议</a>进行许可. 欢迎转载、使用、重新发布, 但务必保留文章署名[成坚gatieme](http://blog.csdn.net/gatieme) ( 包含链接: http://blog.csdn.net/gatieme ), 不得用于商业目的.\n\n*\t基于本文修改后的作品务必以相同的许可发布. 如有任何疑问，请与我联系.\n","slug":"2018/11/0001-use_glibc_backtrace_to_report_active_stack_frames_userspace","published":1,"updated":"2018-11-17T08:44:22.091Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjol7oucy0000rlozowmj494z","content":"<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">CSDN</th>\n<th style=\"text-align:center\">GitHub</th>\n<th style=\"text-align:center\">Hexo</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\"><a href=\"https://blog.csdn.net/gatieme/article/details/84189280\" target=\"_blank\" rel=\"noopener\">用户态使用 glibc/backtrace 追踪函数调用堆栈定位段错误</a></td>\n<td style=\"text-align:center\"><a href=\"https://github.com/gatieme/AderXCoding/tree/master/language/c/backtrace\" target=\"_blank\" rel=\"noopener\"><code>AderXCoding/language/c/backtrace</code></a></td>\n<td style=\"text-align:center\"><a href=\"https://gatieme.github.io/2018/09/30/2018/09/0003-qemu_use_9pnet_virtio_fs_to_share_folder/index\" target=\"_blank\" rel=\"noopener\">KernelShow(gatieme.github.io)</a></td>\n</tr>\n</tbody>\n</table>\n<p><br></p>\n<p><a rel=\"noopener\" href=\"http://creativecommons.org/licenses/by-nc-sa/4.0/\" target=\"_blank\"><img alt=\"知识共享许可协议\" style=\"border-width:0\" src=\"https://i.creativecommons.org/l/by-nc-sa/4.0/88x31.png\"></a></p>\n<p>本作品采用<a rel=\"noopener\" href=\"http://creativecommons.org/licenses/by-nc-sa/4.0/\" target=\"_blank\">知识共享署名-非商业性使用-相同方式共享 4.0 国际许可协议</a>进行许可, 转载请注明出处, 谢谢合作</p>\n<p>因本人技术水平和知识面有限, 内容如有纰漏或者需要修正的地方, 欢迎大家指正, 也欢迎大家提供一些其他好的调试工具以供收录, 鄙人在此谢谢啦</p>\n<p><br></p>\n<p>一般察看函数运行时堆栈的方法是使用 <code>GDB(bt命令)</code> 之类的外部调试器, 但是, 有些时候为了分析程序的 <code>BUG</code>,(主要针对长时间运行程序的分析),在程序出错时打印出函数的调用堆栈是非常有用的.</p>\n<h2 id=\"1-glibc-获取堆栈信息的接口\"><a href=\"#1-glibc-获取堆栈信息的接口\" class=\"headerlink\" title=\"#1    glibc 获取堆栈信息的接口\"></a>#1    glibc 获取堆栈信息的接口</h2><p>在 <code>glibc</code> 头文件 <code>execinfo.h</code> 中声明了三个函数用于获取当前线程的函数调用堆栈.</p>\n<h2 id=\"1-1\"><a href=\"#1-1\" class=\"headerlink\" title=\"#1.1\"></a>#1.1</h2><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;execinfo.h&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/* Store up to SIZE return address of the current program state in</span></span><br><span class=\"line\"><span class=\"comment\">   ARRAY and return the exact number of values stored.  */</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">backtrace</span><span class=\"params\">(<span class=\"keyword\">void</span> **<span class=\"built_in\">array</span>, <span class=\"keyword\">int</span> size)</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/* Return names of functions from the backtrace list in ARRAY in a newly</span></span><br><span class=\"line\"><span class=\"comment\">   malloc()ed memory block.  */</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">char</span> **<span class=\"title\">backtrace_symbols</span><span class=\"params\">(<span class=\"keyword\">void</span> *<span class=\"keyword\">const</span> *<span class=\"built_in\">array</span>, <span class=\"keyword\">int</span> size)</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/* This function is similar to backtrace_symbols() but it writes the</span></span><br><span class=\"line\"><span class=\"comment\">   result immediately to a file.  */</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">backtrace_symbols_fd</span><span class=\"params\">(<span class=\"keyword\">void</span> *<span class=\"keyword\">const</span> *<span class=\"built_in\">array</span>, <span class=\"keyword\">int</span> size, <span class=\"keyword\">int</span> fd)</span></span>;</span><br></pre></td></tr></table></figure>\n<p>使用它们的时候有一下几点需要我们注意的地方：</p>\n<ul>\n<li><p>backtrace的实现依赖于栈指针(fp寄存器), 在gcc编译过程中任何非零的优化等级（-On参数）或加入了栈指针优化参数 <code>-fomit-frame-pointer</code> 后多将不能正确得到程序栈信息;</p>\n</li>\n<li><p>backtrace_symbols的实现需要符号名称的支持, 在gcc编译过程中需要加入 <code>-rdynamic</code> 参数</p>\n</li>\n<li><p>内联函数没有栈帧, 它在编译过程中被展开在调用的位置；</p>\n</li>\n<li><p>尾调用优化(Tail-call Optimization)将复用当前函数栈, 而不再生成新的函数栈, 这将导致栈信息不能正确被获取。</p>\n</li>\n</ul>\n<h2 id=\"1-2-backtrace\"><a href=\"#1-2-backtrace\" class=\"headerlink\" title=\"##1.2    backtrace\"></a>##1.2    backtrace</h2><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">backtrace</span><span class=\"params\">(<span class=\"keyword\">void</span> **buffer,<span class=\"keyword\">int</span> size)</span></span></span><br></pre></td></tr></table></figure>\n<p>该函数用于获取当前线程的调用堆栈,</p>\n<p>参数:<br>    获取的信息将会被存放在 <code>buffer</code> 中,它是一个指针列表.<br>    参数 <code>size</code> 用来指定 <code>buffer</code> 中可以保存多少个 <code>void*</code> 元素.</p>\n<p>函数返回值:<br>    实际获取的指针个数, 最大不超过 <code>size</code>大小.</p>\n<p>在 <code>buffer</code> 中的指针实际是从堆栈中获取的返回地址, 每一个堆栈框架有一个返回地址</p>\n<p>注意:某些编译器的优化选项对获取正确的调用堆栈有干扰,另外内联函数没有堆栈框架;删除框架指针也会导致无法正确解析堆栈内容</p>\n<h2 id=\"1-3-backtrace-symbols\"><a href=\"#1-3-backtrace-symbols\" class=\"headerlink\" title=\"##1.3    backtrace_symbols\"></a>##1.3    backtrace_symbols</h2><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">char</span> ** <span class=\"title\">backtrace_symbols</span> <span class=\"params\">(<span class=\"keyword\">void</span> *<span class=\"keyword\">const</span> *buffer, <span class=\"keyword\">int</span> size)</span></span></span><br></pre></td></tr></table></figure>\n<p><code>backtrace_symbols</code> 将从 <code>backtrace</code> 函数获取的信息转化为一个字符串数组.</p>\n<p>参数:<br>    <code>buffer</code> 应该是从 <code>backtrace</code> 函数获取的指针数组<br>    <code>size</code> 是该数组中的元素个数(<code>backtrace</code> 的返回值)</p>\n<p>函数返回值:<br>    一个指向字符串数组的指针, 它的大小同 <code>buffer</code> 相同.<br>    每个字符串包含了一个相对于buffer中对应元素的可打印信息.<br>    它包括函数名，函数的偏移地址,和实际的返回地址</p>\n<p>现在, 只有使用ELF二进制格式的程序才能获取函数名称和偏移地址. 在其他系统,只有16进制的返回地址能被获取.<br>另外,你可能需要传递相应的符号给链接器,以能支持函数名功能</p>\n<blockquote>\n<p>(比如,在使用GNU ld链接器的系统中,你需要传递(-rdynamic)， -rdynamic可用来通知链接器将所有符号添加到动态符号表中，如果你的链接器支持-rdynamic的话，建议将其加上！)</p>\n</blockquote>\n<p>该函数的返回值是通过malloc函数申请的空间,因此调用者必须使用free函数来释放指针.</p>\n<blockquote>\n<p>注意 : 如果不能为字符串获取足够的空间函数的返回值将会为NULL</p>\n</blockquote>\n<h2 id=\"1-4-backtrace-symbols-fd\"><a href=\"#1-4-backtrace-symbols-fd\" class=\"headerlink\" title=\"##1.4    backtrace_symbols_fd\"></a>##1.4    backtrace_symbols_fd</h2><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">backtrace_symbols_fd</span> <span class=\"params\">(<span class=\"keyword\">void</span> *<span class=\"keyword\">const</span> *buffer, <span class=\"keyword\">int</span> size, <span class=\"keyword\">int</span> fd)</span></span></span><br></pre></td></tr></table></figure>\n<p><code>backtrace_symbols_fd</code> 与 <code>backtrace_symbols</code> 函数具有相同的功能, 不同的是它不会给调用者返回字符串数组,而是将结果写入文件描述符为 <code>fd</code> 的文件中, 每个函数对应一行.它不需要调用malloc函数,因此适用于有可能调用该函数会失败的情况</p>\n<h2 id=\"2-示例\"><a href=\"#2-示例\" class=\"headerlink\" title=\"#2    示例\"></a>#2    示例</h2><h2 id=\"2-1-简单用例-glibc-提供\"><a href=\"#2-1-简单用例-glibc-提供\" class=\"headerlink\" title=\"##2.1    简单用例(glibc 提供)\"></a>##2.1    简单用例(glibc 提供)</h2><p>下面是 <code>glibc</code> 中的实例：</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// http://www.gnu.org/software/libc/manual/html_node/Backtraces.html</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;execinfo.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;stdio.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;stdlib.h&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/* Obtain a backtrace and print it to @code&#123;stdout&#125;. */</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">print_trace</span> <span class=\"params\">(<span class=\"keyword\">void</span>)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">void</span>    * <span class=\"built_in\">array</span>[<span class=\"number\">10</span>];</span><br><span class=\"line\">\t<span class=\"keyword\">size_t</span>  size;</span><br><span class=\"line\">\t<span class=\"keyword\">char</span>    ** strings;</span><br><span class=\"line\">\t<span class=\"keyword\">size_t</span>  i;</span><br><span class=\"line\"></span><br><span class=\"line\">\tsize = backtrace(<span class=\"built_in\">array</span>, <span class=\"number\">10</span>);</span><br><span class=\"line\">\tstrings = backtrace_symbols (<span class=\"built_in\">array</span>, size);</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (<span class=\"literal\">NULL</span> == strings)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\tperror(<span class=\"string\">\"backtrace_symbols\"</span>);</span><br><span class=\"line\">\t\t<span class=\"built_in\">exit</span>(EXIT_FAILURE);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"built_in\">printf</span> (<span class=\"string\">\"Obtained %zd stack frames.\\n\"</span>, size);</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (i = <span class=\"number\">0</span>; i &lt; size; i++)</span><br><span class=\"line\">\t\t<span class=\"built_in\">printf</span> (<span class=\"string\">\"%s\\n\"</span>, strings[i]);</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"built_in\">free</span> (strings);</span><br><span class=\"line\">\tstrings = <span class=\"literal\">NULL</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/* A dummy function to make the backtrace more interesting. */</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">dummy_function</span> <span class=\"params\">(<span class=\"keyword\">void</span>)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\tprint_trace();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span> <span class=\"params\">(<span class=\"keyword\">int</span> argc, <span class=\"keyword\">char</span> *argv[])</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\tdummy_function();</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>输出如下：</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">gcc -c example.c -o example.o    -rdynamic -g</span><br><span class=\"line\">gcc example.o -o example  -rdynamic -g</span><br><span class=\"line\"></span><br><span class=\"line\">#./example</span><br><span class=\"line\"></span><br><span class=\"line\">Obtained <span class=\"number\">5</span> <span class=\"built_in\">stack</span> frames.</span><br><span class=\"line\">./example(print_trace+<span class=\"number\">0x19</span>) [<span class=\"number\">0x400916</span>]</span><br><span class=\"line\">./example(dummy_function+<span class=\"number\">0x9</span>) [<span class=\"number\">0x4009bb</span>]</span><br><span class=\"line\">./example(main+<span class=\"number\">0x14</span>) [<span class=\"number\">0x4009d1</span>]</span><br><span class=\"line\">/lib64/libc.so<span class=\"number\">.6</span>(__libc_start_main+<span class=\"number\">0xf5</span>) [<span class=\"number\">0x7fb5e7f49445</span>]</span><br><span class=\"line\">./example() [<span class=\"number\">0x400839</span>]</span><br></pre></td></tr></table></figure>\n<p><img src=\"/2018/11/17/2018/11/0001-use_glibc_backtrace_to_report_active_stack_frames_userspace/./example.png\" alt=\"example\"></p>\n<h2 id=\"2-2-简单使用-man手册\"><a href=\"#2-2-简单使用-man手册\" class=\"headerlink\" title=\"##2.2    简单使用(man手册)\"></a>##2.2    简单使用(man手册)</h2><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//http://man7.org/linux/man-pages/man3/backtrace.3.html</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;execinfo.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;stdio.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;stdlib.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;unistd.h&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">void</span></span><br><span class=\"line\">myfunc3(<span class=\"keyword\">void</span>)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> j, nptrs;</span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> SIZE 100</span></span><br><span class=\"line\">\t<span class=\"keyword\">void</span> *buffer[<span class=\"number\">100</span>];</span><br><span class=\"line\">\t<span class=\"keyword\">char</span> **strings;</span><br><span class=\"line\"></span><br><span class=\"line\">\tnptrs = backtrace(buffer, SIZE);</span><br><span class=\"line\">\t<span class=\"built_in\">printf</span>(<span class=\"string\">\"backtrace() returned %d addresses\\n\"</span>, nptrs);</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">/* The call backtrace_symbols_fd(buffer, nptrs,</span></span><br><span class=\"line\"><span class=\"comment\">\t * STDOUT_FILENO)</span></span><br><span class=\"line\"><span class=\"comment\">\t *               would produce similar output to the</span></span><br><span class=\"line\"><span class=\"comment\">\t *               following: */</span></span><br><span class=\"line\"></span><br><span class=\"line\">\tstrings = backtrace_symbols(buffer, nptrs);</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (strings == <span class=\"literal\">NULL</span>) &#123;</span><br><span class=\"line\">\t\tperror(<span class=\"string\">\"backtrace_symbols\"</span>);</span><br><span class=\"line\">\t\t<span class=\"built_in\">exit</span>(EXIT_FAILURE);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (j = <span class=\"number\">0</span>; j &lt; nptrs; j++)</span><br><span class=\"line\">\t\t<span class=\"built_in\">printf</span>(<span class=\"string\">\"%s\\n\"</span>, strings[j]);</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"built_in\">free</span>(strings);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">static</span> <span class=\"keyword\">void</span>   <span class=\"comment\">/* \"static\" means don't export the symbol... */</span></span><br><span class=\"line\">myfunc2(<span class=\"keyword\">void</span>)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\tmyfunc3();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">void</span></span><br><span class=\"line\">myfunc(<span class=\"keyword\">int</span> ncalls)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (ncalls &gt; <span class=\"number\">1</span>)</span><br><span class=\"line\">\t\tmyfunc(ncalls - <span class=\"number\">1</span>);</span><br><span class=\"line\">\t<span class=\"keyword\">else</span></span><br><span class=\"line\">\t\tmyfunc2();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>编译运行程序</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">gcc -c prog.c -o prog.o    -rdynamic -g</span><br><span class=\"line\">gcc prog.o -o prog  -rdynamic -g</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">#./prog <span class=\"number\">3</span></span><br><span class=\"line\"></span><br><span class=\"line\">backtrace() returned <span class=\"number\">8</span> addresses</span><br><span class=\"line\">./prog(myfunc3+<span class=\"number\">0x1f</span>) [<span class=\"number\">0x4009cc</span>]</span><br><span class=\"line\">./prog() [<span class=\"number\">0x400a61</span>]</span><br><span class=\"line\">./prog(myfunc+<span class=\"number\">0x25</span>) [<span class=\"number\">0x400a88</span>]</span><br><span class=\"line\">./prog(myfunc+<span class=\"number\">0x1e</span>) [<span class=\"number\">0x400a81</span>]</span><br><span class=\"line\">./prog(myfunc+<span class=\"number\">0x1e</span>) [<span class=\"number\">0x400a81</span>]</span><br><span class=\"line\">./prog(main+<span class=\"number\">0x59</span>) [<span class=\"number\">0x400ae3</span>]</span><br><span class=\"line\">/lib64/libc.so<span class=\"number\">.6</span>(__libc_start_main+<span class=\"number\">0xf5</span>) [<span class=\"number\">0x7f1d1b1f1445</span>]</span><br><span class=\"line\">./prog() [<span class=\"number\">0x4008e9</span>]</span><br></pre></td></tr></table></figure>\n<p><img src=\"/2018/11/17/2018/11/0001-use_glibc_backtrace_to_report_active_stack_frames_userspace/./prog.png\" alt=\"prog\"></p>\n<h2 id=\"2-3-段错误时自动触发-call-trace\"><a href=\"#2-3-段错误时自动触发-call-trace\" class=\"headerlink\" title=\"##2.3    段错误时自动触发 call trace\"></a>##2.3    段错误时自动触发 <code>call trace</code></h2><p>我们还可以利用这 <code>backtrace</code> 来定位段错误位置.</p>\n<p>通常情况系, 程序发生段错误时系统会发送 <code>SIGSEGV</code> 信号给程序, 缺省处理是退出函数.</p>\n<p>我们可以使用 <code>signal(SIGSEGV, &amp;your_function);</code> 函数来接管 <code>SIGSEGV</code> 信号的处理,<br>程序在发生段错误后, 自动调用我们准备好的函数, 从而在那个函数里来获取当前函数调用栈.</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;stdio.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;stdlib.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;stddef.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;execinfo.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;signal.h&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/* Obtain a backtrace and print it to stdout. */</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> ARRAY_SIZE(x) (sizeof(x)/sizeof(x[0]))</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">dump_stack</span><span class=\"params\">(<span class=\"keyword\">void</span>)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">void</span> *<span class=\"built_in\">array</span>[<span class=\"number\">30</span>] = &#123; <span class=\"number\">0</span> &#125;;</span><br><span class=\"line\">\t<span class=\"keyword\">size_t</span> size = backtrace(<span class=\"built_in\">array</span>, ARRAY_SIZE(<span class=\"built_in\">array</span>));</span><br><span class=\"line\">\t<span class=\"keyword\">char</span> **strings = backtrace_symbols(<span class=\"built_in\">array</span>, size);</span><br><span class=\"line\">\t<span class=\"keyword\">size_t</span> i;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (strings == <span class=\"literal\">NULL</span>)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\tperror(<span class=\"string\">\"backtrace_symbols.\"</span>);</span><br><span class=\"line\">\t\t<span class=\"built_in\">exit</span>(EXIT_FAILURE);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"built_in\">printf</span>(<span class=\"string\">\"Obtained %zd stack frames.\\n\"</span>, size);</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (i = <span class=\"number\">0</span>; i &lt; size; i++)</span><br><span class=\"line\">\t\t<span class=\"built_in\">printf</span>(<span class=\"string\">\"%s\\n\"</span>, strings[i]);</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"built_in\">free</span>(strings);</span><br><span class=\"line\">\tstrings = <span class=\"literal\">NULL</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"built_in\">exit</span>(EXIT_SUCCESS);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">sighandler_dump_stack</span><span class=\"params\">(<span class=\"keyword\">int</span> sig)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\tpsignal(sig, <span class=\"string\">\"handler\"</span>);</span><br><span class=\"line\">\tdump_stack();</span><br><span class=\"line\">\tsignal(sig, SIG_DFL);</span><br><span class=\"line\">\traise(sig);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">func_c</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\t*((<span class=\"keyword\">volatile</span> <span class=\"keyword\">int</span> *)<span class=\"number\">0x0</span>) = <span class=\"number\">0x9999</span>; <span class=\"comment\">/* ERROR */</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">func_b</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\tfunc_c();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">func_a</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\tfunc_b();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">(<span class=\"keyword\">int</span> argc, <span class=\"keyword\">const</span> <span class=\"keyword\">char</span> *argv[])</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (signal(SIGSEGV, sighandler_dump_stack) == SIG_ERR)</span><br><span class=\"line\">\t\tperror(<span class=\"string\">\"can't catch SIGSEGV\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">\tfunc_a();</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>编译该程序</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cc -c handler.c -o handler.o    -rdynamic</span><br><span class=\"line\">cc handler.o -o handler  -rdynamic</span><br></pre></td></tr></table></figure>\n<p>接着运行.</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#./handler</span><br><span class=\"line\"></span><br><span class=\"line\">handler: Segmentation fault</span><br><span class=\"line\">Obtained <span class=\"number\">9</span> <span class=\"built_in\">stack</span> frames.</span><br><span class=\"line\">./handler(dump_stack+<span class=\"number\">0x39</span>) [<span class=\"number\">0x400aa6</span>]</span><br><span class=\"line\">./handler(sighandler_dump_stack+<span class=\"number\">0x1f</span>) [<span class=\"number\">0x400b6c</span>]</span><br><span class=\"line\">/lib64/libc.so<span class=\"number\">.6</span>(+<span class=\"number\">0x362f0</span>) [<span class=\"number\">0x7f0bc00f72f0</span>]</span><br><span class=\"line\">./handler(func_c+<span class=\"number\">0x9</span>) [<span class=\"number\">0x400b90</span>]</span><br><span class=\"line\">./handler(func_b+<span class=\"number\">0xe</span>) [<span class=\"number\">0x400ba6</span>]</span><br><span class=\"line\">./handler(func_a+<span class=\"number\">0xe</span>) [<span class=\"number\">0x400bb6</span>]</span><br><span class=\"line\">./handler(main+<span class=\"number\">0x38</span>) [<span class=\"number\">0x400bf0</span>]</span><br><span class=\"line\">/lib64/libc.so<span class=\"number\">.6</span>(__libc_start_main+<span class=\"number\">0xf5</span>) [<span class=\"number\">0x7f0bc00e3445</span>]</span><br><span class=\"line\">./handler() [<span class=\"number\">0x4009a9</span>]</span><br></pre></td></tr></table></figure>\n<p><img src=\"/2018/11/17/2018/11/0001-use_glibc_backtrace_to_report_active_stack_frames_userspace/./handler.png\" alt=\"程度异常后自动打印调用栈\"></p>\n<p>可以看出, 真正出异常的函数位置在 <code>./handler(func_c+0x9) [0x400b90]</code>.</p>\n<p>我们可以看下这个位置位于哪里:</p>\n<ul>\n<li>使用 <code>addr2line</code></li>\n</ul>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">addr2line -C -f -e  ./handler <span class=\"number\">0x400b90</span></span><br></pre></td></tr></table></figure>\n<p><img src=\"/2018/11/17/2018/11/0001-use_glibc_backtrace_to_report_active_stack_frames_userspace/./addr2line.png\" alt=\"addr2line 将行号显示出来\"></p>\n<p>对应错误的行号.</p>\n<p><img src=\"/2018/11/17/2018/11/0001-use_glibc_backtrace_to_report_active_stack_frames_userspace/./bugline.png\" alt=\"bugline\"></p>\n<ul>\n<li>使用 <code>objdump</code></li>\n</ul>\n<p>使用 objdump 将函数的指令信息 dump 出来.<br>其中  -D 参数表示显示所有汇编代码, -S 表示将对应的源码也显示出来<br>最后用 grep 显示地址 0x400b90 处前后 6 行的信息</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">objdump -DS ./handler | grep <span class=\"number\">-6</span>  <span class=\"string\">\"400b90\"</span></span><br></pre></td></tr></table></figure>\n<p><img src=\"/2018/11/17/2018/11/0001-use_glibc_backtrace_to_report_active_stack_frames_userspace/./objdump.png\" alt=\"objdump 将异常欣喜 dump 出来\"></p>\n<p>参考代码:</p>\n<blockquote>\n<p><a href=\"https://github.com/castoz/backtrace\" target=\"_blank\" rel=\"noopener\">a user-space simulated dump_stack(), based on mips.</a></p>\n<p><a href=\"https://elixir.bootlin.com/linux/v4.19.2/source/tools/perf/util/debug.c#L260\" target=\"_blank\" rel=\"noopener\">kernel perf source dump_stack</a></p>\n</blockquote>\n<h2 id=\"3-更低层次的函数\"><a href=\"#3-更低层次的函数\" class=\"headerlink\" title=\"#3    更低层次的函数\"></a>#3    更低层次的函数</h2><p>只有使用 <code>glibc 2.1</code> 或更新版本, 可以使用 <code>backtrace()</code> 函数, 参看 <code>&lt;execinfo.h&gt;</code>, 并且不同架构和系统中可能有不同的支持.</p>\n<p>因此 <code>GCC</code> 提供了两个内置函数用来在运行时取得函数调用栈中的返回地址和框架地址</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">void</span> *__builtin_return_address(<span class=\"keyword\">int</span> level);</span><br></pre></td></tr></table></figure>\n<p>得到当前函数层次为 level 的返回地址， 即此函数被别的函数调用, 然后此函数执行完毕后, 返回, 所谓返回地址就是调用的时候的地址(其实是调用位置的下一条指令的地址).</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">void</span>* __builtin_frame_address (<span class=\"keyword\">unsigned</span> <span class=\"keyword\">int</span> level);</span><br></pre></td></tr></table></figure>\n<p>得到当前函数的栈帧的地址.</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;memory.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;stdlib.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;stdio.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;signal.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;ucontext.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;dlfcn.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;execinfo.h&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">showBacktrace</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">void</span> * ret = __builtin_return_address(<span class=\"number\">1</span>);</span><br><span class=\"line\">        <span class=\"built_in\">printf</span>(<span class=\"string\">\"ret address [%p]\\n\"</span>, ret);</span><br><span class=\"line\">        <span class=\"keyword\">void</span> * caller = __builtin_frame_address(<span class=\"number\">0</span>);</span><br><span class=\"line\">        <span class=\"built_in\">printf</span>(<span class=\"string\">\"call address [%p]\\n\"</span>, caller);</span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">ifdef</span> __cplusplus</span></span><br><span class=\"line\">        Dl_info dlinfo;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">void</span> *ip = ret;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(!dladdr(ip, &amp;dlinfo)) &#123;</span><br><span class=\"line\">                perror(<span class=\"string\">\"addr not found\\n\"</span>);</span><br><span class=\"line\">                <span class=\"keyword\">return</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">const</span> <span class=\"keyword\">char</span> *symname = dlinfo.dli_sname;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> f = <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"built_in\">fprintf</span>(<span class=\"built_in\">stderr</span>, <span class=\"string\">\"% 2d: %p %s+%u (%s)\\n\"</span>,</span><br><span class=\"line\">                        ++f,</span><br><span class=\"line\">                        ip,</span><br><span class=\"line\">                        symname, <span class=\"number\">0</span>,</span><br><span class=\"line\"><span class=\"comment\">// (unsigned)(ip - dlinfo.dli_saddr),</span></span><br><span class=\"line\"></span><br><span class=\"line\">                        dlinfo.dli_fname);</span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">endif</span></span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">MyFunc_A</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">        showBacktrace();</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">10</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">MyFunc_B</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> MyFunc_A();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">        MyFunc_B();</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><img src=\"/2018/11/17/2018/11/0001-use_glibc_backtrace_to_report_active_stack_frames_userspace/./builtin.png\" alt=\"运行结果\"></p>\n<h2 id=\"4-参考资料\"><a href=\"#4-参考资料\" class=\"headerlink\" title=\"#4    参考资料\"></a>#4    参考资料</h2><p><a href=\"https://www.douban.com/group/topic/54568167/\" target=\"_blank\" rel=\"noopener\">Stack backtrace 的实现</a></p>\n<p><a href=\"http://en.verysource.com/code/6087935_1/backtrace.c.html\" target=\"_blank\" rel=\"noopener\">backtrace.c：Code Content</a></p>\n<p><a href=\"https://www.xuebuyuan.com/2867142.html\" target=\"_blank\" rel=\"noopener\">一个glibc中abort不能backtrace的问题</a></p>\n<p><a href=\"https://blog.csdn.net/jxgz_leo/article/details/53458366\" target=\"_blank\" rel=\"noopener\">在Linux中如何利用backtrace信息解决问题</a></p>\n<p><a href=\"https://blog.csdn.net/jasonchen_gbd/article/details/44066815?utm_source=blogxgwz8\" target=\"_blank\" rel=\"noopener\">内核中dump_stack()的实现，并在用户态模拟dump_stack()</a></p>\n<p><br></p>\n<ul>\n<li><p>本作品/博文 ( <a href=\"http://blog.csdn.net/gatieme\" target=\"_blank\" rel=\"noopener\">AderStep-紫夜阑珊-青伶巷草 Copyright ©2013-2017</a> ), 由 <a href=\"http://blog.csdn.net/gatieme\" target=\"_blank\" rel=\"noopener\">成坚(gatieme)</a> 创作.</p>\n</li>\n<li><p>采用<a rel=\"noopener\" href=\"http://creativecommons.org/licenses/by-nc-sa/4.0/\" target=\"_blank\"><img alt=\"知识共享许可协议\" style=\"border-width:0\" src=\"https://i.creativecommons.org/l/by-nc-sa/4.0/88x31.png\"></a><a rel=\"noopener\" href=\"http://creativecommons.org/licenses/by-nc-sa/4.0/\" target=\"_blank\">知识共享署名-非商业性使用-相同方式共享 4.0 国际许可协议</a>进行许可. 欢迎转载、使用、重新发布, 但务必保留文章署名<a href=\"http://blog.csdn.net/gatieme\" target=\"_blank\" rel=\"noopener\">成坚gatieme</a> ( 包含链接: <a href=\"http://blog.csdn.net/gatieme\" target=\"_blank\" rel=\"noopener\">http://blog.csdn.net/gatieme</a> ), 不得用于商业目的.</p>\n</li>\n<li><p>基于本文修改后的作品务必以相同的许可发布. 如有任何疑问，请与我联系.</p>\n</li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">CSDN</th>\n<th style=\"text-align:center\">GitHub</th>\n<th style=\"text-align:center\">Hexo</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\"><a href=\"https://blog.csdn.net/gatieme/article/details/84189280\" target=\"_blank\" rel=\"noopener\">用户态使用 glibc/backtrace 追踪函数调用堆栈定位段错误</a></td>\n<td style=\"text-align:center\"><a href=\"https://github.com/gatieme/AderXCoding/tree/master/language/c/backtrace\" target=\"_blank\" rel=\"noopener\"><code>AderXCoding/language/c/backtrace</code></a></td>\n<td style=\"text-align:center\"><a href=\"https://gatieme.github.io/2018/09/30/2018/09/0003-qemu_use_9pnet_virtio_fs_to_share_folder/index\" target=\"_blank\" rel=\"noopener\">KernelShow(gatieme.github.io)</a></td>\n</tr>\n</tbody>\n</table>\n<p><br></p>\n<p><a rel=\"noopener\" href=\"http://creativecommons.org/licenses/by-nc-sa/4.0/\" target=\"_blank\"><img alt=\"知识共享许可协议\" style=\"border-width:0\" src=\"https://i.creativecommons.org/l/by-nc-sa/4.0/88x31.png\"></a></p>\n<p>本作品采用<a rel=\"noopener\" href=\"http://creativecommons.org/licenses/by-nc-sa/4.0/\" target=\"_blank\">知识共享署名-非商业性使用-相同方式共享 4.0 国际许可协议</a>进行许可, 转载请注明出处, 谢谢合作</p>\n<p>因本人技术水平和知识面有限, 内容如有纰漏或者需要修正的地方, 欢迎大家指正, 也欢迎大家提供一些其他好的调试工具以供收录, 鄙人在此谢谢啦</p>\n<p><br></p>\n<p>一般察看函数运行时堆栈的方法是使用 <code>GDB(bt命令)</code> 之类的外部调试器, 但是, 有些时候为了分析程序的 <code>BUG</code>,(主要针对长时间运行程序的分析),在程序出错时打印出函数的调用堆栈是非常有用的.</p>\n<h2 id=\"1-glibc-获取堆栈信息的接口\"><a href=\"#1-glibc-获取堆栈信息的接口\" class=\"headerlink\" title=\"#1    glibc 获取堆栈信息的接口\"></a>#1    glibc 获取堆栈信息的接口</h2><p>在 <code>glibc</code> 头文件 <code>execinfo.h</code> 中声明了三个函数用于获取当前线程的函数调用堆栈.</p>\n<h2 id=\"1-1\"><a href=\"#1-1\" class=\"headerlink\" title=\"#1.1\"></a>#1.1</h2><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;execinfo.h&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/* Store up to SIZE return address of the current program state in</span></span><br><span class=\"line\"><span class=\"comment\">   ARRAY and return the exact number of values stored.  */</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">backtrace</span><span class=\"params\">(<span class=\"keyword\">void</span> **<span class=\"built_in\">array</span>, <span class=\"keyword\">int</span> size)</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/* Return names of functions from the backtrace list in ARRAY in a newly</span></span><br><span class=\"line\"><span class=\"comment\">   malloc()ed memory block.  */</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">char</span> **<span class=\"title\">backtrace_symbols</span><span class=\"params\">(<span class=\"keyword\">void</span> *<span class=\"keyword\">const</span> *<span class=\"built_in\">array</span>, <span class=\"keyword\">int</span> size)</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/* This function is similar to backtrace_symbols() but it writes the</span></span><br><span class=\"line\"><span class=\"comment\">   result immediately to a file.  */</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">backtrace_symbols_fd</span><span class=\"params\">(<span class=\"keyword\">void</span> *<span class=\"keyword\">const</span> *<span class=\"built_in\">array</span>, <span class=\"keyword\">int</span> size, <span class=\"keyword\">int</span> fd)</span></span>;</span><br></pre></td></tr></table></figure>\n<p>使用它们的时候有一下几点需要我们注意的地方：</p>\n<ul>\n<li><p>backtrace的实现依赖于栈指针(fp寄存器), 在gcc编译过程中任何非零的优化等级（-On参数）或加入了栈指针优化参数 <code>-fomit-frame-pointer</code> 后多将不能正确得到程序栈信息;</p>\n</li>\n<li><p>backtrace_symbols的实现需要符号名称的支持, 在gcc编译过程中需要加入 <code>-rdynamic</code> 参数</p>\n</li>\n<li><p>内联函数没有栈帧, 它在编译过程中被展开在调用的位置；</p>\n</li>\n<li><p>尾调用优化(Tail-call Optimization)将复用当前函数栈, 而不再生成新的函数栈, 这将导致栈信息不能正确被获取。</p>\n</li>\n</ul>\n<h2 id=\"1-2-backtrace\"><a href=\"#1-2-backtrace\" class=\"headerlink\" title=\"##1.2    backtrace\"></a>##1.2    backtrace</h2><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">backtrace</span><span class=\"params\">(<span class=\"keyword\">void</span> **buffer,<span class=\"keyword\">int</span> size)</span></span></span><br></pre></td></tr></table></figure>\n<p>该函数用于获取当前线程的调用堆栈,</p>\n<p>参数:<br>    获取的信息将会被存放在 <code>buffer</code> 中,它是一个指针列表.<br>    参数 <code>size</code> 用来指定 <code>buffer</code> 中可以保存多少个 <code>void*</code> 元素.</p>\n<p>函数返回值:<br>    实际获取的指针个数, 最大不超过 <code>size</code>大小.</p>\n<p>在 <code>buffer</code> 中的指针实际是从堆栈中获取的返回地址, 每一个堆栈框架有一个返回地址</p>\n<p>注意:某些编译器的优化选项对获取正确的调用堆栈有干扰,另外内联函数没有堆栈框架;删除框架指针也会导致无法正确解析堆栈内容</p>\n<h2 id=\"1-3-backtrace-symbols\"><a href=\"#1-3-backtrace-symbols\" class=\"headerlink\" title=\"##1.3    backtrace_symbols\"></a>##1.3    backtrace_symbols</h2><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">char</span> ** <span class=\"title\">backtrace_symbols</span> <span class=\"params\">(<span class=\"keyword\">void</span> *<span class=\"keyword\">const</span> *buffer, <span class=\"keyword\">int</span> size)</span></span></span><br></pre></td></tr></table></figure>\n<p><code>backtrace_symbols</code> 将从 <code>backtrace</code> 函数获取的信息转化为一个字符串数组.</p>\n<p>参数:<br>    <code>buffer</code> 应该是从 <code>backtrace</code> 函数获取的指针数组<br>    <code>size</code> 是该数组中的元素个数(<code>backtrace</code> 的返回值)</p>\n<p>函数返回值:<br>    一个指向字符串数组的指针, 它的大小同 <code>buffer</code> 相同.<br>    每个字符串包含了一个相对于buffer中对应元素的可打印信息.<br>    它包括函数名，函数的偏移地址,和实际的返回地址</p>\n<p>现在, 只有使用ELF二进制格式的程序才能获取函数名称和偏移地址. 在其他系统,只有16进制的返回地址能被获取.<br>另外,你可能需要传递相应的符号给链接器,以能支持函数名功能</p>\n<blockquote>\n<p>(比如,在使用GNU ld链接器的系统中,你需要传递(-rdynamic)， -rdynamic可用来通知链接器将所有符号添加到动态符号表中，如果你的链接器支持-rdynamic的话，建议将其加上！)</p>\n</blockquote>\n<p>该函数的返回值是通过malloc函数申请的空间,因此调用者必须使用free函数来释放指针.</p>\n<blockquote>\n<p>注意 : 如果不能为字符串获取足够的空间函数的返回值将会为NULL</p>\n</blockquote>\n<h2 id=\"1-4-backtrace-symbols-fd\"><a href=\"#1-4-backtrace-symbols-fd\" class=\"headerlink\" title=\"##1.4    backtrace_symbols_fd\"></a>##1.4    backtrace_symbols_fd</h2><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">backtrace_symbols_fd</span> <span class=\"params\">(<span class=\"keyword\">void</span> *<span class=\"keyword\">const</span> *buffer, <span class=\"keyword\">int</span> size, <span class=\"keyword\">int</span> fd)</span></span></span><br></pre></td></tr></table></figure>\n<p><code>backtrace_symbols_fd</code> 与 <code>backtrace_symbols</code> 函数具有相同的功能, 不同的是它不会给调用者返回字符串数组,而是将结果写入文件描述符为 <code>fd</code> 的文件中, 每个函数对应一行.它不需要调用malloc函数,因此适用于有可能调用该函数会失败的情况</p>\n<h2 id=\"2-示例\"><a href=\"#2-示例\" class=\"headerlink\" title=\"#2    示例\"></a>#2    示例</h2><h2 id=\"2-1-简单用例-glibc-提供\"><a href=\"#2-1-简单用例-glibc-提供\" class=\"headerlink\" title=\"##2.1    简单用例(glibc 提供)\"></a>##2.1    简单用例(glibc 提供)</h2><p>下面是 <code>glibc</code> 中的实例：</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// http://www.gnu.org/software/libc/manual/html_node/Backtraces.html</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;execinfo.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;stdio.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;stdlib.h&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/* Obtain a backtrace and print it to @code&#123;stdout&#125;. */</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">print_trace</span> <span class=\"params\">(<span class=\"keyword\">void</span>)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">void</span>    * <span class=\"built_in\">array</span>[<span class=\"number\">10</span>];</span><br><span class=\"line\">\t<span class=\"keyword\">size_t</span>  size;</span><br><span class=\"line\">\t<span class=\"keyword\">char</span>    ** strings;</span><br><span class=\"line\">\t<span class=\"keyword\">size_t</span>  i;</span><br><span class=\"line\"></span><br><span class=\"line\">\tsize = backtrace(<span class=\"built_in\">array</span>, <span class=\"number\">10</span>);</span><br><span class=\"line\">\tstrings = backtrace_symbols (<span class=\"built_in\">array</span>, size);</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (<span class=\"literal\">NULL</span> == strings)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\tperror(<span class=\"string\">\"backtrace_symbols\"</span>);</span><br><span class=\"line\">\t\t<span class=\"built_in\">exit</span>(EXIT_FAILURE);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"built_in\">printf</span> (<span class=\"string\">\"Obtained %zd stack frames.\\n\"</span>, size);</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (i = <span class=\"number\">0</span>; i &lt; size; i++)</span><br><span class=\"line\">\t\t<span class=\"built_in\">printf</span> (<span class=\"string\">\"%s\\n\"</span>, strings[i]);</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"built_in\">free</span> (strings);</span><br><span class=\"line\">\tstrings = <span class=\"literal\">NULL</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/* A dummy function to make the backtrace more interesting. */</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">dummy_function</span> <span class=\"params\">(<span class=\"keyword\">void</span>)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\tprint_trace();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span> <span class=\"params\">(<span class=\"keyword\">int</span> argc, <span class=\"keyword\">char</span> *argv[])</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\tdummy_function();</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>输出如下：</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">gcc -c example.c -o example.o    -rdynamic -g</span><br><span class=\"line\">gcc example.o -o example  -rdynamic -g</span><br><span class=\"line\"></span><br><span class=\"line\">#./example</span><br><span class=\"line\"></span><br><span class=\"line\">Obtained <span class=\"number\">5</span> <span class=\"built_in\">stack</span> frames.</span><br><span class=\"line\">./example(print_trace+<span class=\"number\">0x19</span>) [<span class=\"number\">0x400916</span>]</span><br><span class=\"line\">./example(dummy_function+<span class=\"number\">0x9</span>) [<span class=\"number\">0x4009bb</span>]</span><br><span class=\"line\">./example(main+<span class=\"number\">0x14</span>) [<span class=\"number\">0x4009d1</span>]</span><br><span class=\"line\">/lib64/libc.so<span class=\"number\">.6</span>(__libc_start_main+<span class=\"number\">0xf5</span>) [<span class=\"number\">0x7fb5e7f49445</span>]</span><br><span class=\"line\">./example() [<span class=\"number\">0x400839</span>]</span><br></pre></td></tr></table></figure>\n<p><img src=\"/2018/11/17/2018/11/0001-use_glibc_backtrace_to_report_active_stack_frames_userspace/./example.png\" alt=\"example\"></p>\n<h2 id=\"2-2-简单使用-man手册\"><a href=\"#2-2-简单使用-man手册\" class=\"headerlink\" title=\"##2.2    简单使用(man手册)\"></a>##2.2    简单使用(man手册)</h2><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//http://man7.org/linux/man-pages/man3/backtrace.3.html</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;execinfo.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;stdio.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;stdlib.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;unistd.h&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">void</span></span><br><span class=\"line\">myfunc3(<span class=\"keyword\">void</span>)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> j, nptrs;</span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> SIZE 100</span></span><br><span class=\"line\">\t<span class=\"keyword\">void</span> *buffer[<span class=\"number\">100</span>];</span><br><span class=\"line\">\t<span class=\"keyword\">char</span> **strings;</span><br><span class=\"line\"></span><br><span class=\"line\">\tnptrs = backtrace(buffer, SIZE);</span><br><span class=\"line\">\t<span class=\"built_in\">printf</span>(<span class=\"string\">\"backtrace() returned %d addresses\\n\"</span>, nptrs);</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">/* The call backtrace_symbols_fd(buffer, nptrs,</span></span><br><span class=\"line\"><span class=\"comment\">\t * STDOUT_FILENO)</span></span><br><span class=\"line\"><span class=\"comment\">\t *               would produce similar output to the</span></span><br><span class=\"line\"><span class=\"comment\">\t *               following: */</span></span><br><span class=\"line\"></span><br><span class=\"line\">\tstrings = backtrace_symbols(buffer, nptrs);</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (strings == <span class=\"literal\">NULL</span>) &#123;</span><br><span class=\"line\">\t\tperror(<span class=\"string\">\"backtrace_symbols\"</span>);</span><br><span class=\"line\">\t\t<span class=\"built_in\">exit</span>(EXIT_FAILURE);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (j = <span class=\"number\">0</span>; j &lt; nptrs; j++)</span><br><span class=\"line\">\t\t<span class=\"built_in\">printf</span>(<span class=\"string\">\"%s\\n\"</span>, strings[j]);</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"built_in\">free</span>(strings);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">static</span> <span class=\"keyword\">void</span>   <span class=\"comment\">/* \"static\" means don't export the symbol... */</span></span><br><span class=\"line\">myfunc2(<span class=\"keyword\">void</span>)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\tmyfunc3();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">void</span></span><br><span class=\"line\">myfunc(<span class=\"keyword\">int</span> ncalls)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (ncalls &gt; <span class=\"number\">1</span>)</span><br><span class=\"line\">\t\tmyfunc(ncalls - <span class=\"number\">1</span>);</span><br><span class=\"line\">\t<span class=\"keyword\">else</span></span><br><span class=\"line\">\t\tmyfunc2();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>编译运行程序</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">gcc -c prog.c -o prog.o    -rdynamic -g</span><br><span class=\"line\">gcc prog.o -o prog  -rdynamic -g</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">#./prog <span class=\"number\">3</span></span><br><span class=\"line\"></span><br><span class=\"line\">backtrace() returned <span class=\"number\">8</span> addresses</span><br><span class=\"line\">./prog(myfunc3+<span class=\"number\">0x1f</span>) [<span class=\"number\">0x4009cc</span>]</span><br><span class=\"line\">./prog() [<span class=\"number\">0x400a61</span>]</span><br><span class=\"line\">./prog(myfunc+<span class=\"number\">0x25</span>) [<span class=\"number\">0x400a88</span>]</span><br><span class=\"line\">./prog(myfunc+<span class=\"number\">0x1e</span>) [<span class=\"number\">0x400a81</span>]</span><br><span class=\"line\">./prog(myfunc+<span class=\"number\">0x1e</span>) [<span class=\"number\">0x400a81</span>]</span><br><span class=\"line\">./prog(main+<span class=\"number\">0x59</span>) [<span class=\"number\">0x400ae3</span>]</span><br><span class=\"line\">/lib64/libc.so<span class=\"number\">.6</span>(__libc_start_main+<span class=\"number\">0xf5</span>) [<span class=\"number\">0x7f1d1b1f1445</span>]</span><br><span class=\"line\">./prog() [<span class=\"number\">0x4008e9</span>]</span><br></pre></td></tr></table></figure>\n<p><img src=\"/2018/11/17/2018/11/0001-use_glibc_backtrace_to_report_active_stack_frames_userspace/./prog.png\" alt=\"prog\"></p>\n<h2 id=\"2-3-段错误时自动触发-call-trace\"><a href=\"#2-3-段错误时自动触发-call-trace\" class=\"headerlink\" title=\"##2.3    段错误时自动触发 call trace\"></a>##2.3    段错误时自动触发 <code>call trace</code></h2><p>我们还可以利用这 <code>backtrace</code> 来定位段错误位置.</p>\n<p>通常情况系, 程序发生段错误时系统会发送 <code>SIGSEGV</code> 信号给程序, 缺省处理是退出函数.</p>\n<p>我们可以使用 <code>signal(SIGSEGV, &amp;your_function);</code> 函数来接管 <code>SIGSEGV</code> 信号的处理,<br>程序在发生段错误后, 自动调用我们准备好的函数, 从而在那个函数里来获取当前函数调用栈.</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;stdio.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;stdlib.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;stddef.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;execinfo.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;signal.h&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/* Obtain a backtrace and print it to stdout. */</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> ARRAY_SIZE(x) (sizeof(x)/sizeof(x[0]))</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">dump_stack</span><span class=\"params\">(<span class=\"keyword\">void</span>)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">void</span> *<span class=\"built_in\">array</span>[<span class=\"number\">30</span>] = &#123; <span class=\"number\">0</span> &#125;;</span><br><span class=\"line\">\t<span class=\"keyword\">size_t</span> size = backtrace(<span class=\"built_in\">array</span>, ARRAY_SIZE(<span class=\"built_in\">array</span>));</span><br><span class=\"line\">\t<span class=\"keyword\">char</span> **strings = backtrace_symbols(<span class=\"built_in\">array</span>, size);</span><br><span class=\"line\">\t<span class=\"keyword\">size_t</span> i;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (strings == <span class=\"literal\">NULL</span>)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\tperror(<span class=\"string\">\"backtrace_symbols.\"</span>);</span><br><span class=\"line\">\t\t<span class=\"built_in\">exit</span>(EXIT_FAILURE);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"built_in\">printf</span>(<span class=\"string\">\"Obtained %zd stack frames.\\n\"</span>, size);</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (i = <span class=\"number\">0</span>; i &lt; size; i++)</span><br><span class=\"line\">\t\t<span class=\"built_in\">printf</span>(<span class=\"string\">\"%s\\n\"</span>, strings[i]);</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"built_in\">free</span>(strings);</span><br><span class=\"line\">\tstrings = <span class=\"literal\">NULL</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"built_in\">exit</span>(EXIT_SUCCESS);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">sighandler_dump_stack</span><span class=\"params\">(<span class=\"keyword\">int</span> sig)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\tpsignal(sig, <span class=\"string\">\"handler\"</span>);</span><br><span class=\"line\">\tdump_stack();</span><br><span class=\"line\">\tsignal(sig, SIG_DFL);</span><br><span class=\"line\">\traise(sig);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">func_c</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\t*((<span class=\"keyword\">volatile</span> <span class=\"keyword\">int</span> *)<span class=\"number\">0x0</span>) = <span class=\"number\">0x9999</span>; <span class=\"comment\">/* ERROR */</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">func_b</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\tfunc_c();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">func_a</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\tfunc_b();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">(<span class=\"keyword\">int</span> argc, <span class=\"keyword\">const</span> <span class=\"keyword\">char</span> *argv[])</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (signal(SIGSEGV, sighandler_dump_stack) == SIG_ERR)</span><br><span class=\"line\">\t\tperror(<span class=\"string\">\"can't catch SIGSEGV\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">\tfunc_a();</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>编译该程序</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cc -c handler.c -o handler.o    -rdynamic</span><br><span class=\"line\">cc handler.o -o handler  -rdynamic</span><br></pre></td></tr></table></figure>\n<p>接着运行.</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#./handler</span><br><span class=\"line\"></span><br><span class=\"line\">handler: Segmentation fault</span><br><span class=\"line\">Obtained <span class=\"number\">9</span> <span class=\"built_in\">stack</span> frames.</span><br><span class=\"line\">./handler(dump_stack+<span class=\"number\">0x39</span>) [<span class=\"number\">0x400aa6</span>]</span><br><span class=\"line\">./handler(sighandler_dump_stack+<span class=\"number\">0x1f</span>) [<span class=\"number\">0x400b6c</span>]</span><br><span class=\"line\">/lib64/libc.so<span class=\"number\">.6</span>(+<span class=\"number\">0x362f0</span>) [<span class=\"number\">0x7f0bc00f72f0</span>]</span><br><span class=\"line\">./handler(func_c+<span class=\"number\">0x9</span>) [<span class=\"number\">0x400b90</span>]</span><br><span class=\"line\">./handler(func_b+<span class=\"number\">0xe</span>) [<span class=\"number\">0x400ba6</span>]</span><br><span class=\"line\">./handler(func_a+<span class=\"number\">0xe</span>) [<span class=\"number\">0x400bb6</span>]</span><br><span class=\"line\">./handler(main+<span class=\"number\">0x38</span>) [<span class=\"number\">0x400bf0</span>]</span><br><span class=\"line\">/lib64/libc.so<span class=\"number\">.6</span>(__libc_start_main+<span class=\"number\">0xf5</span>) [<span class=\"number\">0x7f0bc00e3445</span>]</span><br><span class=\"line\">./handler() [<span class=\"number\">0x4009a9</span>]</span><br></pre></td></tr></table></figure>\n<p><img src=\"/2018/11/17/2018/11/0001-use_glibc_backtrace_to_report_active_stack_frames_userspace/./handler.png\" alt=\"程度异常后自动打印调用栈\"></p>\n<p>可以看出, 真正出异常的函数位置在 <code>./handler(func_c+0x9) [0x400b90]</code>.</p>\n<p>我们可以看下这个位置位于哪里:</p>\n<ul>\n<li>使用 <code>addr2line</code></li>\n</ul>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">addr2line -C -f -e  ./handler <span class=\"number\">0x400b90</span></span><br></pre></td></tr></table></figure>\n<p><img src=\"/2018/11/17/2018/11/0001-use_glibc_backtrace_to_report_active_stack_frames_userspace/./addr2line.png\" alt=\"addr2line 将行号显示出来\"></p>\n<p>对应错误的行号.</p>\n<p><img src=\"/2018/11/17/2018/11/0001-use_glibc_backtrace_to_report_active_stack_frames_userspace/./bugline.png\" alt=\"bugline\"></p>\n<ul>\n<li>使用 <code>objdump</code></li>\n</ul>\n<p>使用 objdump 将函数的指令信息 dump 出来.<br>其中  -D 参数表示显示所有汇编代码, -S 表示将对应的源码也显示出来<br>最后用 grep 显示地址 0x400b90 处前后 6 行的信息</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">objdump -DS ./handler | grep <span class=\"number\">-6</span>  <span class=\"string\">\"400b90\"</span></span><br></pre></td></tr></table></figure>\n<p><img src=\"/2018/11/17/2018/11/0001-use_glibc_backtrace_to_report_active_stack_frames_userspace/./objdump.png\" alt=\"objdump 将异常欣喜 dump 出来\"></p>\n<p>参考代码:</p>\n<blockquote>\n<p><a href=\"https://github.com/castoz/backtrace\" target=\"_blank\" rel=\"noopener\">a user-space simulated dump_stack(), based on mips.</a></p>\n<p><a href=\"https://elixir.bootlin.com/linux/v4.19.2/source/tools/perf/util/debug.c#L260\" target=\"_blank\" rel=\"noopener\">kernel perf source dump_stack</a></p>\n</blockquote>\n<h2 id=\"3-更低层次的函数\"><a href=\"#3-更低层次的函数\" class=\"headerlink\" title=\"#3    更低层次的函数\"></a>#3    更低层次的函数</h2><p>只有使用 <code>glibc 2.1</code> 或更新版本, 可以使用 <code>backtrace()</code> 函数, 参看 <code>&lt;execinfo.h&gt;</code>, 并且不同架构和系统中可能有不同的支持.</p>\n<p>因此 <code>GCC</code> 提供了两个内置函数用来在运行时取得函数调用栈中的返回地址和框架地址</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">void</span> *__builtin_return_address(<span class=\"keyword\">int</span> level);</span><br></pre></td></tr></table></figure>\n<p>得到当前函数层次为 level 的返回地址， 即此函数被别的函数调用, 然后此函数执行完毕后, 返回, 所谓返回地址就是调用的时候的地址(其实是调用位置的下一条指令的地址).</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">void</span>* __builtin_frame_address (<span class=\"keyword\">unsigned</span> <span class=\"keyword\">int</span> level);</span><br></pre></td></tr></table></figure>\n<p>得到当前函数的栈帧的地址.</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;memory.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;stdlib.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;stdio.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;signal.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;ucontext.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;dlfcn.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;execinfo.h&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">showBacktrace</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">void</span> * ret = __builtin_return_address(<span class=\"number\">1</span>);</span><br><span class=\"line\">        <span class=\"built_in\">printf</span>(<span class=\"string\">\"ret address [%p]\\n\"</span>, ret);</span><br><span class=\"line\">        <span class=\"keyword\">void</span> * caller = __builtin_frame_address(<span class=\"number\">0</span>);</span><br><span class=\"line\">        <span class=\"built_in\">printf</span>(<span class=\"string\">\"call address [%p]\\n\"</span>, caller);</span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">ifdef</span> __cplusplus</span></span><br><span class=\"line\">        Dl_info dlinfo;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">void</span> *ip = ret;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(!dladdr(ip, &amp;dlinfo)) &#123;</span><br><span class=\"line\">                perror(<span class=\"string\">\"addr not found\\n\"</span>);</span><br><span class=\"line\">                <span class=\"keyword\">return</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">const</span> <span class=\"keyword\">char</span> *symname = dlinfo.dli_sname;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> f = <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"built_in\">fprintf</span>(<span class=\"built_in\">stderr</span>, <span class=\"string\">\"% 2d: %p %s+%u (%s)\\n\"</span>,</span><br><span class=\"line\">                        ++f,</span><br><span class=\"line\">                        ip,</span><br><span class=\"line\">                        symname, <span class=\"number\">0</span>,</span><br><span class=\"line\"><span class=\"comment\">// (unsigned)(ip - dlinfo.dli_saddr),</span></span><br><span class=\"line\"></span><br><span class=\"line\">                        dlinfo.dli_fname);</span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">endif</span></span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">MyFunc_A</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">        showBacktrace();</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">10</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">MyFunc_B</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> MyFunc_A();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">        MyFunc_B();</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><img src=\"/2018/11/17/2018/11/0001-use_glibc_backtrace_to_report_active_stack_frames_userspace/./builtin.png\" alt=\"运行结果\"></p>\n<h2 id=\"4-参考资料\"><a href=\"#4-参考资料\" class=\"headerlink\" title=\"#4    参考资料\"></a>#4    参考资料</h2><p><a href=\"https://www.douban.com/group/topic/54568167/\" target=\"_blank\" rel=\"noopener\">Stack backtrace 的实现</a></p>\n<p><a href=\"http://en.verysource.com/code/6087935_1/backtrace.c.html\" target=\"_blank\" rel=\"noopener\">backtrace.c：Code Content</a></p>\n<p><a href=\"https://www.xuebuyuan.com/2867142.html\" target=\"_blank\" rel=\"noopener\">一个glibc中abort不能backtrace的问题</a></p>\n<p><a href=\"https://blog.csdn.net/jxgz_leo/article/details/53458366\" target=\"_blank\" rel=\"noopener\">在Linux中如何利用backtrace信息解决问题</a></p>\n<p><a href=\"https://blog.csdn.net/jasonchen_gbd/article/details/44066815?utm_source=blogxgwz8\" target=\"_blank\" rel=\"noopener\">内核中dump_stack()的实现，并在用户态模拟dump_stack()</a></p>\n<p><br></p>\n<ul>\n<li><p>本作品/博文 ( <a href=\"http://blog.csdn.net/gatieme\" target=\"_blank\" rel=\"noopener\">AderStep-紫夜阑珊-青伶巷草 Copyright ©2013-2017</a> ), 由 <a href=\"http://blog.csdn.net/gatieme\" target=\"_blank\" rel=\"noopener\">成坚(gatieme)</a> 创作.</p>\n</li>\n<li><p>采用<a rel=\"noopener\" href=\"http://creativecommons.org/licenses/by-nc-sa/4.0/\" target=\"_blank\"><img alt=\"知识共享许可协议\" style=\"border-width:0\" src=\"https://i.creativecommons.org/l/by-nc-sa/4.0/88x31.png\"></a><a rel=\"noopener\" href=\"http://creativecommons.org/licenses/by-nc-sa/4.0/\" target=\"_blank\">知识共享署名-非商业性使用-相同方式共享 4.0 国际许可协议</a>进行许可. 欢迎转载、使用、重新发布, 但务必保留文章署名<a href=\"http://blog.csdn.net/gatieme\" target=\"_blank\" rel=\"noopener\">成坚gatieme</a> ( 包含链接: <a href=\"http://blog.csdn.net/gatieme\" target=\"_blank\" rel=\"noopener\">http://blog.csdn.net/gatieme</a> ), 不得用于商业目的.</p>\n</li>\n<li><p>基于本文修改后的作品务必以相同的许可发布. 如有任何疑问，请与我联系.</p>\n</li>\n</ul>\n"}],"PostAsset":[],"PostCategory":[{"post_id":"cjmgbtjct0004n8ozyapswddt","category_id":"cjmgbtjd60006n8ozqxikt71r","_id":"cjmgbtjds000en8oz1gxvqjdh"},{"post_id":"cjmgbtjd20005n8oz6m4ntpo1","category_id":"cjmgbtjd60006n8ozqxikt71r","_id":"cjmgbtjdv000hn8ozcm9l0hng"},{"post_id":"cjmgbtjdb0008n8ozxn13gxan","category_id":"cjmgbtjds000dn8oz7g8ard1i","_id":"cjmgbtje0000ln8ozuyrfuj53"},{"post_id":"cjmgbtjdi0009n8ozshsvvohi","category_id":"cjmgbtjds000dn8oz7g8ard1i","_id":"cjmgbtje0000nn8ozeehvvv6s"},{"post_id":"cjmot6shr0000jlozr6abvoxv","category_id":"cjmot6sib0001jlozbr4xu7wj","_id":"cjmot6sim0004jlozr4vfujv1"},{"post_id":"cjol7oucy0000rlozowmj494z","category_id":"cjol7oudd0001rlozui6z0iqs","_id":"cjol7oue50003rlozho7sngve"}],"PostTag":[{"post_id":"cjmgbtjct0004n8ozyapswddt","tag_id":"cjmgbtjda0007n8ozq28sv3ws","_id":"cjmgbtjdq000cn8ozitmxlqf7"},{"post_id":"cjmgbtjd20005n8oz6m4ntpo1","tag_id":"cjmgbtjda0007n8ozq28sv3ws","_id":"cjmgbtjdv000gn8ozuuiz3eao"},{"post_id":"cjmgbtjdb0008n8ozxn13gxan","tag_id":"cjmgbtjds000fn8ozpq7rd4s4","_id":"cjmgbtjdz000kn8ozf8cwfzv3"},{"post_id":"cjmgbtjdi0009n8ozshsvvohi","tag_id":"cjmgbtjds000fn8ozpq7rd4s4","_id":"cjmgbtje0000mn8ozuazumq9p"},{"post_id":"cjmot6shr0000jlozr6abvoxv","tag_id":"cjmot6sii0002jloz9n8ruzlw","_id":"cjmot6sil0003jlozefetg80l"},{"post_id":"cjol7oucy0000rlozowmj494z","tag_id":"cjmgbtjda0007n8ozq28sv3ws","_id":"cjol7oue20002rlozlkuis03n"}],"Tag":[{"name":"linux","_id":"cjmgbtjda0007n8ozq28sv3ws"},{"name":"hexo","_id":"cjmgbtjds000fn8ozpq7rd4s4"},{"name":"qemu","_id":"cjmot6sii0002jloz9n8ruzlw"}]}}